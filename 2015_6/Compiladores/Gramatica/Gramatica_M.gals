#Options
GenerateScanner = true
GenerateParser = true
Language = Java
ScannerName = Lexico
ParserName = Sintatico
SemanticName = Semantico
ScannerCaseSensitive = true
ScannerTable = Full
Input = Stream
Parser = LL
#RegularDefinitions
WS:[\ \n \t]
//DIGITOS
D:[0-9]
//LETRAS
L:[A-Za-z]

#Tokens
:{WS}*

//Tokens de Comandos
inicio: "begin"
fim: "end"
escrever: "output"
ler: "input"
condicao_se: "if"
senao: "@"

condicao_repeticao: "loop"
fim_repeticao: "lend"


//Tokens de Logica e Matematica
logica_maior_que:">="
logica_menor_que:"<="
logica_igual:"=="
logica_maior:">"
logica_menor:"<"
logica_diferente:"!="

matematica_soma:"+"
matematica_subtracao:"-"
matematica_multiplicacao:"*"
matematica_divisao:"/"
matematica_igual:"="


final_linha:";"
dois_pontos:":"
ponto_interrogacao:"?"
abre_parenteses:\(
fecha_parenteses:\)
virgula:","

//Tokens de Tipo
tipo: "int"
variavel: {L}({L}|{D})*
texto: \".*\"
numero: {D}*
#NonTerminals
//COMANDOS
<INICIO_FIM>
<CODIGO>

//Comandos
<COMANDO>
<SE>
<SENAO>
<LOOP>

//Declaração e Atribuição
<DECLARACAO>
<ATRIBUIR_VALOR>
<ATRIBUICAO>

//Argumentos
<ARGUMENTO>
<ARGUMENTO_TEXTO>
<ARGUMENTO_NUMERICO>

//Verifica expressao
<CALCULO>
<EXPRESSAO>
<LOGICA>
<EXPRESSAO_MATEMATICA>

//Logica e Matematica
<OP_LOGICA>
<OP_MATEMATICA>
#Grammar
//Estrutura Global do programa
<INICIO_FIM> ::= inicio <CODIGO> fim;

//Estrutura do Codigo
<CODIGO> ::=  <COMANDO> <CODIGO>;
<CODIGO> ::= î;

//Comandos
<COMANDO> ::= escrever abre_parenteses <ARGUMENTO> fecha_parenteses final_linha;
<COMANDO> ::= ler abre_parenteses variavel fecha_parenteses final_linha;
<COMANDO> ::= condicao_se <EXPRESSAO> ponto_interrogacao <CODIGO> <SENAO>;
<COMANDO> ::= condicao_repeticao <LOGICA> <LOOP>;
<COMANDO> ::= <DECLARACAO> final_linha;
<COMANDO> ::= <ATRIBUICAO> final_linha;

<SENAO> ::= senao <CODIGO> ponto_interrogacao final_linha;
<SENAO> ::= ponto_interrogacao final_linha;

<LOOP> ::= abre_parenteses <ARGUMENTO_NUMERICO> virgula <OP_MATEMATICA> <ARGUMENTO_NUMERICO> fecha_parenteses dois_pontos <CODIGO> fim_repeticao final_linha;
<LOOP> ::= dois_pontos <CODIGO> fim_repeticao final_linha;

//Verifica Expressao
<EXPRESSAO> ::= abre_parenteses <LOGICA> fecha_parenteses;
<LOGICA> ::= <ARGUMENTO_NUMERICO> <OP_LOGICA> <ARGUMENTO_NUMERICO>;

<CALCULO> ::= <ARGUMENTO_NUMERICO> <EXPRESSAO_MATEMATICA>;
<CALCULO> ::= abre_parenteses <CALCULO> fecha_parenteses <EXPRESSAO_MATEMATICA>;
<EXPRESSAO_MATEMATICA> ::= <OP_MATEMATICA> <CALCULO>;
<EXPRESSAO_MATEMATICA> ::= î;

//Declaração e Atribuição
<DECLARACAO> ::= tipo <ATRIBUICAO>;
<ATRIBUICAO> ::= variavel <ATRIBUIR_VALOR>;
<ATRIBUIR_VALOR> ::=  matematica_igual <CALCULO>;
<ATRIBUIR_VALOR> ::=î;

//Argumentos
<ARGUMENTO> ::= <ARGUMENTO_TEXTO> | <ARGUMENTO_NUMERICO> | î;
<ARGUMENTO_TEXTO> ::= texto <ARGUMENTO>;
<ARGUMENTO_NUMERICO> ::= numero;
<ARGUMENTO_NUMERICO> ::= variavel <ARGUMENTO>;

//Logica e Matematica
<OP_LOGICA> ::= logica_maior_que;
<OP_LOGICA> ::= logica_menor_que;
<OP_LOGICA> ::= logica_igual;
<OP_LOGICA> ::= logica_maior;
<OP_LOGICA> ::= logica_menor;
<OP_LOGICA> ::= logica_diferente;

<OP_MATEMATICA> ::= matematica_soma;
<OP_MATEMATICA> ::= matematica_subtracao;
<OP_MATEMATICA> ::= matematica_multiplicacao;
<OP_MATEMATICA> ::= matematica_divisao;
<OP_MATEMATICA> ::= matematica_igual;
