CCS PCM C Compiler, Version 5.081, 13314               27-mar-19 10:49

               Filename:   C:\Users\pedro\OneDrive\Faculdade\Faculdade\2019.1\Microcontroladores\Comunicação TX_RX com LCD\Comunicação_RX_TX_LCD_e_Potenciometro.lst

               ROM used:   892 words (11%)
                           Largest free fragment is 2048
               RAM used:   29 (8%) at main() level
                           61 (17%) worst case
               Stack used: 7 locations (2 in main + 5 for interrupts)
               Stack size: 8

*
0000:  MOVLW  03
0001:  MOVWF  0A
0002:  GOTO   31C
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BSF    03.6
0016:  MOVF   0D,W
0017:  BCF    03.6
0018:  MOVWF  27
0019:  BSF    03.6
001A:  MOVF   0F,W
001B:  BCF    03.6
001C:  MOVWF  28
001D:  BSF    03.6
001E:  MOVF   0C,W
001F:  BCF    03.6
0020:  MOVWF  29
0021:  BSF    03.6
0022:  MOVF   0E,W
0023:  BCF    03.6
0024:  MOVWF  2A
0025:  BCF    03.7
0026:  BCF    03.5
0027:  BTFSS  0B.4
0028:  GOTO   02B
0029:  BTFSC  0B.1
002A:  GOTO   052
002B:  MOVLW  8C
002C:  MOVWF  04
002D:  BTFSS  00.5
002E:  GOTO   031
002F:  BTFSC  0C.5
0030:  GOTO   055
0031:  MOVF   22,W
0032:  MOVWF  04
0033:  MOVF   23,W
0034:  MOVWF  77
0035:  MOVF   24,W
0036:  MOVWF  78
0037:  MOVF   25,W
0038:  MOVWF  79
0039:  MOVF   26,W
003A:  MOVWF  7A
003B:  MOVF   27,W
003C:  BSF    03.6
003D:  MOVWF  0D
003E:  BCF    03.6
003F:  MOVF   28,W
0040:  BSF    03.6
0041:  MOVWF  0F
0042:  BCF    03.6
0043:  MOVF   29,W
0044:  BSF    03.6
0045:  MOVWF  0C
0046:  BCF    03.6
0047:  MOVF   2A,W
0048:  BSF    03.6
0049:  MOVWF  0E
004A:  BCF    03.6
004B:  MOVF   20,W
004C:  MOVWF  0A
004D:  SWAPF  21,W
004E:  MOVWF  03
004F:  SWAPF  7F,F
0050:  SWAPF  7F,W
0051:  RETFIE
0052:  BCF    0A.3
0053:  BCF    0A.4
0054:  GOTO   06C
0055:  BCF    0A.3
0056:  BCF    0A.4
0057:  GOTO   1A9
.................... //#include <Comunicação_RX_TX_LCD_e_Potenciometro.h> 
....................  
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
*
01E7:  MOVF   0B,W
01E8:  MOVWF  45
01E9:  BCF    0B.7
01EA:  BSF    03.5
01EB:  BSF    03.6
01EC:  BSF    0C.7
01ED:  BSF    0C.0
01EE:  NOP
01EF:  NOP
01F0:  BCF    03.5
01F1:  BCF    03.6
01F2:  BTFSC  45.7
01F3:  BSF    0B.7
01F4:  BTFSC  03.0
01F5:  GOTO   21E
01F6:  BSF    03.6
01F7:  MOVF   0C,W
01F8:  ANDLW  7F
01F9:  BCF    03.6
01FA:  MOVWF  45
01FB:  BSF    03.6
01FC:  MOVF   0D,W
01FD:  BCF    03.6
01FE:  MOVWF  46
01FF:  BSF    03.6
0200:  MOVF   0F,W
0201:  BCF    03.6
0202:  MOVWF  47
0203:  MOVF   45,W
0204:  MOVWF  4D
0205:  CALL   17D
0206:  MOVF   46,W
0207:  BSF    03.6
0208:  MOVWF  0D
0209:  BCF    03.6
020A:  MOVF   47,W
020B:  BSF    03.6
020C:  MOVWF  0F
020D:  BCF    03.6
020E:  MOVF   0B,W
020F:  MOVWF  48
0210:  BCF    0B.7
0211:  BSF    03.5
0212:  BSF    03.6
0213:  BSF    0C.7
0214:  BSF    0C.0
0215:  NOP
0216:  NOP
0217:  BCF    03.5
0218:  BCF    03.6
0219:  BTFSC  48.7
021A:  BSF    0B.7
021B:  DECFSZ 44,F
021C:  GOTO   21E
021D:  GOTO   23D
021E:  BSF    03.6
021F:  RLF    0C,W
0220:  RLF    0E,W
0221:  ANDLW  7F
0222:  BCF    03.6
0223:  MOVWF  45
0224:  BSF    03.6
0225:  MOVF   0D,W
0226:  BCF    03.6
0227:  MOVWF  46
0228:  BSF    03.6
0229:  MOVF   0F,W
022A:  BCF    03.6
022B:  MOVWF  47
022C:  MOVF   45,W
022D:  MOVWF  4D
022E:  CALL   17D
022F:  MOVF   46,W
0230:  BSF    03.6
0231:  MOVWF  0D
0232:  BCF    03.6
0233:  MOVF   47,W
0234:  BSF    03.6
0235:  MOVWF  0F
0236:  INCF   0D,F
0237:  BTFSC  03.2
0238:  INCF   0F,F
0239:  BCF    03.0
023A:  BCF    03.6
023B:  DECFSZ 44,F
023C:  GOTO   1E7
*
0243:  CLRF   4C
0244:  MOVF   04,W
0245:  MOVWF  4B
0246:  BCF    4C.0
0247:  BTFSC  03.7
0248:  BSF    4C.0
0249:  SWAPF  45,W
024A:  IORLW  F0
024B:  MOVWF  47
024C:  ADDWF  47,F
024D:  ADDLW  E2
024E:  MOVWF  48
024F:  ADDLW  32
0250:  MOVWF  4A
0251:  MOVF   45,W
0252:  ANDLW  0F
0253:  ADDWF  48,F
0254:  ADDWF  48,F
0255:  ADDWF  4A,F
0256:  ADDLW  E9
0257:  MOVWF  49
0258:  ADDWF  49,F
0259:  ADDWF  49,F
025A:  SWAPF  44,W
025B:  ANDLW  0F
025C:  ADDWF  49,F
025D:  ADDWF  4A,F
025E:  RLF    49,F
025F:  RLF    4A,F
0260:  COMF   4A,F
0261:  RLF    4A,F
0262:  MOVF   44,W
0263:  ANDLW  0F
0264:  ADDWF  4A,F
0265:  RLF    47,F
0266:  MOVLW  07
0267:  MOVWF  46
0268:  MOVLW  0A
0269:  ADDWF  4A,F
026A:  DECF   49,F
026B:  BTFSS  03.0
026C:  GOTO   269
026D:  ADDWF  49,F
026E:  DECF   48,F
026F:  BTFSS  03.0
0270:  GOTO   26D
0271:  ADDWF  48,F
0272:  DECF   47,F
0273:  BTFSS  03.0
0274:  GOTO   271
0275:  ADDWF  47,F
0276:  DECF   46,F
0277:  BTFSS  03.0
0278:  GOTO   275
0279:  MOVLW  46
027A:  MOVWF  04
027B:  BCF    03.7
027C:  MOVLW  07
027D:  ANDWF  4B,W
027E:  BCF    4B.6
027F:  ADDWF  04,F
0280:  MOVLW  4A
0281:  SUBWF  04,W
0282:  BTFSC  03.2
0283:  BSF    4B.6
0284:  MOVF   00,W
0285:  MOVWF  77
0286:  BTFSS  03.2
0287:  GOTO   290
0288:  BTFSC  4B.6
0289:  GOTO   290
028A:  BTFSC  4B.4
028B:  GOTO   2A2
028C:  BTFSC  4B.3
028D:  GOTO   290
028E:  MOVLW  20
028F:  GOTO   293
0290:  BSF    4B.3
0291:  BCF    4B.4
0292:  MOVLW  30
0293:  ADDWF  77,F
0294:  CLRF   45
0295:  MOVF   04,W
0296:  MOVWF  44
0297:  BCF    45.0
0298:  BTFSC  03.7
0299:  BSF    45.0
029A:  MOVF   77,W
029B:  MOVWF  4D
029C:  CALL   17D
029D:  MOVF   44,W
029E:  MOVWF  04
029F:  BCF    03.7
02A0:  BTFSC  45.0
02A1:  BSF    03.7
02A2:  INCF   04,F
02A3:  BTFSS  4B.6
02A4:  GOTO   280
*
02A9:  DATA 8C,24
02AA:  DATA C6,26
02AB:  DATA 54,05
02AC:  DATA D6,30
02AD:  DATA EC,37
02AE:  DATA 72,1D
02AF:  DATA A0,12
02B0:  DATA EC,3A
02B1:  DATA 00,00
....................  
.................... #list 
....................  
.................... #device ADC=10 
....................  
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal=20000000) 
*
0058:  MOVLW  4E
0059:  MOVWF  04
005A:  BCF    03.7
005B:  MOVF   00,W
005C:  BTFSC  03.2
005D:  GOTO   06B
005E:  MOVLW  06
005F:  MOVWF  78
0060:  CLRF   77
0061:  DECFSZ 77,F
0062:  GOTO   061
0063:  DECFSZ 78,F
0064:  GOTO   060
0065:  MOVLW  7B
0066:  MOVWF  77
0067:  DECFSZ 77,F
0068:  GOTO   067
0069:  DECFSZ 00,F
006A:  GOTO   05E
006B:  RETURN
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=PORT1) 
....................  
.................... #define LCD_RS_PIN         pin_d0 
.................... #define LCD_RW_PIN         pin_d1 
.................... #define LCD_ENABLE_PIN     pin_d2 
.................... #define LCD_DATA4          pin_d3 
.................... #define LCD_DATA5          pin_d4 
.................... #define LCD_DATA6          pin_d5 
.................... #define LCD_DATA7          pin_d6 
....................  
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
*
007F:  BSF    03.5
0080:  BSF    08.3
....................    output_float(LCD_DATA5); 
0081:  BSF    08.4
....................    output_float(LCD_DATA6); 
0082:  BSF    08.5
....................    output_float(LCD_DATA7); 
0083:  BSF    08.6
....................   #else 
....................    lcdtris.data = 0xF; 
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
0084:  BCF    03.5
0085:  BSF    08.1
0086:  BSF    03.5
0087:  BCF    08.1
....................    delay_cycles(1); 
0088:  NOP
....................    lcd_output_enable(1); 
0089:  BCF    03.5
008A:  BSF    08.2
008B:  BSF    03.5
008C:  BCF    08.2
....................    delay_cycles(1); 
008D:  NOP
....................    high = lcd_read_nibble(); 
*
00BF:  MOVF   78,W
00C0:  MOVWF  55
....................        
....................    lcd_output_enable(0); 
00C1:  BCF    08.2
00C2:  BSF    03.5
00C3:  BCF    08.2
....................    delay_cycles(1); 
00C4:  NOP
....................    lcd_output_enable(1); 
00C5:  BCF    03.5
00C6:  BSF    08.2
00C7:  BSF    03.5
00C8:  BCF    08.2
....................    delay_us(1); 
00C9:  GOTO   0CA
00CA:  GOTO   0CB
00CB:  NOP
....................    low = lcd_read_nibble(); 
*
00FD:  MOVF   78,W
00FE:  MOVWF  54
....................        
....................    lcd_output_enable(0); 
00FF:  BCF    08.2
0100:  BSF    03.5
0101:  BCF    08.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
0102:  BCF    08.3
....................    output_drive(LCD_DATA5); 
0103:  BCF    08.4
....................    output_drive(LCD_DATA6); 
0104:  BCF    08.5
....................    output_drive(LCD_DATA7); 
0105:  BCF    08.6
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
0106:  BCF    03.5
0107:  SWAPF  55,W
0108:  MOVWF  77
0109:  MOVLW  F0
010A:  ANDWF  77,F
010B:  MOVF   77,W
010C:  IORWF  54,W
010D:  MOVWF  78
010E:  RETURN
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
*
008E:  BCF    03.5
008F:  CLRF   56
*
00CC:  BCF    03.5
00CD:  CLRF   56
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
*
0090:  BSF    03.5
0091:  BSF    08.3
0092:  MOVLW  00
0093:  BCF    03.5
0094:  BTFSC  08.3
0095:  MOVLW  01
0096:  IORWF  56,F
*
00CE:  BSF    03.5
00CF:  BSF    08.3
00D0:  MOVLW  00
00D1:  BCF    03.5
00D2:  BTFSC  08.3
00D3:  MOVLW  01
00D4:  IORWF  56,F
....................    n |= input(LCD_DATA5) << 1; 
*
0097:  BSF    03.5
0098:  BSF    08.4
0099:  MOVLW  00
009A:  BCF    03.5
009B:  BTFSC  08.4
009C:  MOVLW  01
009D:  MOVWF  77
009E:  BCF    03.0
009F:  RLF    77,F
00A0:  MOVF   77,W
00A1:  IORWF  56,F
*
00D5:  BSF    03.5
00D6:  BSF    08.4
00D7:  MOVLW  00
00D8:  BCF    03.5
00D9:  BTFSC  08.4
00DA:  MOVLW  01
00DB:  MOVWF  77
00DC:  BCF    03.0
00DD:  RLF    77,F
00DE:  MOVF   77,W
00DF:  IORWF  56,F
....................    n |= input(LCD_DATA6) << 2; 
*
00A2:  BSF    03.5
00A3:  BSF    08.5
00A4:  MOVLW  00
00A5:  BCF    03.5
00A6:  BTFSC  08.5
00A7:  MOVLW  01
00A8:  MOVWF  77
00A9:  RLF    77,F
00AA:  RLF    77,F
00AB:  MOVLW  FC
00AC:  ANDWF  77,F
00AD:  MOVF   77,W
00AE:  IORWF  56,F
*
00E0:  BSF    03.5
00E1:  BSF    08.5
00E2:  MOVLW  00
00E3:  BCF    03.5
00E4:  BTFSC  08.5
00E5:  MOVLW  01
00E6:  MOVWF  77
00E7:  RLF    77,F
00E8:  RLF    77,F
00E9:  MOVLW  FC
00EA:  ANDWF  77,F
00EB:  MOVF   77,W
00EC:  IORWF  56,F
....................    n |= input(LCD_DATA7) << 3; 
*
00AF:  BSF    03.5
00B0:  BSF    08.6
00B1:  MOVLW  00
00B2:  BCF    03.5
00B3:  BTFSC  08.6
00B4:  MOVLW  01
00B5:  MOVWF  77
00B6:  RLF    77,F
00B7:  RLF    77,F
00B8:  RLF    77,F
00B9:  MOVLW  F8
00BA:  ANDWF  77,F
00BB:  MOVF   77,W
00BC:  IORWF  56,F
*
00ED:  BSF    03.5
00EE:  BSF    08.6
00EF:  MOVLW  00
00F0:  BCF    03.5
00F1:  BTFSC  08.6
00F2:  MOVLW  01
00F3:  MOVWF  77
00F4:  RLF    77,F
00F5:  RLF    77,F
00F6:  RLF    77,F
00F7:  MOVLW  F8
00F8:  ANDWF  77,F
00F9:  MOVF   77,W
00FA:  IORWF  56,F
....................     
....................    return(n); 
*
00BD:  MOVF   56,W
00BE:  MOVWF  78
*
00FB:  MOVF   56,W
00FC:  MOVWF  78
....................   #else 
....................    return(lcd.data); 
....................   #endif 
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
*
010F:  BTFSC  55.0
0110:  GOTO   113
0111:  BCF    08.3
0112:  GOTO   114
0113:  BSF    08.3
0114:  BSF    03.5
0115:  BCF    08.3
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
0116:  BCF    03.5
0117:  BTFSC  55.1
0118:  GOTO   11B
0119:  BCF    08.4
011A:  GOTO   11C
011B:  BSF    08.4
011C:  BSF    03.5
011D:  BCF    08.4
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
011E:  BCF    03.5
011F:  BTFSC  55.2
0120:  GOTO   123
0121:  BCF    08.5
0122:  GOTO   124
0123:  BSF    08.5
0124:  BSF    03.5
0125:  BCF    08.5
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
0126:  BCF    03.5
0127:  BTFSC  55.3
0128:  GOTO   12B
0129:  BCF    08.6
012A:  GOTO   12C
012B:  BSF    08.6
012C:  BSF    03.5
012D:  BCF    08.6
....................   #else       
....................    lcdlat.data = n; 
....................   #endif 
....................        
....................    delay_cycles(1); 
012E:  NOP
....................    lcd_output_enable(1); 
012F:  BCF    03.5
0130:  BSF    08.2
0131:  BSF    03.5
0132:  BCF    08.2
....................    delay_us(2); 
0133:  MOVLW  03
0134:  MOVWF  77
0135:  DECFSZ 77,F
0136:  GOTO   135
....................    lcd_output_enable(0); 
0137:  BCF    03.5
0138:  BCF    08.2
0139:  BSF    03.5
013A:  BCF    08.2
013B:  BCF    03.5
013C:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
013D:  BSF    03.5
013E:  BCF    08.2
....................    lcd_rs_tris(); 
013F:  BCF    08.0
....................    lcd_rw_tris(); 
0140:  BCF    08.1
....................   #endif 
....................  
....................    lcd_output_rs(0); 
0141:  BCF    03.5
0142:  BCF    08.0
0143:  BSF    03.5
0144:  BCF    08.0
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
0145:  BCF    03.5
0146:  CALL   07F
0147:  MOVF   78,W
0148:  MOVWF  54
0149:  BTFSC  54.7
014A:  GOTO   146
....................    lcd_output_rs(address); 
014B:  MOVF   52,F
014C:  BTFSS  03.2
014D:  GOTO   150
014E:  BCF    08.0
014F:  GOTO   151
0150:  BSF    08.0
0151:  BSF    03.5
0152:  BCF    08.0
....................    delay_cycles(1); 
0153:  NOP
....................    lcd_output_rw(0); 
0154:  BCF    03.5
0155:  BCF    08.1
0156:  BSF    03.5
0157:  BCF    08.1
....................    delay_cycles(1); 
0158:  NOP
....................    lcd_output_enable(0); 
0159:  BCF    03.5
015A:  BCF    08.2
015B:  BSF    03.5
015C:  BCF    08.2
....................    lcd_send_nibble(n >> 4); 
015D:  BCF    03.5
015E:  SWAPF  53,W
015F:  MOVWF  54
0160:  MOVLW  0F
0161:  ANDWF  54,F
0162:  MOVF   54,W
0163:  MOVWF  55
0164:  CALL   10F
....................    lcd_send_nibble(n & 0xf); 
0165:  MOVF   53,W
0166:  ANDLW  0F
0167:  MOVWF  54
0168:  MOVWF  55
0169:  CALL   10F
016A:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
*
02B2:  MOVLW  28
02B3:  MOVWF  39
02B4:  MOVLW  0C
02B5:  MOVWF  3A
02B6:  MOVLW  01
02B7:  MOVWF  3B
02B8:  MOVLW  06
02B9:  MOVWF  3C
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
02BA:  BCF    08.2
02BB:  BSF    03.5
02BC:  BCF    08.2
....................    lcd_output_rs(0); 
02BD:  BCF    03.5
02BE:  BCF    08.0
02BF:  BSF    03.5
02C0:  BCF    08.0
....................    lcd_output_rw(0); 
02C1:  BCF    03.5
02C2:  BCF    08.1
02C3:  BSF    03.5
02C4:  BCF    08.1
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
02C5:  BCF    08.3
....................    output_drive(LCD_DATA5); 
02C6:  BCF    08.4
....................    output_drive(LCD_DATA6); 
02C7:  BCF    08.5
....................    output_drive(LCD_DATA7); 
02C8:  BCF    08.6
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................    lcd_enable_tris(); 
02C9:  BCF    08.2
....................    lcd_rs_tris(); 
02CA:  BCF    08.0
....................    lcd_rw_tris(); 
02CB:  BCF    08.1
02CC:  BCF    03.5
02CD:  CLRF   2B
02CE:  BTFSC  0B.7
02CF:  BSF    2B.7
02D0:  BCF    0B.7
....................  #endif 
....................      
....................    delay_ms(15); 
02D1:  MOVLW  0F
02D2:  MOVWF  4E
02D3:  CALL   058
02D4:  BTFSC  2B.7
02D5:  BSF    0B.7
....................    for(i=1;i<=3;++i) 
02D6:  MOVLW  01
02D7:  MOVWF  38
02D8:  MOVF   38,W
02D9:  SUBLW  03
02DA:  BTFSS  03.0
02DB:  GOTO   2F0
02DC:  CLRF   2B
02DD:  BTFSC  0B.7
02DE:  BSF    2B.7
02DF:  BCF    0B.7
....................    { 
....................        lcd_send_nibble(3); 
02E0:  MOVLW  03
02E1:  MOVWF  55
02E2:  CALL   10F
02E3:  BTFSC  2B.7
02E4:  BSF    0B.7
02E5:  CLRF   2B
02E6:  BTFSC  0B.7
02E7:  BSF    2B.7
02E8:  BCF    0B.7
....................        delay_ms(5); 
02E9:  MOVLW  05
02EA:  MOVWF  4E
02EB:  CALL   058
02EC:  BTFSC  2B.7
02ED:  BSF    0B.7
02EE:  INCF   38,F
02EF:  GOTO   2D8
02F0:  CLRF   2B
02F1:  BTFSC  0B.7
02F2:  BSF    2B.7
02F3:  BCF    0B.7
....................    } 
....................     
....................    lcd_send_nibble(2); 
02F4:  MOVLW  02
02F5:  MOVWF  55
02F6:  CALL   10F
02F7:  BTFSC  2B.7
02F8:  BSF    0B.7
02F9:  CLRF   2B
02FA:  BTFSC  0B.7
02FB:  BSF    2B.7
02FC:  BCF    0B.7
....................    delay_ms(5); 
02FD:  MOVLW  05
02FE:  MOVWF  4E
02FF:  CALL   058
0300:  BTFSC  2B.7
0301:  BSF    0B.7
....................    for(i=0;i<=3;++i) 
0302:  CLRF   38
0303:  MOVF   38,W
0304:  SUBLW  03
0305:  BTFSS  03.0
0306:  GOTO   319
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
0307:  MOVLW  39
0308:  ADDWF  38,W
0309:  MOVWF  04
030A:  BCF    03.7
030B:  MOVF   00,W
030C:  MOVWF  3D
030D:  CLRF   2B
030E:  BTFSC  0B.7
030F:  BSF    2B.7
0310:  BCF    0B.7
0311:  CLRF   52
0312:  MOVF   3D,W
0313:  MOVWF  53
0314:  CALL   13D
0315:  BTFSC  2B.7
0316:  BSF    0B.7
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
0317:  INCF   38,F
0318:  GOTO   303
0319:  BCF    0A.3
031A:  BCF    0A.4
031B:  GOTO   350 (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
*
016B:  DECFSZ 4F,W
016C:  GOTO   16E
016D:  GOTO   171
....................       address=LCD_LINE_TWO; 
016E:  MOVLW  40
016F:  MOVWF  50
0170:  GOTO   172
....................    else 
....................       address=0; 
0171:  CLRF   50
....................       
....................    address+=x-1; 
0172:  MOVLW  01
0173:  SUBWF  4E,W
0174:  ADDWF  50,F
....................    lcd_send_byte(0,0x80|address); 
0175:  MOVF   50,W
0176:  IORLW  80
0177:  MOVWF  51
0178:  CLRF   52
0179:  MOVF   51,W
017A:  MOVWF  53
017B:  CALL   13D
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
017C:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
017D:  MOVF   4D,W
017E:  XORLW  07
017F:  BTFSC  03.2
0180:  GOTO   18B
0181:  XORLW  0B
0182:  BTFSC  03.2
0183:  GOTO   190
0184:  XORLW  06
0185:  BTFSC  03.2
0186:  GOTO   198
0187:  XORLW  02
0188:  BTFSC  03.2
0189:  GOTO   19E
018A:  GOTO   1A3
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
018B:  MOVLW  01
018C:  MOVWF  4E
018D:  MOVWF  4F
018E:  CALL   16B
018F:  GOTO   1A8
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
0190:  CLRF   52
0191:  MOVLW  01
0192:  MOVWF  53
0193:  CALL   13D
....................                      delay_ms(2); 
0194:  MOVLW  02
0195:  MOVWF  4E
0196:  CALL   058
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
0197:  GOTO   1A8
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
0198:  MOVLW  01
0199:  MOVWF  4E
019A:  MOVLW  02
019B:  MOVWF  4F
019C:  CALL   16B
019D:  GOTO   1A8
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
019E:  CLRF   52
019F:  MOVLW  10
01A0:  MOVWF  53
01A1:  CALL   13D
01A2:  GOTO   1A8
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
01A3:  MOVLW  01
01A4:  MOVWF  52
01A5:  MOVF   4D,W
01A6:  MOVWF  53
01A7:  CALL   13D
....................      #endif 
....................    } 
01A8:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
*
01C7:  MOVF   44,W
01C8:  MOVWF  4E
01C9:  MOVF   45,W
01CA:  MOVWF  4F
01CB:  CALL   16B
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
01CC:  CALL   07F
01CD:  MOVF   78,W
01CE:  MOVWF  47
01CF:  BTFSC  47.7
01D0:  GOTO   1CC
....................    lcd_output_rs(1); 
01D1:  BSF    08.0
01D2:  BSF    03.5
01D3:  BCF    08.0
....................    value = lcd_read_byte(); 
01D4:  BCF    03.5
01D5:  CALL   07F
01D6:  MOVF   78,W
01D7:  MOVWF  46
....................    lcd_output_rs(0); 
01D8:  BCF    08.0
01D9:  BSF    03.5
01DA:  BCF    08.0
....................     
....................    return(value); 
01DB:  BCF    03.5
01DC:  MOVF   46,W
01DD:  MOVWF  78
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
....................  
.................... int16 potenciometro, n_valor, verifica = 0, led = 2000; 
.................... int t_valor1, t_valor2, r_valor1, r_valor2; 
....................  
.................... #INT_EXT 
.................... void  EXT_isr(void)  
.................... { 
....................    t_valor1 = make8(led,0); 
*
006C:  MOVF   32,W
006D:  MOVWF  34
....................    t_valor2 = make8(led,1); 
006E:  MOVF   33,W
006F:  MOVWF  35
....................    putc(t_valor1); 
0070:  MOVF   34,W
0071:  BTFSS  0C.4
0072:  GOTO   071
0073:  MOVWF  19
....................    putc(t_valor2); 
0074:  MOVF   35,W
0075:  BTFSS  0C.4
0076:  GOTO   075
0077:  MOVWF  19
....................    delay_ms(100); 
0078:  MOVLW  64
0079:  MOVWF  4E
007A:  CALL   058
.................... } 
....................  
007B:  BCF    0B.1
007C:  BCF    0A.3
007D:  BCF    0A.4
007E:  GOTO   031
.................... #INT_RDA 
.................... void  RDA_isr(void)  
.................... { 
....................     r_valor1 = getc(); 
*
01A9:  BTFSS  0C.5
01AA:  GOTO   1A9
01AB:  MOVF   1A,W
01AC:  MOVWF  36
....................     r_valor2 = getc(); 
01AD:  BTFSS  0C.5
01AE:  GOTO   1AD
01AF:  MOVF   1A,W
01B0:  MOVWF  37
....................     n_valor = make16(r_valor2, r_valor1); 
01B1:  MOVF   37,W
01B2:  MOVWF  2F
01B3:  MOVF   36,W
01B4:  MOVWF  2E
....................     if (n_valor == 2000){ 
01B5:  MOVF   2E,W
01B6:  SUBLW  D0
01B7:  BTFSS  03.2
01B8:  GOTO   1C3
01B9:  MOVF   2F,W
01BA:  SUBLW  07
01BB:  BTFSS  03.2
01BC:  GOTO   1C3
....................       output_toggle(PIN_D7); 
01BD:  BSF    03.5
01BE:  BCF    08.7
01BF:  MOVLW  80
01C0:  BCF    03.5
01C1:  XORWF  08,F
....................     } else{ 
01C2:  GOTO   2A5
....................     lcd_getc(6,1); 
01C3:  MOVLW  06
01C4:  MOVWF  44
01C5:  MOVLW  01
01C6:  MOVWF  45
....................     printf(lcd_putc,"\fIFMT\nValor: %lu", n_valor); 
*
01DE:  MOVLW  A9
01DF:  BSF    03.6
01E0:  MOVWF  0D
01E1:  MOVLW  02
01E2:  MOVWF  0F
01E3:  BCF    03.0
01E4:  MOVLW  0D
01E5:  BCF    03.6
01E6:  MOVWF  44
*
023D:  MOVLW  10
023E:  MOVWF  04
023F:  MOVF   2F,W
0240:  MOVWF  45
0241:  MOVF   2E,W
0242:  MOVWF  44
....................      
....................     } 
*
02A5:  BCF    0C.5
02A6:  BCF    0A.3
02A7:  BCF    0A.4
02A8:  GOTO   031
.................... } 
....................  
.................... void main() 
*
031C:  MOVF   03,W
031D:  ANDLW  1F
031E:  MOVWF  03
031F:  MOVLW  81
0320:  BSF    03.5
0321:  MOVWF  19
0322:  MOVLW  A6
0323:  MOVWF  18
0324:  MOVLW  90
0325:  BCF    03.5
0326:  MOVWF  18
0327:  CLRF   31
0328:  CLRF   30
0329:  MOVLW  07
032A:  MOVWF  33
032B:  MOVLW  D0
032C:  MOVWF  32
032D:  BSF    03.5
032E:  BSF    1F.0
032F:  BSF    1F.1
0330:  BSF    1F.2
0331:  BCF    1F.3
0332:  MOVLW  07
0333:  MOVWF  1C
0334:  BCF    03.7
.................... { 
....................    setup_ADC(ADC_CLOCK_INTERNAL);   
0335:  BCF    1F.6
0336:  BCF    03.5
0337:  BSF    1F.6
0338:  BSF    1F.7
0339:  BSF    03.5
033A:  BSF    1F.7
033B:  BCF    03.5
033C:  BSF    1F.0
....................    setup_adc_ports(AN0);  
033D:  BSF    03.5
033E:  BCF    1F.0
033F:  BSF    1F.1
0340:  BSF    1F.2
0341:  BSF    1F.3
....................    delay_us(10); 
0342:  MOVLW  10
0343:  MOVWF  77
0344:  DECFSZ 77,F
0345:  GOTO   344
0346:  NOP
....................     
....................    ext_int_edge(L_TO_H); 
0347:  BSF    01.6
....................    enable_interrupts(INT_EXT); 
0348:  BCF    03.5
0349:  BSF    0B.4
....................    enable_interrupts(INT_RDA); 
034A:  BSF    03.5
034B:  BSF    0C.5
....................    enable_interrupts(GLOBAL); 
034C:  MOVLW  C0
034D:  BCF    03.5
034E:  IORWF  0B,F
....................     
....................    lcd_init(); 
034F:  GOTO   2B2
....................     
....................    while(TRUE) 
....................    { 
....................       potenciometro = read_adc(); 
0350:  BSF    1F.2
0351:  BTFSC  1F.2
0352:  GOTO   351
0353:  BSF    03.5
0354:  MOVF   1E,W
0355:  BCF    03.5
0356:  MOVWF  2C
0357:  MOVF   1E,W
0358:  MOVWF  2D
....................       if(potenciometro != verifica) 
0359:  MOVF   30,W
035A:  SUBWF  2C,W
035B:  BTFSS  03.2
035C:  GOTO   361
035D:  MOVF   31,W
035E:  SUBWF  2D,W
035F:  BTFSC  03.2
0360:  GOTO   371
....................       { 
....................          t_valor1 = make8(potenciometro,0); 
0361:  MOVF   2C,W
0362:  MOVWF  34
....................          t_valor2 = make8(potenciometro,1); 
0363:  MOVF   2D,W
0364:  MOVWF  35
....................          putc(t_valor1); 
0365:  MOVF   34,W
0366:  BTFSS  0C.4
0367:  GOTO   366
0368:  MOVWF  19
....................          putc(t_valor2); 
0369:  MOVF   35,W
036A:  BTFSS  0C.4
036B:  GOTO   36A
036C:  MOVWF  19
....................          verifica = potenciometro; 
036D:  MOVF   2D,W
036E:  MOVWF  31
036F:  MOVF   2C,W
0370:  MOVWF  30
0371:  CLRF   2B
0372:  BTFSC  0B.7
0373:  BSF    2B.7
0374:  BCF    0B.7
....................       } 
....................       delay_ms(100); 
0375:  MOVLW  64
0376:  MOVWF  4E
0377:  CALL   058
0378:  BTFSC  2B.7
0379:  BSF    0B.7
037A:  GOTO   350
....................    } 
.................... } 
037B:  SLEEP

Configuration Fuses:
   Word  1: 3F32   HS NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
