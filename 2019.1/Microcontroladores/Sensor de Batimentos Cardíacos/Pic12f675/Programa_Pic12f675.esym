F N "main" 0 16 ""
D G "__PCM__" 0 39 ""5.081""
D G "__DEVICE__" 0 39 "675"
D G "__DATE__" 0 39 ""15-Apr-19""
D G "__TIME__" 0 39 ""13:25:48""
D G "_UNICODE" 0 39 ""?""
D G "__EVAL" 0 39 ""?"" "#include <Programa_Pic12f675.h>"
c L "set_tris_a" 1 1 6 "FUNCTION"
f N "set_tris_a" 1 37 ""
v L "value" 1 37 "int8" `54 
f B "set_tris_a" 1 37 "void(int8 value)" `53 
f N "get_tris_a" 1 38 ""
f B "get_tris_a" 1 38 "int8()" `55 
f N "output_a" 1 39 ""
v L "value" 1 39 "int8" `57 
f B "output_a" 1 39 "void(int8 value)" `56 
f N "input_a" 1 40 ""
f B "input_a" 1 40 "int8()" `58 
f N "input_change_a" 1 41 ""
f B "input_change_a" 1 41 "int8()" `59 
f N "port_a_pullups" 1 42 ""
v L "value" 1 42 "int8" `61 
f B "port_a_pullups" 1 42 "void(int8 value)" `60 
f N "input" 1 43 ""
v L "pin" 1 43 "int16" `63 
f B "input" 1 43 "int8(int16 pin)" `62 
f N "input_state" 1 44 ""
v L "pin" 1 44 "int16" `65 
f B "input_state" 1 44 "int8(int16 pin)" `64 
f N "output_low" 1 45 ""
v L "pin" 1 45 "int16" `67 
f B "output_low" 1 45 "void(int16 pin)" `66 
f N "output_high" 1 46 ""
v L "pin" 1 46 "int16" `69 
f B "output_high" 1 46 "void(int16 pin)" `68 
f N "output_toggle" 1 47 ""
v L "pin" 1 47 "int16" `71 
f B "output_toggle" 1 47 "void(int16 pin)" `70 
f N "output_bit" 1 48 ""
v L "pin" 1 48 "int16" `73 
v L "level" 1 48 "int8" `74 
f B "output_bit" 1 48 "void(int16 pin,int8 level)" `72 
f N "output_float" 1 49 ""
v L "pin" 1 49 "int16" `76 
f B "output_float" 1 49 "void(int16 pin)" `75 
f N "output_drive" 1 50 ""
v L "pin" 1 50 "int16" `78 
f B "output_drive" 1 50 "void(int16 pin)" `77  "Constants used to identify pins in the above are:"
d G "PIN_A0" 1 54 "40"
d G "PIN_A1" 1 55 "41"
d G "PIN_A2" 1 56 "42"
d G "PIN_A3" 1 57 "43"
d G "PIN_A4" 1 58 "44"
d G "PIN_A5" 1 59 "45"
d G "FALSE" 1 62 "0"
d G "TRUE" 1 63 "1"
d G "BYTE" 1 65 "int8"
d G "BOOLEAN" 1 66 "int1"
d G "getc" 1 68 "getch"
d G "fgetc" 1 69 "getch"
d G "getchar" 1 70 "getch"
d G "putc" 1 71 "putchar"
d G "fputc" 1 72 "putchar"
d G "fgets" 1 73 "gets"
d G "fputs" 1 74 "puts"
c L "output_drive" 1 1 3 "FUNCTION"
f N "restart_cause" 1 79 ""
f B "restart_cause" 1 79 "int8()" `79 
f N "reset_cpu" 1 80 ""
f B "reset_cpu" 1 80 "void()" `80 
f N "sleep" 1 81 ""
f B "sleep" 1 81 "void()" `81  "Constants returned from RESTART_CAUSE() are:"
d G "WDT_FROM_SLEEP" 1 83 "3"
d G "WDT_TIMEOUT" 1 84 "11"
d G "MCLR_FROM_SLEEP" 1 85 "19"
d G "MCLR_FROM_RUN" 1 86 "27"
d G "NORMAL_POWER_UP" 1 87 "25"
d G "BROWNOUT_RESTART" 1 88 "26"
c L "sleep" 1 1 5 "FUNCTION"
f N "setup_timer_0" 1 95 ""
v L "mode" 1 95 "int8" `83 
f B "setup_timer_0" 1 95 "void(int8 mode)" `82 
f N "set_timer0" 1 96 ""
v L "value" 1 96 "int8" `85 
f B "set_timer0" 1 96 "void(int8 value)" `84 
f N "get_timer0" 1 97 ""
f B "get_timer0" 1 97 "int8()" `86 
f N "setup_counters" 1 98 ""
v L "mode" 1 98 "int8" `88 
v L "prescaler" 1 98 "int8" `89 
f B "setup_counters" 1 98 "void(int8 mode,int8 prescaler)" `87 
f N "set_rtcc" 1 99 ""
v L "value" 1 99 "int8" `91 
f B "set_rtcc" 1 99 "void(int8 value)" `90 
f N "get_rtcc" 1 100 ""
f B "get_rtcc" 1 100 "int8()" `92  "Constants used for SETUP_TIMER_0() are:"
d G "T0_INTERNAL" 1 102 "0"
d G "T0_EXT_L_TO_H" 1 103 "32"
d G "T0_EXT_H_TO_L" 1 104 "48"
d G "T0_DIV_1" 1 106 "8"
d G "T0_DIV_2" 1 107 "0"
d G "T0_DIV_4" 1 108 "1"
d G "T0_DIV_8" 1 109 "2"
d G "T0_DIV_16" 1 110 "3"
d G "T0_DIV_32" 1 111 "4"
d G "T0_DIV_64" 1 112 "5"
d G "T0_DIV_128" 1 113 "6"
d G "T0_DIV_256" 1 114 "7"
d G "T0_8_BIT" 1 117 "0"
d G "RTCC_INTERNAL" 1 121 "0"
d G "RTCC_EXT_L_TO_H" 1 122 "32"
d G "RTCC_EXT_H_TO_L" 1 123 "48"
d G "RTCC_DIV_1" 1 124 "8"
d G "RTCC_DIV_2" 1 125 "0"
d G "RTCC_DIV_4" 1 126 "1"
d G "RTCC_DIV_8" 1 127 "2"
d G "RTCC_DIV_16" 1 128 "3"
d G "RTCC_DIV_32" 1 129 "4"
d G "RTCC_DIV_64" 1 130 "5"
d G "RTCC_DIV_128" 1 131 "6"
d G "RTCC_DIV_256" 1 132 "7"
d G "RTCC_8_BIT" 1 133 "0"
c L "get_rtcc" 1 1 8 "FUNCTION"
f N "setup_wdt" 1 144 ""
v L "mode" 1 144 "int16" `94 
f B "setup_wdt" 1 144 "void(int16 mode)" `93 
f N "restart_wdt" 1 145 ""
f B "restart_wdt" 1 145 "void()" `95  "Constants used for SETUP_WDT() are:"
d G "WDT_18MS" 1 148 "8"
d G "WDT_36MS" 1 149 "9"
d G "WDT_72MS" 1 150 "10"
d G "WDT_144MS" 1 151 "11"
d G "WDT_288MS" 1 152 "12"
d G "WDT_576MS" 1 153 "13"
d G "WDT_1152MS" 1 154 "14"
d G "WDT_2304MS" 1 155 "15"
c L "restart_wdt" 1 1 3 "FUNCTION"
f N "setup_timer_1" 1 161 ""
v L "mode" 1 161 "int16" `97 
f B "setup_timer_1" 1 161 "void(int16 mode)" `96 
f N "get_timer1" 1 162 ""
f B "get_timer1" 1 162 "int16()" `98 
f N "set_timer1" 1 163 ""
v L "value" 1 163 "int16" `100 
f B "set_timer1" 1 163 "void(int16 value)" `99  "Constants used for SETUP_TIMER_1() are:"
d G "T1_DISABLED" 1 166 "0"
d G "T1_INTERNAL" 1 167 "5"
d G "T1_EXTERNAL" 1 168 "7"
d G "T1_EXTERNAL_SYNC" 1 169 "3"
d G "T1_CLK_OUT" 1 171 "8"
d G "T1_DIV_BY_1" 1 173 "0"
d G "T1_DIV_BY_2" 1 174 "0x10"
d G "T1_DIV_BY_4" 1 175 "0x20"
d G "T1_DIV_BY_8" 1 176 "0x30"
d G "T1_GATE" 1 178 "0x40"
d G "T1_GATE_INVERTED" 1 179 "0xC0"
c L "set_timer1" 1 1 3 "FUNCTION"
f N "setup_comparator" 1 184 ""
v L "mode" 1 184 "int32" `102 
f B "setup_comparator" 1 184 "void(int32 mode)" `101  "Constants used in setup_comparator() are:"
d G "NC_NC_NC_NC" 1 186 "0x0ff07"
d G "NC_NC" 1 187 "0x0ff07"
d G "A0_A1" 1 188 "0x3ff02"
d G "A1_VR_OUT_ON_A2" 1 189 "0x6fb03"
d G "A1_VR" 1 190 "0x2ff04"
d G "A0_A1_OUT_ON_A2" 1 191 "0x3fb01"
d G "COMP_INVERT" 1 194 "0x10"
c L "setup_comparator" 1 1 2 "FUNCTION"
f N "setup_vref" 1 200 ""
v L "mode" 1 200 "int8" `105 
f B "setup_vref" 1 200 "void(int8 mode)" `104  "Constants used in setup_vref() are:"
d G "VREF_LOW" 1 202 "0xa0"
d G "VREF_HIGH" 1 203 "0x80"
c L "setup_vref" 1 1 5 "FUNCTION"
f N "setup_adc" 1 211 ""
v L "mode" 1 211 "int16" `107 
f B "setup_adc" 1 211 "void(int16 mode)" `106 
f N "read_adc" 1 212 ""
f B "read_adc" 1 212 "int8()" `108 
f N "read_adc" 1 213 ""
v L "mode" 1 213 "int8" `110 
f B "read_adc" 1 213 "int8(int8 mode)" `109 
f N "read_adc" 1 214 ""
f G "read_adc" 1 214 "int16()" `111 
f N "read_adc" 1 215 ""
v L "mode" 1 215 "int8" `112 
f G "read_adc" 1 215 "int16(int8 mode,int16 pins)" `111 
f N "adc_done" 1 216 ""
f B "adc_done" 1 216 "int8(int8 mode,int16 pins)" `111  "Constants used for SETUP_ADC() are:"
d G "ADC_OFF" 1 218 "0" "ADC Off"
d G "ADC_CLOCK_DIV_2" 1 219 "0x100"
d G "ADC_CLOCK_DIV_4" 1 220 "0x40"
d G "ADC_CLOCK_DIV_8" 1 221 "0x10"
d G "ADC_CLOCK_DIV_16" 1 222 "0x50"
d G "ADC_CLOCK_DIV_32" 1 223 "0x20"
d G "ADC_CLOCK_DIV_64" 1 224 "0x60"
d G "ADC_CLOCK_INTERNAL" 1 225 "0x30" "Internal 2-6us"
c L "adc_done" 1 1 1 "FUNCTION"
f N "setup_adc_ports" 1 228 ""
v L "pins" 1 228 "int16" `113 
f B "setup_adc_ports" 1 228 "void(int16 pins)" `112 
f N "setup_adc_ports" 1 229 ""
v L "pins" 1 229 "int16" `115 
v L "reference" 1 229 "int16" `116 
f B "setup_adc_ports" 1 229 "void(int16 pins,int16 reference)" `114 
f N "set_analog_pins" 1 230 ""
v L "pins" 1 230 "int16" `118 
f B "set_analog_pins" 1 230 "void(int16 pins)" `117 
f N "set_analog_pins" 1 231 ""
v L "pins" 1 231 "int16" `120 
v L "reference" 1 231 "int16" `121 
f B "set_analog_pins" 1 231 "void(int16 pins,int16 reference)" `119 
f N "set_adc_channel" 1 232 ""
v L "channel" 1 232 "int8" `123 
f B "set_adc_channel" 1 232 "void(int8 channel)" `122  "Constants used in SETUP_ADC_PORTS() and SET_ANALOG_PINS() are:"
d G "sAN0" 1 236 "1" "| GP0"
d G "sAN1" 1 237 "2" "| GP1"
d G "sAN2" 1 238 "4" "| GP2"
d G "sAN3" 1 239 "8" "| GP4"
d G "NO_ANALOGS" 1 240 "0" "None"
d G "AN0_ANALOG" 1 241 "1" "!old only provided for compatibility"
d G "AN1_ANALOG" 1 242 "2" "!old only provided for compatibility"
d G "AN2_ANALOG" 1 243 "4" "!old only provided for compatibility"
d G "AN3_ANALOG" 1 244 "8" "!old only provided for compatibility"
d G "ALL_ANALOG" 1 245 "7" "!old only provided for compatibility"
d G "VSS_VDD" 1 248 "0x0000" "| Range 0-Vdd"
d G "VSS_VREF" 1 249 "0x4000" "| Range 0-Vref"
d G "ADC_START_AND_READ" 1 252 "7" "This is the default if nothing is specified"
d G "ADC_START_ONLY" 1 253 "1"
d G "ADC_READ_ONLY" 1 254 "6"
c L "set_adc_channel" 1 1 3 "FUNCTION"
f N "abs" 1 260 ""
v L "x" 1 260 "sint8" `125 
f B "abs" 1 260 "sint8(sint8 x)" `124 
f N "abs" 1 261 ""
v L "x" 1 261 "sint16" `127 
f B "abs" 1 261 "sint16(sint16 x)" `126 
f N "abs" 1 262 ""
v L "x" 1 262 "sint32" `129 
f B "abs" 1 262 "sint32(sint32 x)" `128 
f N "abs" 1 263 ""
v L "x" 1 263 "float" `131 
f B "abs" 1 263 "float(float x)" `130 
f N "_mul" 1 264 ""
v L "??65535" 1 264 "int8" `133 
v L "??65535" 1 264 "int8" `134 
f B "_mul" 1 264 "int16(int8 ,int8 )" `132 
f N "_mul" 1 265 ""
v L "??65535" 1 265 "sint8" `136 
v L "??65535" 1 265 "sint8" `137 
f B "_mul" 1 265 "sint16(sint8 ,sint8 )" `135 
f N "_mul" 1 266 ""
v L "??65535" 1 266 "int16" `139 
v L "??65535" 1 266 "int16" `140 
f B "_mul" 1 266 "int32(int16 ,int16 )" `138 
f N "_mul" 1 267 ""
v L "??65535" 1 267 "sint16" `142 
v L "??65535" 1 267 "sint16" `143 
f B "_mul" 1 267 "sint32(sint16 ,sint16 )" `141  "Memory Manipulation Prototypes:"
f N "read_bank" 1 270 ""
v L "bank" 1 270 "int8" `145 
v L "offset" 1 270 "int8" `146 
f B "read_bank" 1 270 "int8(int8 bank,int8 offset)" `144 
f N "write_bank" 1 271 ""
v L "bank" 1 271 "int8" `148 
v L "offset" 1 271 "int8" `149 
v L "value" 1 271 "int8" `150 
f B "write_bank" 1 271 "void(int8 bank,int8 offset,int8 value)" `147 
f N "strcpy" 1 272 ""
v L "dest" 1 272 "*int8" `152 
v L "src" 1 272 "*int8" `153 
f B "strcpy" 1 272 "void(*int8 dest,*int8 src)" `151 
f N "memset" 1 273 ""
v L "destination" 1 273 "*int8" `155 
v L "value" 1 273 "int8" `156 
v L "num" 1 273 "int16" `157 
f B "memset" 1 273 "void(*int8 destination,int8 value,int16 num)" `154 
f N "memcpy" 1 274 ""
v L "destination" 1 274 "*int8" `159 
v L "source" 1 274 "*int8" `160 
v L "num" 1 274 "int16" `161 
f B "memcpy" 1 274 "void(*int8 destination,*int8 source,int16 num)" `158  "String Prototypes:"
f N "toupper" 1 277 ""
v L "cvalue" 1 277 "int8" `163 
f B "toupper" 1 277 "int8(int8 cvalue)" `162 
f N "tolower" 1 278 ""
v L "cvalue" 1 278 "int8" `165 
f B "tolower" 1 278 "int8(int8 cvalue)" `164 
f N "sprintf" 1 279 ""
v L "string" 1 279 "*int8" `167 
v L "cstring" 1 279 "*int8" `168 
f B "sprintf" 1 279 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `166  "Data Manipulators Prototypes:"
f N "shift_left" 1 282 ""
v L "address" 1 282 "*int8" `171 
v L "bytes" 1 282 "int8" `172 
v L "value" 1 282 "int8" `173 
f B "shift_left" 1 282 "int8(*int8 address,int8 bytes,int8 value)" `170 
f N "shift_right" 1 283 ""
v L "address" 1 283 "*int8" `175 
v L "bytes" 1 283 "int8" `176 
v L "value" 1 283 "int8" `177 
f B "shift_right" 1 283 "int8(*int8 address,int8 bytes,int8 value)" `174 
f N "rotate_left" 1 284 ""
v L "address" 1 284 "*int8" `179 
v L "bytes" 1 284 "int8" `180 
f B "rotate_left" 1 284 "void(*int8 address,int8 bytes)" `178 
f N "rotate_right" 1 285 ""
v L "address" 1 285 "*int8" `182 
v L "bytes" 1 285 "int8" `183 
f B "rotate_right" 1 285 "void(*int8 address,int8 bytes)" `181 
f N "swap" 1 286 ""
v L "value" 1 286 "int8" `185 
f B "swap" 1 286 "void(int8 value)" `184 
f N "make8" 1 287 ""
v L "var" 1 287 "int16" `187 
v L "offset" 1 287 "int8" `188 
f B "make8" 1 287 "int8(int16 var,int8 offset)" `186 
f N "make8" 1 288 ""
v L "var" 1 288 "int32" `190 
v L "offset" 1 288 "int8" `191 
f B "make8" 1 288 "int8(int32 var,int8 offset)" `189 
f N "make16" 1 289 ""
v L "varhigh" 1 289 "int8" `193 
v L "varlow" 1 289 "int8" `194 
f B "make16" 1 289 "int16(int8 varhigh,int8 varlow)" `192 
f N "make32" 1 290 ""
v L "var1" 1 290 "int16" `196 
f B "make32" 1 290 "int32(int16 var1)" `195 
f N "make32" 1 291 ""
v L "var1" 1 291 "int16" `198 
v L "var2" 1 291 "int16" `199 
f B "make32" 1 291 "int32(int16 var1,int16 var2)" `197 
f N "make32" 1 292 ""
v L "var1" 1 292 "int16" `201 
v L "var2" 1 292 "int8" `202 
f B "make32" 1 292 "int32(int16 var1,int8 var2)" `200 
f N "make32" 1 293 ""
v L "var1" 1 293 "int16" `204 
v L "var2" 1 293 "int8" `205 
v L "var3" 1 293 "int8" `206 
f B "make32" 1 293 "int32(int16 var1,int8 var2,int8 var3)" `203 
f N "make32" 1 294 ""
v L "var1" 1 294 "int8" `208 
f B "make32" 1 294 "int32(int8 var1)" `207 
f N "make32" 1 295 ""
v L "var1" 1 295 "int8" `210 
v L "var2" 1 295 "int8" `211 
f B "make32" 1 295 "int32(int8 var1,int8 var2)" `209 
f N "make32" 1 296 ""
v L "var1" 1 296 "int8" `213 
v L "var2" 1 296 "int8" `214 
v L "var3" 1 296 "int8" `215 
f B "make32" 1 296 "int32(int8 var1,int8 var2,int8 var3)" `212 
f N "make32" 1 297 ""
v L "var1" 1 297 "int8" `217 
v L "var2" 1 297 "int8" `218 
v L "var3" 1 297 "int8" `219 
v L "var4" 1 297 "int8" `220 
f B "make32" 1 297 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `216 
f N "make32" 1 298 ""
v L "var1" 1 298 "int8" `222 
v L "var2" 1 298 "int16" `223 
f B "make32" 1 298 "int32(int8 var1,int16 var2)" `221 
f N "make32" 1 299 ""
v L "var1" 1 299 "int8" `225 
v L "var2" 1 299 "int16" `226 
v L "var3" 1 299 "int8" `227 
f B "make32" 1 299 "int32(int8 var1,int16 var2,int8 var3)" `224 
f N "make32" 1 300 ""
v L "var1" 1 300 "int8" `229 
v L "var2" 1 300 "int8" `230 
v L "var3" 1 300 "int16" `231 
f B "make32" 1 300 "int32(int8 var1,int8 var2,int16 var3)" `228 
f N "bit_set" 1 301 ""
v L "var" 1 301 "int8" `233 
v L "bit" 1 301 "int8" `234 
f B "bit_set" 1 301 "void(int8 var,int8 bit)" `232 
f N "bit_set" 1 302 ""
v L "var" 1 302 "int16" `236 
v L "bit" 1 302 "int8" `237 
f B "bit_set" 1 302 "void(int16 var,int8 bit)" `235 
f N "bit_set" 1 303 ""
v L "var" 1 303 "int32" `239 
v L "bit" 1 303 "int8" `240 
f B "bit_set" 1 303 "void(int32 var,int8 bit)" `238 
f N "bit_clear" 1 304 ""
v L "var" 1 304 "int8" `242 
v L "bit" 1 304 "int8" `243 
f B "bit_clear" 1 304 "void(int8 var,int8 bit)" `241 
f N "bit_clear" 1 305 ""
v L "var" 1 305 "int16" `245 
v L "bit" 1 305 "int8" `246 
f B "bit_clear" 1 305 "void(int16 var,int8 bit)" `244 
f N "bit_clear" 1 306 ""
v L "var" 1 306 "int32" `248 
v L "bit" 1 306 "int8" `249 
f B "bit_clear" 1 306 "void(int32 var,int8 bit)" `247 
f N "bit_test" 1 307 ""
v L "var" 1 307 "int8" `251 
v L "bit" 1 307 "int8" `252 
f B "bit_test" 1 307 "int8(int8 var,int8 bit)" `250 
f N "bit_test" 1 308 ""
v L "var" 1 308 "int16" `254 
v L "bit" 1 308 "int8" `255 
f B "bit_test" 1 308 "int8(int16 var,int8 bit)" `253 
f N "bit_test" 1 309 ""
v L "var" 1 309 "int32" `257 
v L "bit" 1 309 "int8" `258 
f B "bit_test" 1 309 "int8(int32 var,int8 bit)" `256  "#use delay() Prototypes:"
f N "delay_cycles" 1 312 ""
v L "count" 1 312 "int8" `260 
f B "delay_cycles" 1 312 "void(int8 count)" `259 
f N "delay_ms" 1 313 ""
v L "time" 1 313 "int16" `262 
f B "delay_ms" 1 313 "void(int16 time)" `261 
f N "delay_us" 1 314 ""
v L "time" 1 314 "int16" `264 
f B "delay_us" 1 314 "void(int16 time)" `263  "#use rs232() Prototypes:"
f N "putchar" 1 317 ""
v L "cdata" 1 317 "int8" `266 
f B "putchar" 1 317 "void(int8 cdata)" `265 
f N "putchar" 1 318 ""
v L "cdata" 1 318 "int8" `268 
v L "stream" 1 318 "int8" `269 
f B "putchar" 1 318 "void(int8 cdata,int8 stream)" `267 
f N "puts" 1 319 ""
v L "string" 1 319 "*int8" `271 
f B "puts" 1 319 "void(*int8 string)" `270 
f N "puts" 1 320 ""
v L "string" 1 320 "*int8" `273 
v L "stream" 1 320 "int8" `274 
f B "puts" 1 320 "void(*int8 string,int8 stream)" `272 
f N "getch" 1 321 ""
f B "getch" 1 321 "int8()" `275 
f N "getch" 1 322 ""
v L "stream" 1 322 "int8" `277 
f B "getch" 1 322 "int8(int8 stream)" `276 
f N "gets" 1 323 ""
v L "string" 1 323 "*int8" `279 
f B "gets" 1 323 "void(*int8 string)" `278 
f N "gets" 1 324 ""
v L "string" 1 324 "*int8" `281 
v L "stream" 1 324 "int8" `282 
f B "gets" 1 324 "void(*int8 string,int8 stream)" `280 
f N "kbhit" 1 325 ""
f B "kbhit" 1 325 "int8()" `283 
f N "kbhit" 1 326 ""
v L "stream" 1 326 "int8" `285 
f B "kbhit" 1 326 "int8(int8 stream)" `284 
f N "printf" 1 327 ""
v L "string" 1 327 "*int8" `287 
f B "printf" 1 327 "void(*int8 string,*int8 _VA_LIST)" `286 
f N "fprintf" 1 328 ""
v L "stream" 1 328 "int8" `290 
v L "string" 1 328 "*int8" `291 
f B "fprintf" 1 328 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `289 
f N "putc_send" 1 329 ""
f B "putc_send" 1 329 "void()" `293 
f N "fputc_send" 1 330 ""
v L "stream" 1 330 "int8" `295 
f B "fputc_send" 1 330 "void(int8 stream)" `294 
f N "rcv_buffer_full" 1 331 ""
f B "rcv_buffer_full" 1 331 "int8()" `296 
f N "rcv_buffer_full" 1 332 ""
v L "stream" 1 332 "int8" `298 
f B "rcv_buffer_full" 1 332 "int8(int8 stream)" `297 
f N "rcv_buffer_bytes" 1 333 ""
f B "rcv_buffer_bytes" 1 333 "int16()" `299 
f N "rcv_buffer_bytes" 1 334 ""
v L "stream" 1 334 "int8" `301 
f B "rcv_buffer_bytes" 1 334 "int16(int8 stream)" `300 
f N "tx_buffer_full" 1 335 ""
f B "tx_buffer_full" 1 335 "int8()" `302 
f N "tx_buffer_full" 1 336 ""
v L "stream" 1 336 "int8" `304 
f B "tx_buffer_full" 1 336 "int8(int8 stream)" `303 
f N "tx_buffer_bytes" 1 337 ""
f B "tx_buffer_bytes" 1 337 "int16()" `305 
f N "tx_buffer_bytes" 1 338 ""
v L "stream" 1 338 "int8" `307 
f B "tx_buffer_bytes" 1 338 "int16(int8 stream)" `306  "#use i2c() Prototypes:"
f N "i2c_read" 1 341 ""
f B "i2c_read" 1 341 "int8()" `308 
f N "i2c_read" 1 342 ""
v L "ack" 1 342 "int8" `310 
f B "i2c_read" 1 342 "int8(int8 ack)" `309 
f N "i2c_read" 1 343 ""
v L "stream" 1 343 "int8" `312 
v L "ack" 1 343 "int8" `313 
f B "i2c_read" 1 343 "int8(int8 stream,int8 ack)" `311 
f N "i2c_write" 1 344 ""
v L "data" 1 344 "int8" `315 
f B "i2c_write" 1 344 "int8(int8 data)" `314 
f N "i2c_write" 1 345 ""
v L "stream" 1 345 "int8" `317 
v L "data" 1 345 "int8" `318 
f B "i2c_write" 1 345 "int8(int8 stream,int8 data)" `316 
f N "i2c_start" 1 346 ""
f B "i2c_start" 1 346 "void()" `319 
f N "i2c_start" 1 347 ""
v L "stream" 1 347 "int8" `321 
f B "i2c_start" 1 347 "void(int8 stream)" `320 
f N "i2c_start" 1 348 ""
v L "stream" 1 348 "int8" `323 
v L "restart" 1 348 "int8" `324 
f B "i2c_start" 1 348 "void(int8 stream,int8 restart)" `322 
f N "i2c_stop" 1 349 ""
f B "i2c_stop" 1 349 "void()" `325 
f N "i2c_stop" 1 350 ""
v L "stream" 1 350 "int8" `327 
f B "i2c_stop" 1 350 "void(int8 stream)" `326 
f N "i2c_isr_state" 1 351 ""
f B "i2c_isr_state" 1 351 "int8()" `328 
f N "i2c_slaveaddr" 1 352 ""
v L "addr" 1 352 "int8" `330 
f B "i2c_slaveaddr" 1 352 "void(int8 addr)" `329 
f N "i2c_slaveaddr" 1 353 ""
v L "stream" 1 353 "int8" `332 
v L "addr" 1 353 "int8" `333 
f B "i2c_slaveaddr" 1 353 "void(int8 stream,int8 addr)" `331 
f N "i2c_poll" 1 354 ""
f B "i2c_poll" 1 354 "int8()" `334 
f N "i2c_poll" 1 355 ""
v L "stream" 1 355 "int8" `336 
f B "i2c_poll" 1 355 "int8(int8 stream)" `335 
f N "i2c_init" 1 356 ""
v L "baud" 1 356 "int32" `338 
f B "i2c_init" 1 356 "void(int32 baud)" `337 
f N "i2c_init" 1 357 ""
v L "stream" 1 357 "int8" `340 
v L "baud" 1 357 "int32" `341 
f B "i2c_init" 1 357 "void(int8 stream,int32 baud)" `339 
f N "i2c_transfer" 1 358 ""
v L "address" 1 358 "int8" `343 
v L "wData" 1 358 "*int8" `344 
v L "wCount" 1 358 "int8" `345 
f B "i2c_transfer" 1 358 "void(int8 address,*int8 wData,int8 wCount)" `342 
f N "i2c_transfer" 1 359 ""
v L "address" 1 359 "int8" `347 
v L "wData" 1 359 "*int8" `348 
v L "wCount" 1 359 "int8" `349 
v L "rData" 1 359 "*int8" `350 
v L "rCount" 1 359 "*int8" `351 
f B "i2c_transfer" 1 359 "void(int8 address,*int8 wData,int8 wCount,*int8 rData,*int8 rCount)" `346 
f N "i2c_transfer" 1 360 ""
v L "stream" 1 360 "int8" `353 
v L "address" 1 360 "int8" `354 
v L "wData" 1 360 "*int8" `355 
v L "wCount" 1 360 "int8" `356 
f B "i2c_transfer" 1 360 "void(int8 stream,int8 address,*int8 wData,int8 wCount)" `352 
f N "i2c_transfer" 1 361 ""
v L "stream" 1 361 "int8" `358 
v L "address" 1 361 "int8" `359 
v L "wData" 1 361 "*int8" `360 
v L "wCount" 1 361 "int8" `361 
v L "rData" 1 361 "*int8" `362 
v L "rCount" 1 361 "*int8" `363 
f B "i2c_transfer" 1 361 "void(int8 stream,int8 address,*int8 wData,int8 wCount,*int8 rData,*int8 rCount)" `357 
f N "i2c_transfer_out" 1 362 ""
v L "address" 1 362 "int8" `365 
v L "wData" 1 362 "*int8" `366 
v L "wCount" 1 362 "int8" `367 
f B "i2c_transfer_out" 1 362 "void(int8 address,*int8 wData,int8 wCount)" `364 
f N "i2c_transfer_out" 1 363 ""
v L "stream" 1 363 "int8" `369 
v L "address" 1 363 "int8" `370 
v L "wData" 1 363 "*int8" `371 
v L "wCount" 1 363 "int8" `372 
f B "i2c_transfer_out" 1 363 "void(int8 stream,int8 address,*int8 wData,int8 wCount)" `368 
f N "i2c_transfer_in" 1 364 ""
v L "address" 1 364 "int8" `374 
v L "rData" 1 364 "*int8" `375 
v L "rCount" 1 364 "int8" `376 
f B "i2c_transfer_in" 1 364 "void(int8 address,*int8 rData,int8 rCount)" `373 
f N "i2c_transfer_in" 1 365 ""
v L "stream" 1 365 "int8" `378 
v L "address" 1 365 "int8" `379 
v L "rData" 1 365 "*int8" `380 
v L "rCount" 1 365 "int8" `381 
f B "i2c_transfer_in" 1 365 "void(int8 stream,int8 address,*int8 rData,int8 rCount)" `377  "#use spi() Prototypes:"
f N "spi_xfer" 1 368 ""
f B "spi_xfer" 1 368 "int8()" `382 
f N "spi_xfer" 1 369 ""
f G "spi_xfer" 1 369 "int16(int8 data)" `383 
f N "spi_xfer" 1 370 ""
f G "spi_xfer" 1 370 "int32(int8 data)" `383 
f N "spi_xfer" 1 371 ""
v L "data" 1 371 "int8" `384 
f B "spi_xfer" 1 371 "int8(int8 data)" `383 
f N "spi_xfer" 1 372 ""
v L "data" 1 372 "int16" `386 
f B "spi_xfer" 1 372 "int16(int16 data)" `385 
f N "spi_xfer" 1 373 ""
v L "data" 1 373 "int32" `388 
f B "spi_xfer" 1 373 "int32(int32 data)" `387 
f N "spi_xfer" 1 374 ""
v L "stream" 1 374 "int8" `390 
v L "data" 1 374 "int8" `391 
f B "spi_xfer" 1 374 "int8(int8 stream,int8 data)" `389 
f N "spi_xfer" 1 375 ""
v L "stream" 1 375 "int8" `393 
v L "data" 1 375 "int16" `394 
f B "spi_xfer" 1 375 "int16(int8 stream,int16 data)" `392 
f N "spi_xfer" 1 376 ""
v L "stream" 1 376 "int8" `396 
v L "data" 1 376 "int32" `397 
f B "spi_xfer" 1 376 "int32(int8 stream,int32 data)" `395 
f N "spi_xfer" 1 377 ""
v L "stream" 1 377 "int8" `399 
v L "data" 1 377 "int8" `400 
v L "bits" 1 377 "int8" `401 
f B "spi_xfer" 1 377 "int8(int8 stream,int8 data,int8 bits)" `398 
f N "spi_xfer" 1 378 ""
v L "stream" 1 378 "int8" `403 
v L "data" 1 378 "int16" `404 
v L "bits" 1 378 "int8" `405 
f B "spi_xfer" 1 378 "int16(int8 stream,int16 data,int8 bits)" `402 
f N "spi_xfer" 1 379 ""
v L "stream" 1 379 "int8" `407 
v L "data" 1 379 "int32" `408 
v L "bits" 1 379 "int8" `409 
f B "spi_xfer" 1 379 "int32(int8 stream,int32 data,int8 bits)" `406 
f N "spi_init" 1 380 ""
v L "baud" 1 380 "int32" `411 
f B "spi_init" 1 380 "void(int32 baud)" `410 
f N "spi_init" 1 381 ""
v L "stream" 1 381 "int8" `413 
v L "baud" 1 381 "int32" `414 
f B "spi_init" 1 381 "void(int8 stream,int32 baud)" `412 
f N "spi_speed" 1 382 ""
v L "baud" 1 382 "int32" `416 
f B "spi_speed" 1 382 "void(int32 baud)" `415 
f N "spi_speed" 1 383 ""
v L "stream" 1 383 "int8" `418 
v L "baud" 1 383 "int32" `419 
f B "spi_speed" 1 383 "void(int8 stream,int32 baud)" `417 
f N "spi_speed" 1 384 ""
v L "stream" 1 384 "int8" `421 
v L "baud" 1 384 "int32" `422 
v L "clock" 1 384 "int32" `423 
f B "spi_speed" 1 384 "void(int8 stream,int32 baud,int32 clock)" `420 
f N "spi_prewrite" 1 385 ""
v L "data" 1 385 "int8" `425 
f B "spi_prewrite" 1 385 "void(int8 data)" `424 
f N "spi_prewrite" 1 386 ""
v L "data" 1 386 "int16" `427 
f B "spi_prewrite" 1 386 "void(int16 data)" `426 
f N "spi_prewrite" 1 387 ""
v L "data" 1 387 "int32" `429 
f B "spi_prewrite" 1 387 "void(int32 data)" `428 
f N "spi_prewrite" 1 388 ""
v L "??65535" 1 388 "int8" `431 
v L "data" 1 388 "int8" `432 
f B "spi_prewrite" 1 388 "void(int8 ,int8 data)" `430 
f N "spi_prewrite" 1 389 ""
v L "??65535" 1 389 "int8" `434 
v L "data" 1 389 "int16" `435 
f B "spi_prewrite" 1 389 "void(int8 ,int16 data)" `433 
f N "spi_prewrite" 1 390 ""
v L "??65535" 1 390 "int8" `437 
v L "data" 1 390 "int32" `438 
f B "spi_prewrite" 1 390 "void(int8 ,int32 data)" `436 
f N "spi_xfer_in" 1 391 ""
f B "spi_xfer_in" 1 391 "int8()" `439 
f N "spi_xfer_in" 1 392 ""
f G "spi_xfer_in" 1 392 "int16(int8 bits)" `440 
f N "spi_xfer_in" 1 393 ""
f G "spi_xfer_in" 1 393 "int32(int8 bits)" `440 
f N "spi_xfer_in" 1 394 ""
v L "bits" 1 394 "int8" `441 
f B "spi_xfer_in" 1 394 "int8(int8 bits)" `440 
f N "spi_xfer_in" 1 395 ""
v L "bits" 1 395 "int8" `443 
f G "spi_xfer_in" 1 395 "int16(int8 bits,int8 bits)" `442 
f N "spi_xfer_in" 1 396 ""
v L "bits" 1 396 "int8" `443 
f G "spi_xfer_in" 1 396 "int32(int8 bits,int8 bits)" `442 
f N "spi_xfer_in" 1 397 ""
v L "stream" 1 397 "int8" `443 
v L "bits" 1 397 "int8" `444 
f B "spi_xfer_in" 1 397 "int8(int8 stream,int8 bits)" `442 
f N "spi_xfer_in" 1 398 ""
v L "stream" 1 398 "int8" `443 
v L "bits" 1 398 "int8" `447 
f G "spi_xfer_in" 1 398 "int16(int8 stream,int8 bits,int8 task)" `445 
f N "spi_xfer_in" 1 399 ""
v L "stream" 1 399 "int8" `443 
v L "bits" 1 399 "int8" `447 
f G "spi_xfer_in" 1 399 "int32(int8 stream,int8 bits,int8 task)" `445  "#use rtos() Prototypes:"
f N "rtos_run" 1 402 ""
f B "rtos_run" 1 402 "void(int8 stream,int8 bits,int8 task)" `445 
f N "rtos_yield" 1 403 ""
f B "rtos_yield" 1 403 "void(int8 bits,int8 task)" `446 
f N "rtos_enable" 1 404 ""
v L "task" 1 404 "int8" `448 
f B "rtos_enable" 1 404 "void(int8 task)" `447 
f N "rtos_disable" 1 405 ""
v L "task" 1 405 "int8" `450 
f B "rtos_disable" 1 405 "void(int8 task)" `449 
f N "rtos_terminate" 1 406 ""
f B "rtos_terminate" 1 406 "void()" `451 
f N "rtos_await" 1 407 ""
v L "flag" 1 407 "int8" `453 
f B "rtos_await" 1 407 "void(int8 flag)" `452 
f N "rtos_wait" 1 408 ""
v L "sem" 1 408 "int8" `455 
f B "rtos_wait" 1 408 "void(int8 sem)" `454 
f N "rtos_signal" 1 409 ""
v L "sem" 1 409 "int8" `457 
f B "rtos_signal" 1 409 "void(int8 sem)" `456 
f N "rtos_msg_send" 1 410 ""
v L "task" 1 410 "int8" `459 
v L "msg" 1 410 "int8" `460 
f B "rtos_msg_send" 1 410 "void(int8 task,int8 msg)" `458 
f N "rtos_msg_read" 1 411 ""
f B "rtos_msg_read" 1 411 "int8()" `461 
f N "rtos_msg_poll" 1 412 ""
f B "rtos_msg_poll" 1 412 "int8()" `462 
f N "rtos_overrun" 1 413 ""
v L "task" 1 413 "int8" `464 
f B "rtos_overrun" 1 413 "int8(int8 task)" `463 
f N "rtos_stats" 1 414 ""
v L "task" 1 414 "int8" `466 
v L "stat" 1 414 "*int8" `467 
f B "rtos_stats" 1 414 "void(int8 task,*int8 stat)" `465  "#use timer() Prototypes:"
f N "get_ticks" 1 417 ""
f B "get_ticks" 1 417 "int8()" `468 
f N "get_ticks" 1 418 ""
f G "get_ticks" 1 418 "int16(int8 stream)" `469 
f N "get_ticks" 1 419 ""
f G "get_ticks" 1 419 "int32(int8 stream)" `469 
f N "get_ticks" 1 420 ""
v L "stream" 1 420 "int8" `470 
f B "get_ticks" 1 420 "int8(int8 stream)" `469 
f N "get_ticks" 1 421 ""
v L "stream" 1 421 "int8" `472 
f G "get_ticks" 1 421 "int16(int8 stream)" `471 
f N "get_ticks" 1 422 ""
v L "stream" 1 422 "int8" `472 
f G "get_ticks" 1 422 "int32(int8 stream)" `471 
f N "set_ticks" 1 423 ""
v L "value" 1 423 "int8" `472 
f B "set_ticks" 1 423 "void(int8 value)" `471 
f N "set_ticks" 1 424 ""
v L "value" 1 424 "int16" `474 
f B "set_ticks" 1 424 "void(int16 value)" `473 
f N "set_ticks" 1 425 ""
v L "value" 1 425 "int32" `476 
f B "set_ticks" 1 425 "void(int32 value)" `475 
f N "set_ticks" 1 426 ""
v L "stream" 1 426 "int8" `478 
v L "value" 1 426 "int8" `479 
f B "set_ticks" 1 426 "void(int8 stream,int8 value)" `477 
f N "set_ticks" 1 427 ""
v L "stream" 1 427 "int8" `481 
v L "value" 1 427 "int16" `482 
f B "set_ticks" 1 427 "void(int8 stream,int16 value)" `480 
f N "set_ticks" 1 428 ""
v L "stream" 1 428 "int8" `484 
v L "value" 1 428 "int32" `485 
f B "set_ticks" 1 428 "void(int8 stream,int32 value)" `483  "#use pwm() Prototypes:"
f N "pwm_on" 1 431 ""
f B "pwm_on" 1 431 "void()" `486 
f N "pwm_on" 1 432 ""
v L "stream" 1 432 "int8" `488 
f B "pwm_on" 1 432 "void(int8 stream)" `487 
f N "pwm_off" 1 433 ""
f B "pwm_off" 1 433 "void()" `489 
f N "pwm_off" 1 434 ""
v L "stream" 1 434 "int8" `491 
f B "pwm_off" 1 434 "void(int8 stream)" `490 
f N "pwm_set_duty" 1 435 ""
v L "duty" 1 435 "int16" `493 
f B "pwm_set_duty" 1 435 "void(int16 duty)" `492 
f N "pwm_set_duty" 1 436 ""
v L "stream" 1 436 "int8" `495 
v L "duty" 1 436 "int16" `496 
f B "pwm_set_duty" 1 436 "void(int8 stream,int16 duty)" `494 
f N "pwm_set_duty_percent" 1 437 ""
v L "percent" 1 437 "int16" `498 
f B "pwm_set_duty_percent" 1 437 "void(int16 percent)" `497 
f N "pwm_set_duty_percent" 1 438 ""
v L "stream" 1 438 "int8" `500 
v L "percent" 1 438 "int16" `501 
f B "pwm_set_duty_percent" 1 438 "void(int8 stream,int16 percent)" `499 
f N "pwm_set_frequency" 1 439 ""
v L "frequency" 1 439 "int32" `503 
f B "pwm_set_frequency" 1 439 "void(int32 frequency)" `502 
f N "pwm_set_frequency" 1 440 ""
v L "stream" 1 440 "int8" `505 
v L "frequency" 1 440 "int32" `506 
f B "pwm_set_frequency" 1 440 "void(int8 stream,int32 frequency)" `504  "#use capture() Prototypes:"
f N "get_capture_time" 1 443 ""
f B "get_capture_time" 1 443 "int16()" `507 
f N "get_capture_time" 1 444 ""
v L "stream" 1 444 "int8" `509 
f B "get_capture_time" 1 444 "int16(int8 stream)" `508 
f N "get_capture_event" 1 445 ""
f B "get_capture_event" 1 445 "int8()" `510 
f N "get_capture_event" 1 446 ""
v L "stream" 1 446 "int8" `512 
f B "get_capture_event" 1 446 "int8(int8 stream)" `511  "Enviroment Prototypes:"
c L "get_capture_event" 1 1 2 "FUNCTION"
f N "goto_address" 1 459 ""
v L "address" 1 459 "int16" `514 
f B "goto_address" 1 459 "void(int16 address)" `513 
f N "label_address" 1 460 ""
v L "label" 1 460 "int16" `516 
f B "label_address" 1 460 "int16(int16 label)" `515  "EEPROM Prototypes:"
d G "__EEADDRESS__" 1 467 "unsigned int8"
f N "read_eeprom" 1 470 ""
v L "address" 1 470 "int8" `518 
f B "read_eeprom" 1 470 "int8(int8 address)" `517 
f N "write_eeprom" 1 471 ""
v L "address" 1 471 "int8" `520 
v L "value" 1 471 "int8" `521 
f B "write_eeprom" 1 471 "void(int8 address,int8 value)" `519  "INT"
c L "write_eeprom" 1 1 4 "FUNCTION"
f N "enable_interrupts" 1 478 ""
v L "interrupt" 1 478 "int32" `523 
f B "enable_interrupts" 1 478 "void(int32 interrupt)" `522 
f N "disable_interrupts" 1 479 ""
v L "interrupt" 1 479 "int32" `525 
f B "disable_interrupts" 1 479 "void(int32 interrupt)" `524 
f N "clear_interrupt" 1 480 ""
v L "interrupt" 1 480 "int32" `527 
f B "clear_interrupt" 1 480 "void(int32 interrupt)" `526 
f N "interrupt_active" 1 481 ""
v L "interrupt" 1 481 "int32" `529 
f B "interrupt_active" 1 481 "int8(int32 interrupt)" `528 
f N "interrupt_enabled" 1 482 ""
v L "interrupt" 1 482 "int32" `531 
f B "interrupt_enabled" 1 482 "int8(int32 interrupt)" `530 
f N "ext_int_edge" 1 483 ""
v L "source" 1 483 "int8" `533 
v L "edge" 1 483 "int8" `534 
f B "ext_int_edge" 1 483 "void(int8 source,int8 edge)" `532 
f N "jump_to_isr" 1 484 ""
v L "address" 1 484 "int16" `536 
f B "jump_to_isr" 1 484 "void(int16 address)" `535  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 1 486 "0x40"
d G "H_TO_L" 1 487 "0"
d G "GLOBAL" 1 489 "0x0BC0"
d G "PERIPH" 1 490 "0x0B40"
d G "INT_RTCC" 1 491 "0x000B20"
d G "INT_EXT_L2H" 1 492 "0x50000B10"
d G "INT_EXT_H2L" 1 493 "0x60000B10"
d G "INT_EXT" 1 494 "0x000B10"
d G "INT_AD" 1 495 "0x008C40"
d G "INT_TIMER1" 1 496 "0x008C01"
d G "INT_TIMER0" 1 497 "0x000B20"
d G "INT_EEPROM" 1 498 "0x008C80"
d G "INT_COMP" 1 499 "0x008C08"
d G "INT_RA" 1 500 "0x00FF0B08"
d G "INT_RA0" 1 501 "0x0010B08"
d G "INT_RA1" 1 502 "0x0020B08"
d G "INT_RA2" 1 503 "0x0040B08"
d G "INT_RA3" 1 504 "0x0080B08"
d G "INT_RA4" 1 505 "0x0100B08"
d G "INT_RA5" 1 506 "0x0200B08"
D G "BUZZER" 0 12 "PIN_A3"
F N "main" 0 16 ""
F G "main" 0 17 "void()" `545 
V L "pulse" 0 21 "int16" `548 
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 0
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "profileout" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_eeprom" 1 0
F B "write_eeprom" 2 0
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "input_a" 0 0
F B "set_tris_a" 1 0
F B "get_tris_a" 0 0
F B "input_change_a" 0 0
F B "port_a_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_comparator" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "set_analog_pins" 1 2
F B "setup_timer_0" 1 0
F B "setup_vref" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
F B "putchar" 1 2
F B "puts" 1 2
F B "getch" 0 1
F B "gets" 1 3
F B "kbhit" 0 1
