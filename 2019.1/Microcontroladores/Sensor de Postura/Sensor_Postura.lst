CCS PCM C Compiler, Version 5.081, 13314               08-mai-19 14:13

               Filename:   C:\Users\pedro\OneDrive\Faculdade\Faculdade\2019.1\Microcontroladores\Sensor de Postura\Sensor_Postura.lst

               ROM used:   3036 words (37%)
                           Largest free fragment is 2048
               RAM used:   49 (13%) at main() level
                           100 (27%) worst case
               Stack used: 3 locations
               Stack size: 8

*
0000:  MOVLW  08
0001:  MOVWF  0A
0002:  GOTO   000
0003:  NOP
.................... //#include <Sensor_Postura.h> 
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
0004:  DATA 78,10
0005:  DATA 3D,10
0006:  DATA 25,36
0007:  DATA 75,16
0008:  DATA A0,3C
0009:  DATA A0,1E
000A:  DATA A0,12
000B:  DATA EC,3A
000C:  DATA 2C,10
000D:  DATA 7A,10
000E:  DATA 3D,10
000F:  DATA 25,36
0010:  DATA 75,16
0011:  DATA 20,39
0012:  DATA 65,33
0013:  DATA 65,39
0014:  DATA 65,37
0015:  DATA E3,34
0016:  DATA E1,1E
0017:  DATA A0,12
0018:  DATA EC,3A
0019:  DATA 8A,06
001A:  DATA 00,00
001B:  CLRF   78
001C:  CLRF   79
001D:  CLRF   77
001E:  CLRF   7A
001F:  MOVF   49,W
0020:  BTFSS  03.2
0021:  GOTO   025
0022:  MOVF   48,W
0023:  BTFSC  03.2
0024:  GOTO   03F
0025:  MOVLW  10
0026:  MOVWF  4A
0027:  BCF    03.0
0028:  RLF    46,F
0029:  RLF    47,F
002A:  RLF    77,F
002B:  RLF    7A,F
002C:  MOVF   49,W
002D:  SUBWF  7A,W
002E:  BTFSS  03.2
002F:  GOTO   032
0030:  MOVF   48,W
0031:  SUBWF  77,W
0032:  BTFSS  03.0
0033:  GOTO   03B
0034:  MOVF   48,W
0035:  SUBWF  77,F
0036:  BTFSS  03.0
0037:  DECF   7A,F
0038:  MOVF   49,W
0039:  SUBWF  7A,F
003A:  BSF    03.0
003B:  RLF    78,F
003C:  RLF    79,F
003D:  DECFSZ 4A,F
003E:  GOTO   027
003F:  RETURN
0040:  MOVLW  10
0041:  MOVWF  4C
0042:  CLRF   77
0043:  CLRF   7A
0044:  RRF    49,F
0045:  RRF    48,F
0046:  BTFSS  03.0
0047:  GOTO   04E
0048:  MOVF   4A,W
0049:  ADDWF  77,F
004A:  BTFSC  03.0
004B:  INCF   7A,F
004C:  MOVF   4B,W
004D:  ADDWF  7A,F
004E:  RRF    7A,F
004F:  RRF    77,F
0050:  RRF    79,F
0051:  RRF    78,F
0052:  DECFSZ 4C,F
0053:  GOTO   044
0054:  RETURN
0055:  MOVLW  8E
0056:  MOVWF  77
0057:  MOVF   49,W
0058:  MOVWF  78
0059:  MOVF   48,W
005A:  MOVWF  79
005B:  CLRF   7A
005C:  BTFSS  49.7
005D:  GOTO   063
005E:  COMF   78,F
005F:  COMF   79,F
0060:  INCF   79,F
0061:  BTFSC  03.2
0062:  INCF   78,F
0063:  MOVF   78,F
0064:  BTFSS  03.2
0065:  GOTO   070
0066:  MOVF   79,W
0067:  MOVWF  78
0068:  CLRF   79
0069:  MOVLW  08
006A:  SUBWF  77,F
006B:  MOVF   78,F
006C:  BTFSS  03.2
006D:  GOTO   070
006E:  CLRF   77
006F:  GOTO   079
0070:  BCF    03.0
0071:  BTFSC  78.7
0072:  GOTO   077
0073:  RLF    79,F
0074:  RLF    78,F
0075:  DECF   77,F
0076:  GOTO   070
0077:  BTFSS  49.7
0078:  BCF    78.7
0079:  RETURN
007A:  MOVF   6C,W
007B:  MOVWF  73
007C:  MOVF   70,W
007D:  XORWF  73,F
007E:  BTFSS  73.7
007F:  GOTO   085
0080:  BCF    03.2
0081:  BCF    03.0
0082:  BTFSC  6C.7
0083:  BSF    03.0
0084:  GOTO   0B8
0085:  MOVF   6C,W
0086:  MOVWF  73
0087:  MOVF   6F,W
0088:  MOVWF  74
0089:  MOVF   6B,W
008A:  SUBWF  74,F
008B:  BTFSC  03.2
008C:  GOTO   093
008D:  BTFSS  73.7
008E:  GOTO   0B8
008F:  MOVF   03,W
0090:  XORLW  01
0091:  MOVWF  03
0092:  GOTO   0B8
0093:  MOVF   70,W
0094:  MOVWF  74
0095:  MOVF   6C,W
0096:  SUBWF  74,F
0097:  BTFSC  03.2
0098:  GOTO   09F
0099:  BTFSS  73.7
009A:  GOTO   0B8
009B:  MOVF   03,W
009C:  XORLW  01
009D:  MOVWF  03
009E:  GOTO   0B8
009F:  MOVF   71,W
00A0:  MOVWF  74
00A1:  MOVF   6D,W
00A2:  SUBWF  74,F
00A3:  BTFSC  03.2
00A4:  GOTO   0AB
00A5:  BTFSS  73.7
00A6:  GOTO   0B8
00A7:  MOVF   03,W
00A8:  XORLW  01
00A9:  MOVWF  03
00AA:  GOTO   0B8
00AB:  MOVF   72,W
00AC:  MOVWF  74
00AD:  MOVF   6E,W
00AE:  SUBWF  74,F
00AF:  BTFSC  03.2
00B0:  GOTO   0B7
00B1:  BTFSS  73.7
00B2:  GOTO   0B8
00B3:  MOVF   03,W
00B4:  XORLW  01
00B5:  MOVWF  03
00B6:  GOTO   0B8
00B7:  BCF    03.0
00B8:  RETURN
00B9:  MOVF   6F,W
00BA:  BTFSC  03.2
00BB:  GOTO   18B
00BC:  BSF    03.5
00BD:  MOVWF  24
00BE:  MOVF   73,W
00BF:  BTFSS  03.2
00C0:  GOTO   0C3
00C1:  BCF    03.5
00C2:  GOTO   18B
00C3:  SUBWF  24,F
00C4:  BTFSS  03.0
00C5:  GOTO   0CD
00C6:  MOVLW  7F
00C7:  ADDWF  24,F
00C8:  BTFSS  03.0
00C9:  GOTO   0CC
00CA:  BCF    03.5
00CB:  GOTO   18B
00CC:  GOTO   0D7
00CD:  MOVLW  81
00CE:  SUBWF  24,F
00CF:  BTFSC  03.0
00D0:  GOTO   0D3
00D1:  BCF    03.5
00D2:  GOTO   18B
00D3:  BTFSS  03.2
00D4:  GOTO   0D7
00D5:  BCF    03.5
00D6:  GOTO   18B
00D7:  MOVF   24,W
00D8:  MOVWF  77
00D9:  CLRF   78
00DA:  CLRF   79
00DB:  CLRF   7A
00DC:  CLRF   23
00DD:  MOVF   70,W
00DE:  MOVWF  22
00DF:  BSF    22.7
00E0:  MOVF   71,W
00E1:  MOVWF  21
00E2:  MOVF   72,W
00E3:  MOVWF  20
00E4:  MOVLW  19
00E5:  MOVWF  24
00E6:  MOVF   76,W
00E7:  SUBWF  20,F
00E8:  BTFSC  03.0
00E9:  GOTO   0FA
00EA:  MOVLW  01
00EB:  SUBWF  21,F
00EC:  BTFSC  03.0
00ED:  GOTO   0FA
00EE:  SUBWF  22,F
00EF:  BTFSC  03.0
00F0:  GOTO   0FA
00F1:  SUBWF  23,F
00F2:  BTFSC  03.0
00F3:  GOTO   0FA
00F4:  INCF   23,F
00F5:  INCF   22,F
00F6:  INCF   21,F
00F7:  MOVF   76,W
00F8:  ADDWF  20,F
00F9:  GOTO   12C
00FA:  MOVF   75,W
00FB:  SUBWF  21,F
00FC:  BTFSC  03.0
00FD:  GOTO   115
00FE:  MOVLW  01
00FF:  SUBWF  22,F
0100:  BTFSC  03.0
0101:  GOTO   115
0102:  SUBWF  23,F
0103:  BTFSC  03.0
0104:  GOTO   115
0105:  INCF   23,F
0106:  INCF   22,F
0107:  MOVF   75,W
0108:  ADDWF  21,F
0109:  MOVF   76,W
010A:  ADDWF  20,F
010B:  BTFSS  03.0
010C:  GOTO   12C
010D:  INCF   21,F
010E:  BTFSS  03.2
010F:  GOTO   12C
0110:  INCF   22,F
0111:  BTFSS  03.2
0112:  GOTO   12C
0113:  INCF   23,F
0114:  GOTO   12C
0115:  MOVF   74,W
0116:  IORLW  80
0117:  SUBWF  22,F
0118:  BTFSC  03.0
0119:  GOTO   12B
011A:  MOVLW  01
011B:  SUBWF  23,F
011C:  BTFSC  03.0
011D:  GOTO   12B
011E:  INCF   23,F
011F:  MOVF   74,W
0120:  IORLW  80
0121:  ADDWF  22,F
0122:  MOVF   75,W
0123:  ADDWF  21,F
0124:  BTFSS  03.0
0125:  GOTO   109
0126:  INCF   22,F
0127:  BTFSS  03.2
0128:  GOTO   109
0129:  INCF   23,F
012A:  GOTO   109
012B:  BSF    7A.0
012C:  DECFSZ 24,F
012D:  GOTO   12F
012E:  GOTO   13A
012F:  BCF    03.0
0130:  RLF    20,F
0131:  RLF    21,F
0132:  RLF    22,F
0133:  RLF    23,F
0134:  BCF    03.0
0135:  RLF    7A,F
0136:  RLF    79,F
0137:  RLF    78,F
0138:  RLF    25,F
0139:  GOTO   0E6
013A:  BTFSS  25.0
013B:  GOTO   142
013C:  BCF    03.0
013D:  RRF    78,F
013E:  RRF    79,F
013F:  RRF    7A,F
0140:  RRF    25,F
0141:  GOTO   146
0142:  DECFSZ 77,F
0143:  GOTO   146
0144:  BCF    03.5
0145:  GOTO   18B
0146:  BTFSC  25.7
0147:  GOTO   16F
0148:  BCF    03.0
0149:  RLF    20,F
014A:  RLF    21,F
014B:  RLF    22,F
014C:  RLF    23,F
014D:  MOVF   76,W
014E:  SUBWF  20,F
014F:  BTFSC  03.0
0150:  GOTO   15B
0151:  MOVLW  01
0152:  SUBWF  21,F
0153:  BTFSC  03.0
0154:  GOTO   15B
0155:  SUBWF  22,F
0156:  BTFSC  03.0
0157:  GOTO   15B
0158:  SUBWF  23,F
0159:  BTFSS  03.0
015A:  GOTO   180
015B:  MOVF   75,W
015C:  SUBWF  21,F
015D:  BTFSC  03.0
015E:  GOTO   166
015F:  MOVLW  01
0160:  SUBWF  22,F
0161:  BTFSC  03.0
0162:  GOTO   166
0163:  SUBWF  23,F
0164:  BTFSS  03.0
0165:  GOTO   180
0166:  MOVF   74,W
0167:  IORLW  80
0168:  SUBWF  22,F
0169:  BTFSC  03.0
016A:  GOTO   16F
016B:  MOVLW  01
016C:  SUBWF  23,F
016D:  BTFSS  03.0
016E:  GOTO   180
016F:  INCF   7A,F
0170:  BTFSS  03.2
0171:  GOTO   180
0172:  INCF   79,F
0173:  BTFSS  03.2
0174:  GOTO   180
0175:  INCF   78,F
0176:  BTFSS  03.2
0177:  GOTO   180
0178:  INCF   77,F
0179:  BTFSS  03.2
017A:  GOTO   17D
017B:  BCF    03.5
017C:  GOTO   18B
017D:  RRF    78,F
017E:  RRF    79,F
017F:  RRF    7A,F
0180:  MOVF   70,W
0181:  MOVWF  24
0182:  MOVF   74,W
0183:  XORWF  24,F
0184:  BTFSS  24.7
0185:  GOTO   188
0186:  BSF    78.7
0187:  GOTO   190
0188:  BCF    78.7
0189:  GOTO   190
018A:  BCF    03.5
018B:  CLRF   77
018C:  CLRF   78
018D:  CLRF   79
018E:  CLRF   7A
018F:  BSF    03.5
0190:  BCF    03.5
0191:  RETURN
0192:  MOVF   6F,W
0193:  BTFSC  03.2
0194:  GOTO   211
0195:  BSF    03.5
0196:  MOVWF  20
0197:  MOVF   73,W
0198:  BTFSS  03.2
0199:  GOTO   19C
019A:  BCF    03.5
019B:  GOTO   211
019C:  ADDWF  20,F
019D:  BTFSC  03.0
019E:  GOTO   1AA
019F:  MOVLW  7F
01A0:  SUBWF  20,F
01A1:  BTFSC  03.0
01A2:  GOTO   1A5
01A3:  BCF    03.5
01A4:  GOTO   211
01A5:  BTFSS  03.2
01A6:  GOTO   1A9
01A7:  BCF    03.5
01A8:  GOTO   211
01A9:  GOTO   1B0
01AA:  MOVLW  81
01AB:  ADDWF  20,F
01AC:  BTFSS  03.0
01AD:  GOTO   1B0
01AE:  BCF    03.5
01AF:  GOTO   211
01B0:  MOVF   20,W
01B1:  MOVWF  77
01B2:  CLRF   78
01B3:  CLRF   79
01B4:  CLRF   7A
01B5:  MOVF   70,W
01B6:  MOVWF  24
01B7:  BSF    24.7
01B8:  MOVF   71,W
01B9:  MOVWF  23
01BA:  MOVF   72,W
01BB:  MOVWF  22
01BC:  MOVLW  18
01BD:  MOVWF  20
01BE:  CLRF   21
01BF:  BTFSS  22.0
01C0:  GOTO   1D9
01C1:  MOVF   76,W
01C2:  ADDWF  7A,F
01C3:  BTFSS  03.0
01C4:  GOTO   1CB
01C5:  INCF   79,F
01C6:  BTFSS  03.2
01C7:  GOTO   1CB
01C8:  INCF   78,F
01C9:  BTFSC  03.2
01CA:  BSF    21.7
01CB:  MOVF   75,W
01CC:  ADDWF  79,F
01CD:  BTFSS  03.0
01CE:  GOTO   1D2
01CF:  INCF   78,F
01D0:  BTFSC  03.2
01D1:  BSF    21.7
01D2:  MOVF   74,W
01D3:  MOVWF  71
01D4:  BSF    71.7
01D5:  MOVF   71,W
01D6:  ADDWF  78,F
01D7:  BTFSC  03.0
01D8:  BSF    21.7
01D9:  RLF    21,F
01DA:  RRF    78,F
01DB:  RRF    79,F
01DC:  RRF    7A,F
01DD:  RRF    24,F
01DE:  RRF    23,F
01DF:  RRF    22,F
01E0:  BCF    03.0
01E1:  DECFSZ 20,F
01E2:  GOTO   1BE
01E3:  MOVLW  01
01E4:  ADDWF  77,F
01E5:  BTFSS  03.0
01E6:  GOTO   1E9
01E7:  BCF    03.5
01E8:  GOTO   211
01E9:  BTFSC  78.7
01EA:  GOTO   1F3
01EB:  RLF    24,F
01EC:  RLF    7A,F
01ED:  RLF    79,F
01EE:  RLF    78,F
01EF:  DECFSZ 77,F
01F0:  GOTO   1F3
01F1:  BCF    03.5
01F2:  GOTO   211
01F3:  BTFSS  24.7
01F4:  GOTO   206
01F5:  INCF   7A,F
01F6:  BTFSS  03.2
01F7:  GOTO   206
01F8:  INCF   79,F
01F9:  BTFSS  03.2
01FA:  GOTO   206
01FB:  INCF   78,F
01FC:  BTFSS  03.2
01FD:  GOTO   206
01FE:  RRF    78,F
01FF:  RRF    79,F
0200:  RRF    7A,F
0201:  INCF   77,F
0202:  BTFSS  03.2
0203:  GOTO   206
0204:  BCF    03.5
0205:  GOTO   211
0206:  MOVF   70,W
0207:  MOVWF  21
0208:  MOVF   74,W
0209:  XORWF  21,F
020A:  BTFSS  21.7
020B:  GOTO   20E
020C:  BSF    78.7
020D:  GOTO   216
020E:  BCF    78.7
020F:  GOTO   216
0210:  BCF    03.5
0211:  CLRF   77
0212:  CLRF   78
0213:  CLRF   79
0214:  CLRF   7A
0215:  BSF    03.5
0216:  BCF    03.5
0217:  RETURN
0218:  MOVLW  80
0219:  BTFSC  03.1
021A:  XORWF  74,F
021B:  BSF    03.5
021C:  CLRF   22
021D:  CLRF   23
021E:  MOVF   70,W
021F:  MOVWF  21
0220:  MOVF   74,W
0221:  XORWF  21,F
0222:  BCF    03.5
0223:  MOVF   6F,W
0224:  BTFSC  03.2
0225:  GOTO   30E
0226:  BSF    03.5
0227:  MOVWF  20
0228:  MOVWF  77
0229:  MOVF   73,W
022A:  BTFSC  03.2
022B:  GOTO   318
022C:  SUBWF  20,F
022D:  BTFSC  03.2
022E:  GOTO   2B2
022F:  BTFSS  03.0
0230:  GOTO   26E
0231:  MOVF   74,W
0232:  MOVWF  26
0233:  BSF    26.7
0234:  MOVF   75,W
0235:  MOVWF  25
0236:  MOVF   76,W
0237:  MOVWF  24
0238:  CLRF   23
0239:  BCF    03.0
023A:  RRF    26,F
023B:  RRF    25,F
023C:  RRF    24,F
023D:  RRF    23,F
023E:  DECFSZ 20,F
023F:  GOTO   238
0240:  BTFSS  21.7
0241:  GOTO   245
0242:  BSF    22.0
0243:  GOTO   32E
0244:  BCF    22.0
0245:  BCF    20.0
0246:  BSF    22.4
0247:  MOVLW  72
0248:  MOVWF  04
0249:  BCF    03.7
024A:  GOTO   343
024B:  BCF    22.4
024C:  BTFSC  21.7
024D:  GOTO   258
024E:  BTFSS  20.0
024F:  GOTO   263
0250:  RRF    26,F
0251:  RRF    25,F
0252:  RRF    24,F
0253:  RRF    23,F
0254:  INCF   77,F
0255:  BTFSC  03.2
0256:  GOTO   329
0257:  GOTO   263
0258:  BTFSC  26.7
0259:  GOTO   266
025A:  BCF    03.0
025B:  RLF    23,F
025C:  RLF    24,F
025D:  RLF    25,F
025E:  RLF    26,F
025F:  DECF   77,F
0260:  BTFSC  03.2
0261:  GOTO   329
0262:  GOTO   258
0263:  BSF    22.6
0264:  GOTO   2D2
0265:  BCF    22.6
0266:  MOVF   70,W
0267:  MOVWF  21
0268:  BTFSS  21.7
0269:  GOTO   26C
026A:  BSF    26.7
026B:  GOTO   322
026C:  BCF    26.7
026D:  GOTO   322
026E:  MOVF   73,W
026F:  MOVWF  20
0270:  MOVWF  77
0271:  BCF    03.5
0272:  MOVF   6F,W
0273:  BSF    03.5
0274:  SUBWF  20,F
0275:  MOVF   70,W
0276:  MOVWF  26
0277:  BSF    26.7
0278:  MOVF   71,W
0279:  MOVWF  25
027A:  MOVF   72,W
027B:  MOVWF  24
027C:  CLRF   23
027D:  BCF    03.0
027E:  RRF    26,F
027F:  RRF    25,F
0280:  RRF    24,F
0281:  RRF    23,F
0282:  DECFSZ 20,F
0283:  GOTO   27C
0284:  BTFSS  21.7
0285:  GOTO   289
0286:  BSF    22.1
0287:  GOTO   32E
0288:  BCF    22.1
0289:  BCF    20.0
028A:  BSF    22.5
028B:  MOVLW  76
028C:  MOVWF  04
028D:  BCF    03.7
028E:  GOTO   343
028F:  BCF    22.5
0290:  BTFSC  21.7
0291:  GOTO   29C
0292:  BTFSS  20.0
0293:  GOTO   2A7
0294:  RRF    26,F
0295:  RRF    25,F
0296:  RRF    24,F
0297:  RRF    23,F
0298:  INCF   77,F
0299:  BTFSC  03.2
029A:  GOTO   329
029B:  GOTO   2A7
029C:  BTFSC  26.7
029D:  GOTO   2AA
029E:  BCF    03.0
029F:  RLF    23,F
02A0:  RLF    24,F
02A1:  RLF    25,F
02A2:  RLF    26,F
02A3:  DECF   77,F
02A4:  BTFSC  03.2
02A5:  GOTO   329
02A6:  GOTO   29C
02A7:  BSF    22.7
02A8:  GOTO   2D2
02A9:  BCF    22.7
02AA:  MOVF   74,W
02AB:  MOVWF  21
02AC:  BTFSS  21.7
02AD:  GOTO   2B0
02AE:  BSF    26.7
02AF:  GOTO   322
02B0:  BCF    26.7
02B1:  GOTO   322
02B2:  MOVF   74,W
02B3:  MOVWF  26
02B4:  BSF    26.7
02B5:  MOVF   75,W
02B6:  MOVWF  25
02B7:  MOVF   76,W
02B8:  MOVWF  24
02B9:  BTFSS  21.7
02BA:  GOTO   2BF
02BB:  BCF    26.7
02BC:  BSF    22.2
02BD:  GOTO   32E
02BE:  BCF    22.2
02BF:  CLRF   23
02C0:  BCF    20.0
02C1:  MOVLW  72
02C2:  MOVWF  04
02C3:  BCF    03.7
02C4:  GOTO   343
02C5:  BTFSC  21.7
02C6:  GOTO   2E8
02C7:  MOVF   70,W
02C8:  MOVWF  21
02C9:  BTFSS  20.0
02CA:  GOTO   2D2
02CB:  RRF    26,F
02CC:  RRF    25,F
02CD:  RRF    24,F
02CE:  RRF    23,F
02CF:  INCF   77,F
02D0:  BTFSC  03.2
02D1:  GOTO   329
02D2:  BTFSS  23.7
02D3:  GOTO   2E3
02D4:  INCF   24,F
02D5:  BTFSS  03.2
02D6:  GOTO   2E3
02D7:  INCF   25,F
02D8:  BTFSS  03.2
02D9:  GOTO   2E3
02DA:  INCF   26,F
02DB:  BTFSS  03.2
02DC:  GOTO   2E3
02DD:  RRF    26,F
02DE:  RRF    25,F
02DF:  RRF    24,F
02E0:  INCF   77,F
02E1:  BTFSC  03.2
02E2:  GOTO   329
02E3:  BTFSC  22.6
02E4:  GOTO   265
02E5:  BTFSC  22.7
02E6:  GOTO   2A9
02E7:  GOTO   307
02E8:  MOVLW  80
02E9:  XORWF  26,F
02EA:  BTFSS  26.7
02EB:  GOTO   2F0
02EC:  GOTO   32E
02ED:  MOVF   74,W
02EE:  MOVWF  21
02EF:  GOTO   2FD
02F0:  MOVF   70,W
02F1:  MOVWF  21
02F2:  MOVF   26,F
02F3:  BTFSS  03.2
02F4:  GOTO   2FD
02F5:  MOVF   25,F
02F6:  BTFSS  03.2
02F7:  GOTO   2FD
02F8:  MOVF   24,F
02F9:  BTFSS  03.2
02FA:  GOTO   2FD
02FB:  CLRF   77
02FC:  GOTO   322
02FD:  BTFSC  26.7
02FE:  GOTO   307
02FF:  BCF    03.0
0300:  RLF    23,F
0301:  RLF    24,F
0302:  RLF    25,F
0303:  RLF    26,F
0304:  DECFSZ 77,F
0305:  GOTO   2FD
0306:  GOTO   329
0307:  BTFSS  21.7
0308:  GOTO   30B
0309:  BSF    26.7
030A:  GOTO   322
030B:  BCF    26.7
030C:  GOTO   322
030D:  BCF    03.5
030E:  MOVF   73,W
030F:  MOVWF  77
0310:  MOVF   74,W
0311:  BSF    03.5
0312:  MOVWF  26
0313:  MOVF   75,W
0314:  MOVWF  25
0315:  MOVF   76,W
0316:  MOVWF  24
0317:  GOTO   322
0318:  BCF    03.5
0319:  MOVF   6F,W
031A:  MOVWF  77
031B:  MOVF   70,W
031C:  BSF    03.5
031D:  MOVWF  26
031E:  MOVF   71,W
031F:  MOVWF  25
0320:  MOVF   72,W
0321:  MOVWF  24
0322:  MOVF   26,W
0323:  MOVWF  78
0324:  MOVF   25,W
0325:  MOVWF  79
0326:  MOVF   24,W
0327:  MOVWF  7A
0328:  GOTO   361
0329:  CLRF   77
032A:  CLRF   78
032B:  CLRF   79
032C:  CLRF   7A
032D:  GOTO   361
032E:  CLRF   23
032F:  COMF   24,F
0330:  COMF   25,F
0331:  COMF   26,F
0332:  COMF   23,F
0333:  INCF   23,F
0334:  BTFSS  03.2
0335:  GOTO   33C
0336:  INCF   24,F
0337:  BTFSS  03.2
0338:  GOTO   33C
0339:  INCF   25,F
033A:  BTFSC  03.2
033B:  INCF   26,F
033C:  BTFSC  22.0
033D:  GOTO   244
033E:  BTFSC  22.1
033F:  GOTO   288
0340:  BTFSC  22.2
0341:  GOTO   2BE
0342:  GOTO   2ED
0343:  MOVF   00,W
0344:  ADDWF  24,F
0345:  BTFSS  03.0
0346:  GOTO   34D
0347:  INCF   25,F
0348:  BTFSS  03.2
0349:  GOTO   34D
034A:  INCF   26,F
034B:  BTFSC  03.2
034C:  BSF    20.0
034D:  DECF   04,F
034E:  MOVF   00,W
034F:  ADDWF  25,F
0350:  BTFSS  03.0
0351:  GOTO   355
0352:  INCF   26,F
0353:  BTFSC  03.2
0354:  BSF    20.0
0355:  DECF   04,F
0356:  MOVF   00,W
0357:  BTFSS  00.7
0358:  XORLW  80
0359:  ADDWF  26,F
035A:  BTFSC  03.0
035B:  BSF    20.0
035C:  BTFSC  22.4
035D:  GOTO   24B
035E:  BTFSC  22.5
035F:  GOTO   28F
0360:  GOTO   2C5
0361:  BCF    03.5
0362:  RETURN
*
06EC:  BCF    0A.0
06ED:  BSF    0A.1
06EE:  BSF    0A.2
06EF:  ADDWF  02,F
06F0:  GOTO   67C
06F1:  GOTO   687
06F2:  GOTO   6AF
06F3:  GOTO   6DF
06F4:  MOVLW  8E
06F5:  MOVWF  77
06F6:  MOVF   4B,W
06F7:  MOVWF  78
06F8:  MOVF   4A,W
06F9:  MOVWF  79
06FA:  CLRF   7A
06FB:  MOVF   78,F
06FC:  BTFSS  03.2
06FD:  GOTO   708
06FE:  MOVF   79,W
06FF:  MOVWF  78
0700:  CLRF   79
0701:  MOVLW  08
0702:  SUBWF  77,F
0703:  MOVF   78,F
0704:  BTFSS  03.2
0705:  GOTO   708
0706:  CLRF   77
0707:  GOTO   710
0708:  BCF    03.0
0709:  BTFSC  78.7
070A:  GOTO   70F
070B:  RLF    79,F
070C:  RLF    78,F
070D:  DECF   77,F
070E:  GOTO   708
070F:  BCF    78.7
0710:  RETURN
0711:  MOVLW  8E
0712:  MOVWF  77
0713:  MOVF   4A,W
0714:  SUBWF  77,F
0715:  MOVF   4B,W
0716:  MOVWF  79
0717:  MOVF   4C,W
0718:  MOVWF  78
0719:  BSF    79.7
071A:  MOVF   77,F
071B:  BTFSC  03.2
071C:  GOTO   728
071D:  BCF    03.0
071E:  MOVF   79,F
071F:  BTFSS  03.2
0720:  GOTO   724
0721:  MOVF   78,F
0722:  BTFSC  03.2
0723:  GOTO   728
0724:  RRF    79,F
0725:  RRF    78,F
0726:  DECFSZ 77,F
0727:  GOTO   71D
0728:  BTFSS  4B.7
0729:  GOTO   72F
072A:  COMF   78,F
072B:  COMF   79,F
072C:  INCF   78,F
072D:  BTFSC  03.2
072E:  INCF   79,F
072F:  RETURN
0730:  MOVF   0B,W
0731:  MOVWF  45
0732:  BCF    0B.7
0733:  BSF    03.5
0734:  BSF    03.6
0735:  BSF    0C.7
0736:  BSF    0C.0
0737:  NOP
0738:  NOP
0739:  BCF    03.5
073A:  BCF    03.6
073B:  BTFSC  45.7
073C:  BSF    0B.7
073D:  BTFSC  03.0
073E:  GOTO   768
073F:  BSF    03.6
0740:  MOVF   0C,W
0741:  ANDLW  7F
0742:  BCF    03.6
0743:  MOVWF  45
0744:  BSF    03.6
0745:  MOVF   0D,W
0746:  BCF    03.6
0747:  MOVWF  46
0748:  BSF    03.6
0749:  MOVF   0F,W
074A:  BCF    03.6
074B:  MOVWF  47
074C:  MOVF   45,W
074D:  BTFSS  0C.4
074E:  GOTO   74D
074F:  MOVWF  19
0750:  MOVF   46,W
0751:  BSF    03.6
0752:  MOVWF  0D
0753:  BCF    03.6
0754:  MOVF   47,W
0755:  BSF    03.6
0756:  MOVWF  0F
0757:  BCF    03.6
0758:  MOVF   0B,W
0759:  MOVWF  48
075A:  BCF    0B.7
075B:  BSF    03.5
075C:  BSF    03.6
075D:  BSF    0C.7
075E:  BSF    0C.0
075F:  NOP
0760:  NOP
0761:  BCF    03.5
0762:  BCF    03.6
0763:  BTFSC  48.7
0764:  BSF    0B.7
0765:  DECFSZ 44,F
0766:  GOTO   768
0767:  GOTO   788
0768:  BSF    03.6
0769:  RLF    0C,W
076A:  RLF    0E,W
076B:  ANDLW  7F
076C:  BCF    03.6
076D:  MOVWF  45
076E:  BSF    03.6
076F:  MOVF   0D,W
0770:  BCF    03.6
0771:  MOVWF  46
0772:  BSF    03.6
0773:  MOVF   0F,W
0774:  BCF    03.6
0775:  MOVWF  47
0776:  MOVF   45,W
0777:  BTFSS  0C.4
0778:  GOTO   777
0779:  MOVWF  19
077A:  MOVF   46,W
077B:  BSF    03.6
077C:  MOVWF  0D
077D:  BCF    03.6
077E:  MOVF   47,W
077F:  BSF    03.6
0780:  MOVWF  0F
0781:  INCF   0D,F
0782:  BTFSC  03.2
0783:  INCF   0F,F
0784:  BCF    03.0
0785:  BCF    03.6
0786:  DECFSZ 44,F
0787:  GOTO   730
0788:  RETURN
0789:  CLRF   4C
078A:  MOVF   04,W
078B:  MOVWF  4B
078C:  BCF    4C.0
078D:  BTFSC  03.7
078E:  BSF    4C.0
078F:  SWAPF  45,W
0790:  IORLW  F0
0791:  MOVWF  47
0792:  ADDWF  47,F
0793:  ADDLW  E2
0794:  MOVWF  48
0795:  ADDLW  32
0796:  MOVWF  4A
0797:  MOVF   45,W
0798:  ANDLW  0F
0799:  ADDWF  48,F
079A:  ADDWF  48,F
079B:  ADDWF  4A,F
079C:  ADDLW  E9
079D:  MOVWF  49
079E:  ADDWF  49,F
079F:  ADDWF  49,F
07A0:  SWAPF  44,W
07A1:  ANDLW  0F
07A2:  ADDWF  49,F
07A3:  ADDWF  4A,F
07A4:  RLF    49,F
07A5:  RLF    4A,F
07A6:  COMF   4A,F
07A7:  RLF    4A,F
07A8:  MOVF   44,W
07A9:  ANDLW  0F
07AA:  ADDWF  4A,F
07AB:  RLF    47,F
07AC:  MOVLW  07
07AD:  MOVWF  46
07AE:  MOVLW  0A
07AF:  ADDWF  4A,F
07B0:  DECF   49,F
07B1:  BTFSS  03.0
07B2:  GOTO   7AF
07B3:  ADDWF  49,F
07B4:  DECF   48,F
07B5:  BTFSS  03.0
07B6:  GOTO   7B3
07B7:  ADDWF  48,F
07B8:  DECF   47,F
07B9:  BTFSS  03.0
07BA:  GOTO   7B7
07BB:  ADDWF  47,F
07BC:  DECF   46,F
07BD:  BTFSS  03.0
07BE:  GOTO   7BB
07BF:  MOVLW  46
07C0:  MOVWF  04
07C1:  BCF    03.7
07C2:  MOVLW  07
07C3:  ANDWF  4B,W
07C4:  BCF    4B.6
07C5:  ADDWF  04,F
07C6:  MOVLW  4A
07C7:  SUBWF  04,W
07C8:  BTFSC  03.2
07C9:  BSF    4B.6
07CA:  MOVF   00,W
07CB:  MOVWF  77
07CC:  BTFSS  03.2
07CD:  GOTO   7D6
07CE:  BTFSC  4B.6
07CF:  GOTO   7D6
07D0:  BTFSC  4B.4
07D1:  GOTO   7DE
07D2:  BTFSC  4B.3
07D3:  GOTO   7D6
07D4:  MOVLW  20
07D5:  GOTO   7D9
07D6:  BSF    4B.3
07D7:  BCF    4B.4
07D8:  MOVLW  30
07D9:  ADDWF  77,F
07DA:  MOVF   77,W
07DB:  BTFSS  0C.4
07DC:  GOTO   7DB
07DD:  MOVWF  19
07DE:  INCF   04,F
07DF:  BTFSS  4B.6
07E0:  GOTO   7C6
07E1:  RETURN
....................  
.................... #list 
....................  
.................... #device ADC=10 
....................  
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal=20000000) 
07E2:  MOVLW  45
07E3:  MOVWF  04
07E4:  BCF    03.7
07E5:  MOVF   00,W
07E6:  BTFSC  03.2
07E7:  GOTO   7F5
07E8:  MOVLW  06
07E9:  MOVWF  78
07EA:  CLRF   77
07EB:  DECFSZ 77,F
07EC:  GOTO   7EB
07ED:  DECFSZ 78,F
07EE:  GOTO   7EA
07EF:  MOVLW  7B
07F0:  MOVWF  77
07F1:  DECFSZ 77,F
07F2:  GOTO   7F1
07F3:  DECFSZ 00,F
07F4:  GOTO   7E8
07F5:  BSF    0A.3
07F6:  BCF    0A.4
07F7:  GOTO   3DF (RETURN)
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=PORT1) 
....................  
.................... #include <math.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2011 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does   //// 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////  * 6/19/2010 :  Divisions by constants converted to multiplication //// 
.................... ////                 by its inverse to improve computation speed        //// 
.................... ////  * 1/21/2011 :  Constants used for double precision math updated   //// 
.................... ////                 Updated routines include 64 bit versions of cos,   //// 
.................... ////                 asin,atan,exp,log and dependant functions          //// 
.................... ////  * 1/31/2011 :  Optimized current 32-bit float routines for cos    //// 
.................... ////                 and log function                                   //// 
.................... ////  * 6/13/2011 :  Fixed PCD overload CEIL_FLOOR functions for values //// 
.................... ////                 greater then 10000000 and less then -10000000      //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float32)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    {  
....................       l = (unsigned int16)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float32)l); 
....................       res = 32768.0*(float32)l; 
....................       res += (float32)(unsigned int16)y; 
....................    } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float32)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int32 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float48)(unsigned int16)y; 
....................  
....................    else if (y < 549755813888.0) 
....................    { 
....................       l = (unsigned int32)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float48)l); 
....................       res = 32768.0*(float48)l; 
....................       res += (float48)(unsigned int16)y; 
....................    } 
....................    else 
....................    {   
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float48)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    int64 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float64)(unsigned int16)y; 
....................    else if (y < 4503599627370496.0) 
....................    { 
....................       l = (int64)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float64)l); 
....................       res = 32768.0*(float64)l; 
....................       res += (float64)(unsigned int16)y; 
....................    } 
....................    else 
....................    { 
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float64)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................     
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x,0); 
.................... } 
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
.................... #define LN2_INV 1.4426950408889634073 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y*LN2_INV - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y*LN2_INV - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 const pe_64[12] ={9.30741400474913e-011,-4.28655416283316e-011, 
....................                           8.71486547014137e-009,9.84458531538385e-008, 
....................                           1.32588296983536e-006,1.52489283823016e-005, 
....................                           0.000154037598423921,0.00133335487036216, 
....................                           0.00961812936407326,0.0555041086222122, 
....................                           0.240226506962827,0.693147180559823}; 
....................  
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x*LN2_INV; 
....................    n = (signed int16)y; 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y*LN2_INV - (float64)n; 
....................  
....................    r = pe_64[0]*y + pe_64[1]; 
....................    r = r*y + pe_64[2]; 
....................    r = r*y + pe_64[3]; 
....................    r = r*y + pe_64[4]; 
....................    r = r*y + pe_64[5]; 
....................    r = r*y + pe_64[6]; 
....................    r = r*y + pe_64[7]; 
....................    r = r*y + pe_64[8]; 
....................    r = r*y + pe_64[9]; 
....................    r = r*y + pe_64[10]; 
....................    r = r*y + pe_64[11]; 
....................     
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {-1.080310025160955, 1.999999947089217}; 
.................... float32 const ql[4] = {0.091284365719509, -0.873491916557671}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................      bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... // Overloaded function log() for data type - float64 
.................... float64 const pl_64[4] = {-0.145694052150681, 1.365485300000370, 
....................                           -3.120535668274329, 2.000000000000000}; 
....................  
.................... float64 const ql_64[4] = {0.006047500465908, -0.208298281937234, 
....................                           1.113943039156721, -1.893601167470470}; 
....................  
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
.................... #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
.................... #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................  
.................... #if !defined(__PCD__) 
....................       *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................  
....................       if(bit_test(data2,7)) 
....................       bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0;  
....................       res = y*res/r; 
....................  
....................       data1 = *(((unsigned int8 *)(&x)+5)); 
....................       rotate_left(&data1,1); 
....................       data2 = *(((unsigned int8 *)(&x)+4)); 
....................       if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................        
....................       n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................       r = -(float48)-n; 
....................       else 
....................       r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................    res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................          bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
.................... #define LN10_INV 0.4342944819032518276 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } else return 0; 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } else return 0; 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } else return 0; 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } else return 0; 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } else return 0; 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................       bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................         bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO_INV 
.................... #undef PI_DIV_BY_TWO_INV 
.................... #endif 
.................... #define PI_DIV_BY_TWO_INV 0.63661977236758134 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #endif 
.................... #define TWOBYPI          0.6366197723675813 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[5] = {                    //by the series definition for cosine 
....................       -0.49999999456337096,            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166663896921267, 
....................       -0.00138883894522527, 
....................        0.00002476138231734, 
....................       -0.00000026070414770 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 4; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float64 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p_64[9] = {               //by the series definition for cosine 
....................      -0.49999999999998740,           // sum ( ( (-1)^n * x^2n )/(2n)! )              
....................       0.04166666666656518, 
....................      -0.00138888888851691, 
....................       0.00002480158658490, 
....................      -0.00000027557239796, 
....................       0.00000000208715031, 
....................      -0.00000000001126577, 
....................       0.00000000000000427, 
....................       0.00000000000000372}; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 8; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p_64[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... double pas_64[5]={1.000000000000000,-2.069938587724477,1.421444580548907, 
....................                  -0.360690137621842,0.024929451660228}; 
....................  
.................... double qas_64[5]={-2.236605254391134,1.719212122946451,-0.524122954476133, 
....................                    0.052808872045749,-0.000662536036570}; 
....................                     
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas_64[4]*y2 + pas_64[3]; 
....................    res = res*y2 + pas_64[2]; 
....................    res = res*y2 + pas_64[1]; 
....................    res = res*y2 + pas_64[0]; 
....................  
....................    r = qas_64[4]*y2 + qas_64[3]; 
....................    r = r*y2 + qas_64[2]; 
....................    r = r*y2 + qas_64[1]; 
....................    r = r*y2 + qas_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
*
0363:  BCF    6A.0
....................    flag = 0; 
0364:  BCF    6A.1
....................    y = x; 
0365:  MOVF   5D,W
0366:  MOVWF  61
0367:  MOVF   5C,W
0368:  MOVWF  60
0369:  MOVF   5B,W
036A:  MOVWF  5F
036B:  MOVF   5A,W
036C:  MOVWF  5E
....................  
....................    if (x < 0) 
036D:  MOVF   5D,W
036E:  MOVWF  6E
036F:  MOVF   5C,W
0370:  MOVWF  6D
0371:  MOVF   5B,W
0372:  MOVWF  6C
0373:  MOVF   5A,W
0374:  MOVWF  6B
0375:  CLRF   72
0376:  CLRF   71
0377:  CLRF   70
0378:  CLRF   6F
0379:  CALL   07A
037A:  BTFSS  03.0
037B:  GOTO   380
....................    { 
....................       s = 1; 
037C:  BSF    6A.0
....................       y = -y; 
037D:  MOVF   5F,W
037E:  XORLW  80
037F:  MOVWF  5F
....................    } 
....................  
....................    if (y > 1.0) 
0380:  CLRF   6E
0381:  CLRF   6D
0382:  CLRF   6C
0383:  MOVLW  7F
0384:  MOVWF  6B
0385:  MOVF   61,W
0386:  MOVWF  72
0387:  MOVF   60,W
0388:  MOVWF  71
0389:  MOVF   5F,W
038A:  MOVWF  70
038B:  MOVF   5E,W
038C:  MOVWF  6F
038D:  CALL   07A
038E:  BTFSS  03.0
038F:  GOTO   3A7
....................    { 
....................       y = 1.0/y; 
0390:  CLRF   72
0391:  CLRF   71
0392:  CLRF   70
0393:  MOVLW  7F
0394:  MOVWF  6F
0395:  MOVF   61,W
0396:  MOVWF  76
0397:  MOVF   60,W
0398:  MOVWF  75
0399:  MOVF   5F,W
039A:  MOVWF  74
039B:  MOVF   5E,W
039C:  MOVWF  73
039D:  CALL   0B9
039E:  MOVF   7A,W
039F:  MOVWF  61
03A0:  MOVF   79,W
03A1:  MOVWF  60
03A2:  MOVF   78,W
03A3:  MOVWF  5F
03A4:  MOVF   77,W
03A5:  MOVWF  5E
....................       flag = 1; 
03A6:  BSF    6A.1
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
03A7:  MOVLW  0A
03A8:  MOVWF  72
03A9:  MOVLW  89
03AA:  MOVWF  71
03AB:  MOVLW  34
03AC:  MOVWF  70
03AD:  MOVLW  7C
03AE:  MOVWF  6F
03AF:  MOVF   61,W
03B0:  MOVWF  76
03B1:  MOVF   60,W
03B2:  MOVWF  75
03B3:  MOVF   5F,W
03B4:  MOVWF  74
03B5:  MOVF   5E,W
03B6:  MOVWF  73
03B7:  CALL   192
03B8:  MOVF   7A,W
03B9:  MOVWF  6E
03BA:  MOVF   79,W
03BB:  MOVWF  6D
03BC:  MOVF   78,W
03BD:  MOVWF  6C
03BE:  MOVF   77,W
03BF:  MOVWF  6B
03C0:  MOVF   7A,W
03C1:  MOVWF  72
03C2:  MOVF   79,W
03C3:  MOVWF  71
03C4:  MOVF   78,W
03C5:  MOVWF  70
03C6:  MOVF   77,W
03C7:  MOVWF  6F
03C8:  MOVF   61,W
03C9:  MOVWF  76
03CA:  MOVF   60,W
03CB:  MOVWF  75
03CC:  MOVF   5F,W
03CD:  MOVWF  74
03CE:  MOVF   5E,W
03CF:  MOVWF  73
03D0:  CALL   192
03D1:  MOVF   7A,W
03D2:  MOVWF  6E
03D3:  MOVF   79,W
03D4:  MOVWF  6D
03D5:  MOVF   78,W
03D6:  MOVWF  6C
03D7:  MOVF   77,W
03D8:  MOVWF  6B
03D9:  BCF    03.1
03DA:  MOVF   7A,W
03DB:  MOVWF  72
03DC:  MOVF   79,W
03DD:  MOVWF  71
03DE:  MOVF   78,W
03DF:  MOVWF  70
03E0:  MOVF   77,W
03E1:  MOVWF  6F
03E2:  MOVLW  7C
03E3:  MOVWF  76
03E4:  MOVLW  79
03E5:  MOVWF  75
03E6:  MOVLW  35
03E7:  MOVWF  74
03E8:  MOVLW  81
03E9:  MOVWF  73
03EA:  CALL   218
03EB:  MOVF   7A,W
03EC:  MOVWF  65
03ED:  MOVF   79,W
03EE:  MOVWF  64
03EF:  MOVF   78,W
03F0:  MOVWF  63
03F1:  MOVF   77,W
03F2:  MOVWF  62
....................    res = res*y*y + pat[2]; 
03F3:  MOVF   65,W
03F4:  MOVWF  72
03F5:  MOVF   64,W
03F6:  MOVWF  71
03F7:  MOVF   63,W
03F8:  MOVWF  70
03F9:  MOVF   62,W
03FA:  MOVWF  6F
03FB:  MOVF   61,W
03FC:  MOVWF  76
03FD:  MOVF   60,W
03FE:  MOVWF  75
03FF:  MOVF   5F,W
0400:  MOVWF  74
0401:  MOVF   5E,W
0402:  MOVWF  73
0403:  CALL   192
0404:  MOVF   7A,W
0405:  MOVWF  6E
0406:  MOVF   79,W
0407:  MOVWF  6D
0408:  MOVF   78,W
0409:  MOVWF  6C
040A:  MOVF   77,W
040B:  MOVWF  6B
040C:  MOVF   7A,W
040D:  MOVWF  72
040E:  MOVF   79,W
040F:  MOVWF  71
0410:  MOVF   78,W
0411:  MOVWF  70
0412:  MOVF   77,W
0413:  MOVWF  6F
0414:  MOVF   61,W
0415:  MOVWF  76
0416:  MOVF   60,W
0417:  MOVWF  75
0418:  MOVF   5F,W
0419:  MOVWF  74
041A:  MOVF   5E,W
041B:  MOVWF  73
041C:  CALL   192
041D:  MOVF   7A,W
041E:  MOVWF  6E
041F:  MOVF   79,W
0420:  MOVWF  6D
0421:  MOVF   78,W
0422:  MOVWF  6C
0423:  MOVF   77,W
0424:  MOVWF  6B
0425:  BCF    03.1
0426:  MOVF   7A,W
0427:  MOVWF  72
0428:  MOVF   79,W
0429:  MOVWF  71
042A:  MOVF   78,W
042B:  MOVWF  70
042C:  MOVF   77,W
042D:  MOVWF  6F
042E:  MOVLW  3F
042F:  MOVWF  76
0430:  MOVLW  02
0431:  MOVWF  75
0432:  MOVLW  33
0433:  MOVWF  74
0434:  MOVLW  83
0435:  MOVWF  73
0436:  CALL   218
0437:  MOVF   7A,W
0438:  MOVWF  65
0439:  MOVF   79,W
043A:  MOVWF  64
043B:  MOVF   78,W
043C:  MOVWF  63
043D:  MOVF   77,W
043E:  MOVWF  62
....................    res = res*y*y + pat[3]; 
043F:  MOVF   65,W
0440:  MOVWF  72
0441:  MOVF   64,W
0442:  MOVWF  71
0443:  MOVF   63,W
0444:  MOVWF  70
0445:  MOVF   62,W
0446:  MOVWF  6F
0447:  MOVF   61,W
0448:  MOVWF  76
0449:  MOVF   60,W
044A:  MOVWF  75
044B:  MOVF   5F,W
044C:  MOVWF  74
044D:  MOVF   5E,W
044E:  MOVWF  73
044F:  CALL   192
0450:  MOVF   7A,W
0451:  MOVWF  6E
0452:  MOVF   79,W
0453:  MOVWF  6D
0454:  MOVF   78,W
0455:  MOVWF  6C
0456:  MOVF   77,W
0457:  MOVWF  6B
0458:  MOVF   7A,W
0459:  MOVWF  72
045A:  MOVF   79,W
045B:  MOVWF  71
045C:  MOVF   78,W
045D:  MOVWF  70
045E:  MOVF   77,W
045F:  MOVWF  6F
0460:  MOVF   61,W
0461:  MOVWF  76
0462:  MOVF   60,W
0463:  MOVWF  75
0464:  MOVF   5F,W
0465:  MOVWF  74
0466:  MOVF   5E,W
0467:  MOVWF  73
0468:  CALL   192
0469:  MOVF   7A,W
046A:  MOVWF  6E
046B:  MOVF   79,W
046C:  MOVWF  6D
046D:  MOVF   78,W
046E:  MOVWF  6C
046F:  MOVF   77,W
0470:  MOVWF  6B
0471:  BCF    03.1
0472:  MOVF   7A,W
0473:  MOVWF  72
0474:  MOVF   79,W
0475:  MOVWF  71
0476:  MOVF   78,W
0477:  MOVWF  70
0478:  MOVF   77,W
0479:  MOVWF  6F
047A:  MOVLW  33
047B:  MOVWF  76
047C:  MOVLW  8C
047D:  MOVWF  75
047E:  MOVLW  1E
047F:  MOVWF  74
0480:  MOVLW  83
0481:  MOVWF  73
0482:  CALL   218
0483:  MOVF   7A,W
0484:  MOVWF  65
0485:  MOVF   79,W
0486:  MOVWF  64
0487:  MOVF   78,W
0488:  MOVWF  63
0489:  MOVF   77,W
048A:  MOVWF  62
....................  
....................    r = qat[0]*y*y + qat[1]; 
048B:  CLRF   72
048C:  CLRF   71
048D:  CLRF   70
048E:  MOVLW  7F
048F:  MOVWF  6F
0490:  MOVF   61,W
0491:  MOVWF  76
0492:  MOVF   60,W
0493:  MOVWF  75
0494:  MOVF   5F,W
0495:  MOVWF  74
0496:  MOVF   5E,W
0497:  MOVWF  73
0498:  CALL   192
0499:  MOVF   7A,W
049A:  MOVWF  6E
049B:  MOVF   79,W
049C:  MOVWF  6D
049D:  MOVF   78,W
049E:  MOVWF  6C
049F:  MOVF   77,W
04A0:  MOVWF  6B
04A1:  MOVF   7A,W
04A2:  MOVWF  72
04A3:  MOVF   79,W
04A4:  MOVWF  71
04A5:  MOVF   78,W
04A6:  MOVWF  70
04A7:  MOVF   77,W
04A8:  MOVWF  6F
04A9:  MOVF   61,W
04AA:  MOVWF  76
04AB:  MOVF   60,W
04AC:  MOVWF  75
04AD:  MOVF   5F,W
04AE:  MOVWF  74
04AF:  MOVF   5E,W
04B0:  MOVWF  73
04B1:  CALL   192
04B2:  MOVF   7A,W
04B3:  MOVWF  6E
04B4:  MOVF   79,W
04B5:  MOVWF  6D
04B6:  MOVF   78,W
04B7:  MOVWF  6C
04B8:  MOVF   77,W
04B9:  MOVWF  6B
04BA:  BCF    03.1
04BB:  MOVF   7A,W
04BC:  MOVWF  72
04BD:  MOVF   79,W
04BE:  MOVWF  71
04BF:  MOVF   78,W
04C0:  MOVWF  70
04C1:  MOVF   77,W
04C2:  MOVWF  6F
04C3:  MOVLW  1B
04C4:  MOVWF  76
04C5:  MOVLW  E4
04C6:  MOVWF  75
04C7:  MOVLW  35
04C8:  MOVWF  74
04C9:  MOVLW  82
04CA:  MOVWF  73
04CB:  CALL   218
04CC:  MOVF   7A,W
04CD:  MOVWF  69
04CE:  MOVF   79,W
04CF:  MOVWF  68
04D0:  MOVF   78,W
04D1:  MOVWF  67
04D2:  MOVF   77,W
04D3:  MOVWF  66
....................    r = r*y*y + qat[2]; 
04D4:  MOVF   69,W
04D5:  MOVWF  72
04D6:  MOVF   68,W
04D7:  MOVWF  71
04D8:  MOVF   67,W
04D9:  MOVWF  70
04DA:  MOVF   66,W
04DB:  MOVWF  6F
04DC:  MOVF   61,W
04DD:  MOVWF  76
04DE:  MOVF   60,W
04DF:  MOVWF  75
04E0:  MOVF   5F,W
04E1:  MOVWF  74
04E2:  MOVF   5E,W
04E3:  MOVWF  73
04E4:  CALL   192
04E5:  MOVF   7A,W
04E6:  MOVWF  6E
04E7:  MOVF   79,W
04E8:  MOVWF  6D
04E9:  MOVF   78,W
04EA:  MOVWF  6C
04EB:  MOVF   77,W
04EC:  MOVWF  6B
04ED:  MOVF   7A,W
04EE:  MOVWF  72
04EF:  MOVF   79,W
04F0:  MOVWF  71
04F1:  MOVF   78,W
04F2:  MOVWF  70
04F3:  MOVF   77,W
04F4:  MOVWF  6F
04F5:  MOVF   61,W
04F6:  MOVWF  76
04F7:  MOVF   60,W
04F8:  MOVWF  75
04F9:  MOVF   5F,W
04FA:  MOVWF  74
04FB:  MOVF   5E,W
04FC:  MOVWF  73
04FD:  CALL   192
04FE:  MOVF   7A,W
04FF:  MOVWF  6E
0500:  MOVF   79,W
0501:  MOVWF  6D
0502:  MOVF   78,W
0503:  MOVWF  6C
0504:  MOVF   77,W
0505:  MOVWF  6B
0506:  BCF    03.1
0507:  MOVF   7A,W
0508:  MOVWF  72
0509:  MOVF   79,W
050A:  MOVWF  71
050B:  MOVF   78,W
050C:  MOVWF  70
050D:  MOVF   77,W
050E:  MOVWF  6F
050F:  MOVLW  A4
0510:  MOVWF  76
0511:  MOVLW  DB
0512:  MOVWF  75
0513:  MOVLW  67
0514:  MOVWF  74
0515:  MOVLW  83
0516:  MOVWF  73
0517:  CALL   218
0518:  MOVF   7A,W
0519:  MOVWF  69
051A:  MOVF   79,W
051B:  MOVWF  68
051C:  MOVF   78,W
051D:  MOVWF  67
051E:  MOVF   77,W
051F:  MOVWF  66
....................    r = r*y*y + qat[3]; 
0520:  MOVF   69,W
0521:  MOVWF  72
0522:  MOVF   68,W
0523:  MOVWF  71
0524:  MOVF   67,W
0525:  MOVWF  70
0526:  MOVF   66,W
0527:  MOVWF  6F
0528:  MOVF   61,W
0529:  MOVWF  76
052A:  MOVF   60,W
052B:  MOVWF  75
052C:  MOVF   5F,W
052D:  MOVWF  74
052E:  MOVF   5E,W
052F:  MOVWF  73
0530:  CALL   192
0531:  MOVF   7A,W
0532:  MOVWF  6E
0533:  MOVF   79,W
0534:  MOVWF  6D
0535:  MOVF   78,W
0536:  MOVWF  6C
0537:  MOVF   77,W
0538:  MOVWF  6B
0539:  MOVF   7A,W
053A:  MOVWF  72
053B:  MOVF   79,W
053C:  MOVWF  71
053D:  MOVF   78,W
053E:  MOVWF  70
053F:  MOVF   77,W
0540:  MOVWF  6F
0541:  MOVF   61,W
0542:  MOVWF  76
0543:  MOVF   60,W
0544:  MOVWF  75
0545:  MOVF   5F,W
0546:  MOVWF  74
0547:  MOVF   5E,W
0548:  MOVWF  73
0549:  CALL   192
054A:  MOVF   7A,W
054B:  MOVWF  6E
054C:  MOVF   79,W
054D:  MOVWF  6D
054E:  MOVF   78,W
054F:  MOVWF  6C
0550:  MOVF   77,W
0551:  MOVWF  6B
0552:  BCF    03.1
0553:  MOVF   7A,W
0554:  MOVWF  72
0555:  MOVF   79,W
0556:  MOVWF  71
0557:  MOVF   78,W
0558:  MOVWF  70
0559:  MOVF   77,W
055A:  MOVWF  6F
055B:  MOVLW  33
055C:  MOVWF  76
055D:  MOVLW  8C
055E:  MOVWF  75
055F:  MOVLW  1E
0560:  MOVWF  74
0561:  MOVLW  83
0562:  MOVWF  73
0563:  CALL   218
0564:  MOVF   7A,W
0565:  MOVWF  69
0566:  MOVF   79,W
0567:  MOVWF  68
0568:  MOVF   78,W
0569:  MOVWF  67
056A:  MOVF   77,W
056B:  MOVWF  66
....................  
....................    res = y*res/r; 
056C:  MOVF   61,W
056D:  MOVWF  72
056E:  MOVF   60,W
056F:  MOVWF  71
0570:  MOVF   5F,W
0571:  MOVWF  70
0572:  MOVF   5E,W
0573:  MOVWF  6F
0574:  MOVF   65,W
0575:  MOVWF  76
0576:  MOVF   64,W
0577:  MOVWF  75
0578:  MOVF   63,W
0579:  MOVWF  74
057A:  MOVF   62,W
057B:  MOVWF  73
057C:  CALL   192
057D:  MOVF   7A,W
057E:  MOVWF  6E
057F:  MOVF   79,W
0580:  MOVWF  6D
0581:  MOVF   78,W
0582:  MOVWF  6C
0583:  MOVF   77,W
0584:  MOVWF  6B
0585:  MOVF   7A,W
0586:  MOVWF  72
0587:  MOVF   79,W
0588:  MOVWF  71
0589:  MOVF   78,W
058A:  MOVWF  70
058B:  MOVF   77,W
058C:  MOVWF  6F
058D:  MOVF   69,W
058E:  MOVWF  76
058F:  MOVF   68,W
0590:  MOVWF  75
0591:  MOVF   67,W
0592:  MOVWF  74
0593:  MOVF   66,W
0594:  MOVWF  73
0595:  CALL   0B9
0596:  MOVF   7A,W
0597:  MOVWF  65
0598:  MOVF   79,W
0599:  MOVWF  64
059A:  MOVF   78,W
059B:  MOVWF  63
059C:  MOVF   77,W
059D:  MOVWF  62
....................  
....................  
....................    if (flag)                              // for |x| > 1 
059E:  BTFSS  6A.1
059F:  GOTO   5BA
....................       res = PI_DIV_BY_TWO - res; 
05A0:  BSF    03.1
05A1:  MOVLW  DB
05A2:  MOVWF  72
05A3:  MOVLW  0F
05A4:  MOVWF  71
05A5:  MOVLW  49
05A6:  MOVWF  70
05A7:  MOVLW  7F
05A8:  MOVWF  6F
05A9:  MOVF   65,W
05AA:  MOVWF  76
05AB:  MOVF   64,W
05AC:  MOVWF  75
05AD:  MOVF   63,W
05AE:  MOVWF  74
05AF:  MOVF   62,W
05B0:  MOVWF  73
05B1:  CALL   218
05B2:  MOVF   7A,W
05B3:  MOVWF  65
05B4:  MOVF   79,W
05B5:  MOVWF  64
05B6:  MOVF   78,W
05B7:  MOVWF  63
05B8:  MOVF   77,W
05B9:  MOVWF  62
....................    if (s) 
05BA:  BTFSS  6A.0
05BB:  GOTO   5BF
....................       res = -res; 
05BC:  MOVF   63,W
05BD:  XORLW  80
05BE:  MOVWF  63
....................  
....................    return(res); 
05BF:  MOVF   62,W
05C0:  MOVWF  77
05C1:  MOVF   63,W
05C2:  MOVWF  78
05C3:  MOVF   64,W
05C4:  MOVWF  79
05C5:  MOVF   65,W
05C6:  MOVWF  7A
05C7:  RETURN
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 pat_64[6]={0.999999999999999,2.249923645595566,1.771541617806449, 
....................                    0.579678874003185,0.072162702162882,0.002281100141660}; 
....................  
.................... float64 qat_64[6]={2.583256978928510,2.432627277466967,1.016760379885393, 
....................                    0.182482977188688,0.011155377971690,0.000100013019160}; 
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y,y2, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................    y2 = y*y; 
....................    res = pat_64[5]*y2 + pat_64[4]; 
....................    res = res*y2 + pat_64[3]; 
....................    res = res*y2 + pat_64[2]; 
....................    res = res*y2 + pat_64[1]; 
....................    res = res*y2 + pat_64[0]; 
....................  
....................    r = qat_64[5]*y2 + qat_64[4]; 
....................    r = r*y2 + qat_64[3]; 
....................    r = r*y2 + qat_64[2]; 
....................    r = r*y2 + qat_64[1]; 
....................    r = r*y2 + qat_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
05C8:  BCF    58.0
....................    quad=0; //quadrant 
05C9:  CLRF   59
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
05CA:  MOVF   4F,W
05CB:  MOVWF  6E
05CC:  MOVF   4E,W
05CD:  MOVWF  6D
05CE:  MOVF   4D,W
05CF:  MOVWF  6C
05D0:  MOVF   4C,W
05D1:  MOVWF  6B
05D2:  CLRF   72
05D3:  CLRF   71
05D4:  CLRF   70
05D5:  CLRF   6F
05D6:  CALL   07A
05D7:  BTFSC  03.0
05D8:  GOTO   5DB
05D9:  BTFSS  03.2
05DA:  GOTO   5F0
05DB:  MOVF   53,W
05DC:  MOVWF  6E
05DD:  MOVF   52,W
05DE:  MOVWF  6D
05DF:  MOVF   51,W
05E0:  MOVWF  6C
05E1:  MOVF   50,W
05E2:  MOVWF  6B
05E3:  CLRF   72
05E4:  CLRF   71
05E5:  CLRF   70
05E6:  CLRF   6F
05E7:  CALL   07A
05E8:  BTFSC  03.0
05E9:  GOTO   5EC
05EA:  BTFSS  03.2
05EB:  GOTO   5EE
05EC:  MOVLW  03
05ED:  GOTO   5EF
05EE:  MOVLW  04
05EF:  GOTO   602
05F0:  MOVF   53,W
05F1:  MOVWF  6E
05F2:  MOVF   52,W
05F3:  MOVWF  6D
05F4:  MOVF   51,W
05F5:  MOVWF  6C
05F6:  MOVF   50,W
05F7:  MOVWF  6B
05F8:  CLRF   72
05F9:  CLRF   71
05FA:  CLRF   70
05FB:  CLRF   6F
05FC:  CALL   07A
05FD:  BTFSS  03.0
05FE:  GOTO   601
05FF:  MOVLW  02
0600:  GOTO   602
0601:  MOVLW  01
0602:  MOVWF  59
....................    if(y<0.0) 
0603:  MOVF   4F,W
0604:  MOVWF  6E
0605:  MOVF   4E,W
0606:  MOVWF  6D
0607:  MOVF   4D,W
0608:  MOVWF  6C
0609:  MOVF   4C,W
060A:  MOVWF  6B
060B:  CLRF   72
060C:  CLRF   71
060D:  CLRF   70
060E:  CLRF   6F
060F:  CALL   07A
0610:  BTFSS  03.0
0611:  GOTO   616
....................    { 
....................       sign=1; 
0612:  BSF    58.0
....................       y=-y; 
0613:  MOVF   4D,W
0614:  XORLW  80
0615:  MOVWF  4D
....................    } 
....................    if(x<0.0) 
0616:  MOVF   53,W
0617:  MOVWF  6E
0618:  MOVF   52,W
0619:  MOVWF  6D
061A:  MOVF   51,W
061B:  MOVWF  6C
061C:  MOVF   50,W
061D:  MOVWF  6B
061E:  CLRF   72
061F:  CLRF   71
0620:  CLRF   70
0621:  CLRF   6F
0622:  CALL   07A
0623:  BTFSS  03.0
0624:  GOTO   628
....................    { 
....................       x=-x; 
0625:  MOVF   51,W
0626:  XORLW  80
0627:  MOVWF  51
....................    } 
....................    if (x==0.0) 
0628:  MOVF   53,W
0629:  MOVWF  6E
062A:  MOVF   52,W
062B:  MOVWF  6D
062C:  MOVF   51,W
062D:  MOVWF  6C
062E:  MOVF   50,W
062F:  MOVWF  6B
0630:  CLRF   72
0631:  CLRF   71
0632:  CLRF   70
0633:  CLRF   6F
0634:  CALL   07A
0635:  BTFSS  03.2
0636:  GOTO   65C
....................    { 
....................       if(y==0.0) 
0637:  MOVF   4F,W
0638:  MOVWF  6E
0639:  MOVF   4E,W
063A:  MOVWF  6D
063B:  MOVF   4D,W
063C:  MOVWF  6C
063D:  MOVF   4C,W
063E:  MOVWF  6B
063F:  CLRF   72
0640:  CLRF   71
0641:  CLRF   70
0642:  CLRF   6F
0643:  CALL   07A
0644:  BTFSC  03.2
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
0645:  GOTO   65B
....................       else 
....................       { 
....................          if(sign) 
0646:  BTFSS  58.0
0647:  GOTO   652
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
0648:  MOVLW  7F
0649:  MOVWF  77
064A:  MOVLW  C9
064B:  MOVWF  78
064C:  MOVLW  0F
064D:  MOVWF  79
064E:  MOVLW  DB
064F:  MOVWF  7A
0650:  GOTO   6EB
....................          } 
0651:  GOTO   65B
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
0652:  MOVLW  7F
0653:  MOVWF  77
0654:  MOVLW  49
0655:  MOVWF  78
0656:  MOVLW  0F
0657:  MOVWF  79
0658:  MOVLW  DB
0659:  MOVWF  7A
065A:  GOTO   6EB
....................          } 
....................       } 
....................    } 
065B:  GOTO   6EB
....................    else 
....................    { 
....................       z=y/x; 
065C:  MOVF   4F,W
065D:  MOVWF  72
065E:  MOVF   4E,W
065F:  MOVWF  71
0660:  MOVF   4D,W
0661:  MOVWF  70
0662:  MOVF   4C,W
0663:  MOVWF  6F
0664:  MOVF   53,W
0665:  MOVWF  76
0666:  MOVF   52,W
0667:  MOVWF  75
0668:  MOVF   51,W
0669:  MOVWF  74
066A:  MOVF   50,W
066B:  MOVWF  73
066C:  CALL   0B9
066D:  MOVF   7A,W
066E:  MOVWF  57
066F:  MOVF   79,W
0670:  MOVWF  56
0671:  MOVF   78,W
0672:  MOVWF  55
0673:  MOVF   77,W
0674:  MOVWF  54
....................       switch(quad) 
0675:  MOVLW  01
0676:  SUBWF  59,W
0677:  ADDLW  FC
0678:  BTFSC  03.0
0679:  GOTO   6EB
067A:  ADDLW  04
067B:  GOTO   6EC
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
067C:  MOVF   57,W
067D:  MOVWF  5D
067E:  MOVF   56,W
067F:  MOVWF  5C
0680:  MOVF   55,W
0681:  MOVWF  5B
0682:  MOVF   54,W
0683:  MOVWF  5A
0684:  CALL   363
0685:  GOTO   6EB
....................             break; 
0686:  GOTO   6EB
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
0687:  MOVF   57,W
0688:  MOVWF  5D
0689:  MOVF   56,W
068A:  MOVWF  5C
068B:  MOVF   55,W
068C:  MOVWF  5B
068D:  MOVF   54,W
068E:  MOVWF  5A
068F:  CALL   363
0690:  CLRF   5B
0691:  MOVF   04,W
0692:  MOVWF  5A
0693:  BCF    5B.0
0694:  BTFSC  03.7
0695:  BSF    5B.0
0696:  BSF    03.1
0697:  MOVLW  DB
0698:  MOVWF  72
0699:  MOVLW  0F
069A:  MOVWF  71
069B:  MOVLW  49
069C:  MOVWF  70
069D:  MOVLW  80
069E:  MOVWF  6F
069F:  MOVF   7A,W
06A0:  MOVWF  76
06A1:  MOVF   79,W
06A2:  MOVWF  75
06A3:  MOVF   78,W
06A4:  MOVWF  74
06A5:  MOVF   77,W
06A6:  MOVWF  73
06A7:  CALL   218
06A8:  MOVF   5A,W
06A9:  MOVWF  04
06AA:  BCF    03.7
06AB:  BTFSC  5B.0
06AC:  BSF    03.7
06AD:  GOTO   6EB
....................             break; 
06AE:  GOTO   6EB
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
06AF:  MOVF   57,W
06B0:  MOVWF  5D
06B1:  MOVF   56,W
06B2:  MOVWF  5C
06B3:  MOVF   55,W
06B4:  MOVWF  5B
06B5:  MOVF   54,W
06B6:  MOVWF  5A
06B7:  CALL   363
06B8:  MOVF   7A,W
06B9:  MOVWF  5D
06BA:  MOVF   79,W
06BB:  MOVWF  5C
06BC:  MOVF   78,W
06BD:  MOVWF  5B
06BE:  MOVF   77,W
06BF:  MOVWF  5A
06C0:  CLRF   5F
06C1:  MOVF   04,W
06C2:  MOVWF  5E
06C3:  BCF    5F.0
06C4:  BTFSC  03.7
06C5:  BSF    5F.0
06C6:  BSF    03.1
06C7:  MOVF   5D,W
06C8:  MOVWF  72
06C9:  MOVF   5C,W
06CA:  MOVWF  71
06CB:  MOVF   5B,W
06CC:  MOVWF  70
06CD:  MOVF   5A,W
06CE:  MOVWF  6F
06CF:  MOVLW  DB
06D0:  MOVWF  76
06D1:  MOVLW  0F
06D2:  MOVWF  75
06D3:  MOVLW  49
06D4:  MOVWF  74
06D5:  MOVLW  80
06D6:  MOVWF  73
06D7:  CALL   218
06D8:  MOVF   5E,W
06D9:  MOVWF  04
06DA:  BCF    03.7
06DB:  BTFSC  5F.0
06DC:  BSF    03.7
06DD:  GOTO   6EB
....................             break; 
06DE:  GOTO   6EB
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
06DF:  MOVF   57,W
06E0:  MOVWF  5D
06E1:  MOVF   56,W
06E2:  MOVWF  5C
06E3:  MOVF   55,W
06E4:  MOVWF  5B
06E5:  MOVF   54,W
06E6:  MOVWF  5A
06E7:  CALL   363
06E8:  MOVLW  80
06E9:  XORWF  78,F
06EA:  GOTO   6EB
....................             break; 
....................          } 
....................       } 
....................    } 
06EB:  RETURN
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... #define LOG2_INV 3.32192809488736234787 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
....................  
.................... #define BUZZER PIN_B4 
.................... #define BOTAO PIN_B5 
....................  
.................... // Numeros do amostras  
.................... int amostra = 10; 
....................  
.................... // Os maximos e minimos de cada eixo 
.................... int16 xMinVal = 277, yMinVal = 271, zMinVal = 277; 
.................... int16 xMaxVal = 428, yMaxVal = 442, zMaxVal = 427; 
.................... int16 ref = 360; 
....................  
.................... //variavceis de leitura dos exios 
.................... int16 xRead = 0, yRead = 0, zRead = 0; 
.................... signed long xAng = 0, yAng = 0, zAng = 0; 
.................... long  x = 0, y = 0, z = 0; 
....................  
.................... //Conversao de radianos para graus 
.................... long val = 180/PI; 
....................  
.................... void main() 
*
0800:  MOVF   03,W
0801:  ANDLW  1F
0802:  MOVWF  03
0803:  MOVLW  81
0804:  BSF    03.5
0805:  MOVWF  19
0806:  MOVLW  A6
0807:  MOVWF  18
0808:  MOVLW  90
0809:  BCF    03.5
080A:  MOVWF  18
080B:  MOVLW  0A
080C:  MOVWF  20
080D:  MOVLW  01
080E:  MOVWF  22
080F:  MOVLW  15
0810:  MOVWF  21
0811:  MOVLW  01
0812:  MOVWF  24
0813:  MOVLW  0F
0814:  MOVWF  23
0815:  MOVLW  01
0816:  MOVWF  26
0817:  MOVLW  15
0818:  MOVWF  25
0819:  MOVLW  01
081A:  MOVWF  28
081B:  MOVLW  AC
081C:  MOVWF  27
081D:  MOVLW  01
081E:  MOVWF  2A
081F:  MOVLW  BA
0820:  MOVWF  29
0821:  MOVLW  01
0822:  MOVWF  2C
0823:  MOVLW  AB
0824:  MOVWF  2B
0825:  MOVLW  01
0826:  MOVWF  2E
0827:  MOVLW  68
0828:  MOVWF  2D
0829:  CLRF   30
082A:  CLRF   2F
082B:  CLRF   32
082C:  CLRF   31
082D:  CLRF   34
082E:  CLRF   33
082F:  CLRF   36
0830:  CLRF   35
0831:  CLRF   38
0832:  CLRF   37
0833:  CLRF   3A
0834:  CLRF   39
0835:  CLRF   3C
0836:  CLRF   3B
0837:  CLRF   3E
0838:  CLRF   3D
0839:  CLRF   40
083A:  CLRF   3F
083B:  CLRF   42
083C:  MOVLW  39
083D:  MOVWF  41
083E:  BSF    03.5
083F:  BSF    1F.0
0840:  BSF    1F.1
0841:  BSF    1F.2
0842:  BCF    1F.3
0843:  MOVLW  07
0844:  MOVWF  1C
0845:  BCF    03.7
.................... { 
....................    setup_adc_ports(AN0_AN1_AN3); 
0846:  BCF    1F.0
0847:  BCF    1F.1
0848:  BSF    1F.2
0849:  BCF    1F.3
....................    setup_adc(ADC_CLOCK_INTERNAL); 
084A:  BCF    1F.6
084B:  BCF    03.5
084C:  BSF    1F.6
084D:  BSF    1F.7
084E:  BSF    03.5
084F:  BSF    1F.7
0850:  BCF    03.5
0851:  BSF    1F.0
....................  
....................    while(TRUE) 
....................    {   
....................        
....................       // leitura dos valores brutos 
....................       for (int i = 0; i < amostra ; i++) 
0852:  CLRF   43
0853:  MOVF   20,W
0854:  SUBWF  43,W
0855:  BTFSC  03.0
0856:  GOTO   098
....................       { 
....................       set_adc_channel(0);  
0857:  MOVLW  00
0858:  MOVWF  78
0859:  MOVF   1F,W
085A:  ANDLW  C7
085B:  IORWF  78,W
085C:  MOVWF  1F
....................       delay_us(20); 
085D:  MOVLW  21
085E:  MOVWF  77
085F:  DECFSZ 77,F
0860:  GOTO   05F
....................       xRead += read_adc(); 
0861:  BSF    1F.2
0862:  BTFSC  1F.2
0863:  GOTO   062
0864:  BSF    03.5
0865:  MOVF   1E,W
0866:  BCF    03.5
0867:  ADDWF  2F,F
0868:  MOVF   1E,W
0869:  BTFSC  03.0
086A:  INCFSZ 1E,W
086B:  ADDWF  30,F
....................       set_adc_channel(1);  
086C:  MOVLW  08
086D:  MOVWF  78
086E:  MOVF   1F,W
086F:  ANDLW  C7
0870:  IORWF  78,W
0871:  MOVWF  1F
....................       delay_us(20); 
0872:  MOVLW  21
0873:  MOVWF  77
0874:  DECFSZ 77,F
0875:  GOTO   074
....................       yRead += read_adc(); 
0876:  BSF    1F.2
0877:  BTFSC  1F.2
0878:  GOTO   077
0879:  BSF    03.5
087A:  MOVF   1E,W
087B:  BCF    03.5
087C:  ADDWF  31,F
087D:  MOVF   1E,W
087E:  BTFSC  03.0
087F:  INCFSZ 1E,W
0880:  ADDWF  32,F
....................       set_adc_channel(3);  
0881:  MOVLW  18
0882:  MOVWF  78
0883:  MOVF   1F,W
0884:  ANDLW  C7
0885:  IORWF  78,W
0886:  MOVWF  1F
....................       delay_us(20); 
0887:  MOVLW  21
0888:  MOVWF  77
0889:  DECFSZ 77,F
088A:  GOTO   089
....................       zRead += read_adc(); 
088B:  BSF    1F.2
088C:  BTFSC  1F.2
088D:  GOTO   08C
088E:  BSF    03.5
088F:  MOVF   1E,W
0890:  BCF    03.5
0891:  ADDWF  33,F
0892:  MOVF   1E,W
0893:  BTFSC  03.0
0894:  INCFSZ 1E,W
0895:  ADDWF  34,F
0896:  INCF   43,F
0897:  GOTO   053
....................       } 
....................  
....................       xRead = xRead / amostra; 
0898:  MOVF   30,W
0899:  MOVWF  47
089A:  MOVF   2F,W
089B:  MOVWF  46
089C:  CLRF   49
089D:  MOVF   20,W
089E:  MOVWF  48
089F:  BCF    0A.3
08A0:  CALL   01B
08A1:  BSF    0A.3
08A2:  MOVF   79,W
08A3:  MOVWF  30
08A4:  MOVF   78,W
08A5:  MOVWF  2F
....................       yRead = yRead / amostra; 
08A6:  MOVF   32,W
08A7:  MOVWF  47
08A8:  MOVF   31,W
08A9:  MOVWF  46
08AA:  CLRF   49
08AB:  MOVF   20,W
08AC:  MOVWF  48
08AD:  BCF    0A.3
08AE:  CALL   01B
08AF:  BSF    0A.3
08B0:  MOVF   79,W
08B1:  MOVWF  32
08B2:  MOVF   78,W
08B3:  MOVWF  31
....................       zRead = zRead / amostra; 
08B4:  MOVF   34,W
08B5:  MOVWF  47
08B6:  MOVF   33,W
08B7:  MOVWF  46
08B8:  CLRF   49
08B9:  MOVF   20,W
08BA:  MOVWF  48
08BB:  BCF    0A.3
08BC:  CALL   01B
08BD:  BSF    0A.3
08BE:  MOVF   79,W
08BF:  MOVWF  34
08C0:  MOVF   78,W
08C1:  MOVWF  33
....................        
....................       
....................       // conversao do angulo |max 90|min -90| 
....................        
....................       xAng = (((180/(xMaxVal - xMinVal)) * (xRead - xMinVal)) -90); 
08C2:  MOVF   21,W
08C3:  SUBWF  27,W
08C4:  MOVWF  77
08C5:  MOVF   28,W
08C6:  MOVWF  7A
08C7:  MOVF   22,W
08C8:  BTFSS  03.0
08C9:  INCFSZ 22,W
08CA:  SUBWF  7A,F
08CB:  MOVF   77,W
08CC:  MOVWF  44
08CD:  MOVF   7A,W
08CE:  MOVWF  45
08CF:  CLRF   47
08D0:  MOVLW  B4
08D1:  MOVWF  46
08D2:  MOVF   45,W
08D3:  MOVWF  49
08D4:  MOVF   44,W
08D5:  MOVWF  48
08D6:  BCF    0A.3
08D7:  CALL   01B
08D8:  BSF    0A.3
08D9:  MOVF   79,W
08DA:  MOVWF  45
08DB:  MOVF   78,W
08DC:  MOVWF  44
08DD:  MOVF   21,W
08DE:  SUBWF  2F,W
08DF:  MOVWF  77
08E0:  MOVF   30,W
08E1:  MOVWF  7A
08E2:  MOVF   22,W
08E3:  BTFSS  03.0
08E4:  INCFSZ 22,W
08E5:  SUBWF  7A,F
08E6:  MOVF   77,W
08E7:  MOVWF  46
08E8:  MOVF   7A,W
08E9:  MOVWF  47
08EA:  MOVF   45,W
08EB:  MOVWF  49
08EC:  MOVF   44,W
08ED:  MOVWF  48
08EE:  MOVF   47,W
08EF:  MOVWF  4B
08F0:  MOVF   46,W
08F1:  MOVWF  4A
08F2:  BCF    0A.3
08F3:  CALL   040
08F4:  BSF    0A.3
08F5:  MOVF   79,W
08F6:  MOVWF  45
08F7:  MOVF   78,W
08F8:  MOVWF  44
08F9:  MOVLW  5A
08FA:  SUBWF  44,W
08FB:  MOVWF  77
08FC:  MOVF   45,W
08FD:  MOVWF  7A
08FE:  MOVLW  00
08FF:  BTFSS  03.0
0900:  MOVLW  01
0901:  SUBWF  7A,F
0902:  MOVF   77,W
0903:  MOVWF  35
0904:  MOVF   7A,W
0905:  MOVWF  36
....................       yAng = (((180/(yMaxVal - yMinVal)) * (yRead - yMinVal)) -90); 
0906:  MOVF   23,W
0907:  SUBWF  29,W
0908:  MOVWF  77
0909:  MOVF   2A,W
090A:  MOVWF  7A
090B:  MOVF   24,W
090C:  BTFSS  03.0
090D:  INCFSZ 24,W
090E:  SUBWF  7A,F
090F:  MOVF   77,W
0910:  MOVWF  44
0911:  MOVF   7A,W
0912:  MOVWF  45
0913:  CLRF   47
0914:  MOVLW  B4
0915:  MOVWF  46
0916:  MOVF   45,W
0917:  MOVWF  49
0918:  MOVF   44,W
0919:  MOVWF  48
091A:  BCF    0A.3
091B:  CALL   01B
091C:  BSF    0A.3
091D:  MOVF   79,W
091E:  MOVWF  45
091F:  MOVF   78,W
0920:  MOVWF  44
0921:  MOVF   23,W
0922:  SUBWF  31,W
0923:  MOVWF  77
0924:  MOVF   32,W
0925:  MOVWF  7A
0926:  MOVF   24,W
0927:  BTFSS  03.0
0928:  INCFSZ 24,W
0929:  SUBWF  7A,F
092A:  MOVF   77,W
092B:  MOVWF  46
092C:  MOVF   7A,W
092D:  MOVWF  47
092E:  MOVF   45,W
092F:  MOVWF  49
0930:  MOVF   44,W
0931:  MOVWF  48
0932:  MOVF   47,W
0933:  MOVWF  4B
0934:  MOVF   46,W
0935:  MOVWF  4A
0936:  BCF    0A.3
0937:  CALL   040
0938:  BSF    0A.3
0939:  MOVF   79,W
093A:  MOVWF  45
093B:  MOVF   78,W
093C:  MOVWF  44
093D:  MOVLW  5A
093E:  SUBWF  44,W
093F:  MOVWF  77
0940:  MOVF   45,W
0941:  MOVWF  7A
0942:  MOVLW  00
0943:  BTFSS  03.0
0944:  MOVLW  01
0945:  SUBWF  7A,F
0946:  MOVF   77,W
0947:  MOVWF  37
0948:  MOVF   7A,W
0949:  MOVWF  38
....................       zAng = (((180/(zMaxVal - zMinVal)) * (zRead - zMinVal)) -90); 
094A:  MOVF   25,W
094B:  SUBWF  2B,W
094C:  MOVWF  77
094D:  MOVF   2C,W
094E:  MOVWF  7A
094F:  MOVF   26,W
0950:  BTFSS  03.0
0951:  INCFSZ 26,W
0952:  SUBWF  7A,F
0953:  MOVF   77,W
0954:  MOVWF  44
0955:  MOVF   7A,W
0956:  MOVWF  45
0957:  CLRF   47
0958:  MOVLW  B4
0959:  MOVWF  46
095A:  MOVF   45,W
095B:  MOVWF  49
095C:  MOVF   44,W
095D:  MOVWF  48
095E:  BCF    0A.3
095F:  CALL   01B
0960:  BSF    0A.3
0961:  MOVF   79,W
0962:  MOVWF  45
0963:  MOVF   78,W
0964:  MOVWF  44
0965:  MOVF   25,W
0966:  SUBWF  33,W
0967:  MOVWF  77
0968:  MOVF   34,W
0969:  MOVWF  7A
096A:  MOVF   26,W
096B:  BTFSS  03.0
096C:  INCFSZ 26,W
096D:  SUBWF  7A,F
096E:  MOVF   77,W
096F:  MOVWF  46
0970:  MOVF   7A,W
0971:  MOVWF  47
0972:  MOVF   45,W
0973:  MOVWF  49
0974:  MOVF   44,W
0975:  MOVWF  48
0976:  MOVF   47,W
0977:  MOVWF  4B
0978:  MOVF   46,W
0979:  MOVWF  4A
097A:  BCF    0A.3
097B:  CALL   040
097C:  BSF    0A.3
097D:  MOVF   79,W
097E:  MOVWF  45
097F:  MOVF   78,W
0980:  MOVWF  44
0981:  MOVLW  5A
0982:  SUBWF  44,W
0983:  MOVWF  77
0984:  MOVF   45,W
0985:  MOVWF  7A
0986:  MOVLW  00
0987:  BTFSS  03.0
0988:  MOVLW  01
0989:  SUBWF  7A,F
098A:  MOVF   77,W
098B:  MOVWF  39
098C:  MOVF   7A,W
098D:  MOVWF  3A
....................     
....................       x = (atan2(-yAng, -zAng) + PI)*val; 
098E:  MOVF   37,W
098F:  SUBLW  00
0990:  MOVWF  77
0991:  CLRF   7A
0992:  MOVF   38,W
0993:  BTFSS  03.0
0994:  INCFSZ 38,W
0995:  SUBWF  7A,F
0996:  MOVF   77,W
0997:  MOVWF  48
0998:  MOVF   7A,W
0999:  MOVWF  49
099A:  BCF    0A.3
099B:  CALL   055
099C:  BSF    0A.3
099D:  MOVF   7A,W
099E:  MOVWF  47
099F:  MOVF   79,W
09A0:  MOVWF  46
09A1:  MOVF   78,W
09A2:  MOVWF  45
09A3:  MOVF   77,W
09A4:  MOVWF  44
09A5:  MOVF   39,W
09A6:  SUBLW  00
09A7:  MOVWF  77
09A8:  CLRF   7A
09A9:  MOVF   3A,W
09AA:  BTFSS  03.0
09AB:  INCFSZ 3A,W
09AC:  SUBWF  7A,F
09AD:  MOVF   77,W
09AE:  MOVWF  48
09AF:  MOVF   7A,W
09B0:  MOVWF  49
09B1:  BCF    0A.3
09B2:  CALL   055
09B3:  BSF    0A.3
09B4:  MOVF   7A,W
09B5:  MOVWF  4B
09B6:  MOVF   79,W
09B7:  MOVWF  4A
09B8:  MOVF   78,W
09B9:  MOVWF  49
09BA:  MOVF   77,W
09BB:  MOVWF  48
09BC:  MOVF   47,W
09BD:  MOVWF  4F
09BE:  MOVF   46,W
09BF:  MOVWF  4E
09C0:  MOVF   45,W
09C1:  MOVWF  4D
09C2:  MOVF   44,W
09C3:  MOVWF  4C
09C4:  MOVF   4B,W
09C5:  MOVWF  53
09C6:  MOVF   4A,W
09C7:  MOVWF  52
09C8:  MOVF   49,W
09C9:  MOVWF  51
09CA:  MOVF   48,W
09CB:  MOVWF  50
09CC:  BCF    0A.3
09CD:  CALL   5C8
09CE:  BSF    0A.3
09CF:  MOVF   7A,W
09D0:  MOVWF  47
09D1:  MOVF   79,W
09D2:  MOVWF  46
09D3:  MOVF   78,W
09D4:  MOVWF  45
09D5:  MOVF   77,W
09D6:  MOVWF  44
09D7:  CLRF   49
09D8:  MOVF   04,W
09D9:  MOVWF  48
09DA:  BCF    49.0
09DB:  BTFSC  03.7
09DC:  BSF    49.0
09DD:  BCF    03.1
09DE:  MOVF   47,W
09DF:  MOVWF  72
09E0:  MOVF   46,W
09E1:  MOVWF  71
09E2:  MOVF   45,W
09E3:  MOVWF  70
09E4:  MOVF   44,W
09E5:  MOVWF  6F
09E6:  MOVLW  DB
09E7:  MOVWF  76
09E8:  MOVLW  0F
09E9:  MOVWF  75
09EA:  MOVLW  49
09EB:  MOVWF  74
09EC:  MOVLW  80
09ED:  MOVWF  73
09EE:  BCF    0A.3
09EF:  CALL   218
09F0:  BSF    0A.3
09F1:  MOVF   48,W
09F2:  MOVWF  04
09F3:  BCF    03.7
09F4:  BTFSC  49.0
09F5:  BSF    03.7
09F6:  MOVF   7A,W
09F7:  MOVWF  47
09F8:  MOVF   79,W
09F9:  MOVWF  46
09FA:  MOVF   78,W
09FB:  MOVWF  45
09FC:  MOVF   77,W
09FD:  MOVWF  44
09FE:  MOVF   42,W
09FF:  MOVWF  4B
0A00:  MOVF   41,W
0A01:  MOVWF  4A
0A02:  BCF    0A.3
0A03:  CALL   6F4
0A04:  BSF    0A.3
0A05:  MOVF   47,W
0A06:  MOVWF  72
0A07:  MOVF   46,W
0A08:  MOVWF  71
0A09:  MOVF   45,W
0A0A:  MOVWF  70
0A0B:  MOVF   44,W
0A0C:  MOVWF  6F
0A0D:  MOVF   7A,W
0A0E:  MOVWF  76
0A0F:  MOVF   79,W
0A10:  MOVWF  75
0A11:  MOVF   78,W
0A12:  MOVWF  74
0A13:  MOVF   77,W
0A14:  MOVWF  73
0A15:  BCF    0A.3
0A16:  CALL   192
0A17:  BSF    0A.3
0A18:  MOVF   7A,W
0A19:  MOVWF  4D
0A1A:  MOVF   79,W
0A1B:  MOVWF  4C
0A1C:  MOVF   78,W
0A1D:  MOVWF  4B
0A1E:  MOVF   77,W
0A1F:  MOVWF  4A
0A20:  BCF    0A.3
0A21:  CALL   711
0A22:  BSF    0A.3
0A23:  MOVF   79,W
0A24:  MOVWF  3C
0A25:  MOVF   78,W
0A26:  MOVWF  3B
....................       y = (atan2(-xAng, -zAng) + PI)*val; 
0A27:  MOVF   35,W
0A28:  SUBLW  00
0A29:  MOVWF  77
0A2A:  CLRF   7A
0A2B:  MOVF   36,W
0A2C:  BTFSS  03.0
0A2D:  INCFSZ 36,W
0A2E:  SUBWF  7A,F
0A2F:  MOVF   77,W
0A30:  MOVWF  48
0A31:  MOVF   7A,W
0A32:  MOVWF  49
0A33:  BCF    0A.3
0A34:  CALL   055
0A35:  BSF    0A.3
0A36:  MOVF   7A,W
0A37:  MOVWF  47
0A38:  MOVF   79,W
0A39:  MOVWF  46
0A3A:  MOVF   78,W
0A3B:  MOVWF  45
0A3C:  MOVF   77,W
0A3D:  MOVWF  44
0A3E:  MOVF   39,W
0A3F:  SUBLW  00
0A40:  MOVWF  77
0A41:  CLRF   7A
0A42:  MOVF   3A,W
0A43:  BTFSS  03.0
0A44:  INCFSZ 3A,W
0A45:  SUBWF  7A,F
0A46:  MOVF   77,W
0A47:  MOVWF  48
0A48:  MOVF   7A,W
0A49:  MOVWF  49
0A4A:  BCF    0A.3
0A4B:  CALL   055
0A4C:  BSF    0A.3
0A4D:  MOVF   7A,W
0A4E:  MOVWF  4B
0A4F:  MOVF   79,W
0A50:  MOVWF  4A
0A51:  MOVF   78,W
0A52:  MOVWF  49
0A53:  MOVF   77,W
0A54:  MOVWF  48
0A55:  MOVF   47,W
0A56:  MOVWF  4F
0A57:  MOVF   46,W
0A58:  MOVWF  4E
0A59:  MOVF   45,W
0A5A:  MOVWF  4D
0A5B:  MOVF   44,W
0A5C:  MOVWF  4C
0A5D:  MOVF   4B,W
0A5E:  MOVWF  53
0A5F:  MOVF   4A,W
0A60:  MOVWF  52
0A61:  MOVF   49,W
0A62:  MOVWF  51
0A63:  MOVF   48,W
0A64:  MOVWF  50
0A65:  BCF    0A.3
0A66:  CALL   5C8
0A67:  BSF    0A.3
0A68:  MOVF   7A,W
0A69:  MOVWF  47
0A6A:  MOVF   79,W
0A6B:  MOVWF  46
0A6C:  MOVF   78,W
0A6D:  MOVWF  45
0A6E:  MOVF   77,W
0A6F:  MOVWF  44
0A70:  CLRF   49
0A71:  MOVF   04,W
0A72:  MOVWF  48
0A73:  BCF    49.0
0A74:  BTFSC  03.7
0A75:  BSF    49.0
0A76:  BCF    03.1
0A77:  MOVF   47,W
0A78:  MOVWF  72
0A79:  MOVF   46,W
0A7A:  MOVWF  71
0A7B:  MOVF   45,W
0A7C:  MOVWF  70
0A7D:  MOVF   44,W
0A7E:  MOVWF  6F
0A7F:  MOVLW  DB
0A80:  MOVWF  76
0A81:  MOVLW  0F
0A82:  MOVWF  75
0A83:  MOVLW  49
0A84:  MOVWF  74
0A85:  MOVLW  80
0A86:  MOVWF  73
0A87:  BCF    0A.3
0A88:  CALL   218
0A89:  BSF    0A.3
0A8A:  MOVF   48,W
0A8B:  MOVWF  04
0A8C:  BCF    03.7
0A8D:  BTFSC  49.0
0A8E:  BSF    03.7
0A8F:  MOVF   7A,W
0A90:  MOVWF  47
0A91:  MOVF   79,W
0A92:  MOVWF  46
0A93:  MOVF   78,W
0A94:  MOVWF  45
0A95:  MOVF   77,W
0A96:  MOVWF  44
0A97:  MOVF   42,W
0A98:  MOVWF  4B
0A99:  MOVF   41,W
0A9A:  MOVWF  4A
0A9B:  BCF    0A.3
0A9C:  CALL   6F4
0A9D:  BSF    0A.3
0A9E:  MOVF   47,W
0A9F:  MOVWF  72
0AA0:  MOVF   46,W
0AA1:  MOVWF  71
0AA2:  MOVF   45,W
0AA3:  MOVWF  70
0AA4:  MOVF   44,W
0AA5:  MOVWF  6F
0AA6:  MOVF   7A,W
0AA7:  MOVWF  76
0AA8:  MOVF   79,W
0AA9:  MOVWF  75
0AAA:  MOVF   78,W
0AAB:  MOVWF  74
0AAC:  MOVF   77,W
0AAD:  MOVWF  73
0AAE:  BCF    0A.3
0AAF:  CALL   192
0AB0:  BSF    0A.3
0AB1:  MOVF   7A,W
0AB2:  MOVWF  4D
0AB3:  MOVF   79,W
0AB4:  MOVWF  4C
0AB5:  MOVF   78,W
0AB6:  MOVWF  4B
0AB7:  MOVF   77,W
0AB8:  MOVWF  4A
0AB9:  BCF    0A.3
0ABA:  CALL   711
0ABB:  BSF    0A.3
0ABC:  MOVF   79,W
0ABD:  MOVWF  3E
0ABE:  MOVF   78,W
0ABF:  MOVWF  3D
....................       z = (atan2(-yAng, -xAng) + PI)*val; 
0AC0:  MOVF   37,W
0AC1:  SUBLW  00
0AC2:  MOVWF  77
0AC3:  CLRF   7A
0AC4:  MOVF   38,W
0AC5:  BTFSS  03.0
0AC6:  INCFSZ 38,W
0AC7:  SUBWF  7A,F
0AC8:  MOVF   77,W
0AC9:  MOVWF  48
0ACA:  MOVF   7A,W
0ACB:  MOVWF  49
0ACC:  BCF    0A.3
0ACD:  CALL   055
0ACE:  BSF    0A.3
0ACF:  MOVF   7A,W
0AD0:  MOVWF  47
0AD1:  MOVF   79,W
0AD2:  MOVWF  46
0AD3:  MOVF   78,W
0AD4:  MOVWF  45
0AD5:  MOVF   77,W
0AD6:  MOVWF  44
0AD7:  MOVF   35,W
0AD8:  SUBLW  00
0AD9:  MOVWF  77
0ADA:  CLRF   7A
0ADB:  MOVF   36,W
0ADC:  BTFSS  03.0
0ADD:  INCFSZ 36,W
0ADE:  SUBWF  7A,F
0ADF:  MOVF   77,W
0AE0:  MOVWF  48
0AE1:  MOVF   7A,W
0AE2:  MOVWF  49
0AE3:  BCF    0A.3
0AE4:  CALL   055
0AE5:  BSF    0A.3
0AE6:  MOVF   7A,W
0AE7:  MOVWF  4B
0AE8:  MOVF   79,W
0AE9:  MOVWF  4A
0AEA:  MOVF   78,W
0AEB:  MOVWF  49
0AEC:  MOVF   77,W
0AED:  MOVWF  48
0AEE:  MOVF   47,W
0AEF:  MOVWF  4F
0AF0:  MOVF   46,W
0AF1:  MOVWF  4E
0AF2:  MOVF   45,W
0AF3:  MOVWF  4D
0AF4:  MOVF   44,W
0AF5:  MOVWF  4C
0AF6:  MOVF   4B,W
0AF7:  MOVWF  53
0AF8:  MOVF   4A,W
0AF9:  MOVWF  52
0AFA:  MOVF   49,W
0AFB:  MOVWF  51
0AFC:  MOVF   48,W
0AFD:  MOVWF  50
0AFE:  BCF    0A.3
0AFF:  CALL   5C8
0B00:  BSF    0A.3
0B01:  MOVF   7A,W
0B02:  MOVWF  47
0B03:  MOVF   79,W
0B04:  MOVWF  46
0B05:  MOVF   78,W
0B06:  MOVWF  45
0B07:  MOVF   77,W
0B08:  MOVWF  44
0B09:  CLRF   49
0B0A:  MOVF   04,W
0B0B:  MOVWF  48
0B0C:  BCF    49.0
0B0D:  BTFSC  03.7
0B0E:  BSF    49.0
0B0F:  BCF    03.1
0B10:  MOVF   47,W
0B11:  MOVWF  72
0B12:  MOVF   46,W
0B13:  MOVWF  71
0B14:  MOVF   45,W
0B15:  MOVWF  70
0B16:  MOVF   44,W
0B17:  MOVWF  6F
0B18:  MOVLW  DB
0B19:  MOVWF  76
0B1A:  MOVLW  0F
0B1B:  MOVWF  75
0B1C:  MOVLW  49
0B1D:  MOVWF  74
0B1E:  MOVLW  80
0B1F:  MOVWF  73
0B20:  BCF    0A.3
0B21:  CALL   218
0B22:  BSF    0A.3
0B23:  MOVF   48,W
0B24:  MOVWF  04
0B25:  BCF    03.7
0B26:  BTFSC  49.0
0B27:  BSF    03.7
0B28:  MOVF   7A,W
0B29:  MOVWF  47
0B2A:  MOVF   79,W
0B2B:  MOVWF  46
0B2C:  MOVF   78,W
0B2D:  MOVWF  45
0B2E:  MOVF   77,W
0B2F:  MOVWF  44
0B30:  MOVF   42,W
0B31:  MOVWF  4B
0B32:  MOVF   41,W
0B33:  MOVWF  4A
0B34:  BCF    0A.3
0B35:  CALL   6F4
0B36:  BSF    0A.3
0B37:  MOVF   47,W
0B38:  MOVWF  72
0B39:  MOVF   46,W
0B3A:  MOVWF  71
0B3B:  MOVF   45,W
0B3C:  MOVWF  70
0B3D:  MOVF   44,W
0B3E:  MOVWF  6F
0B3F:  MOVF   7A,W
0B40:  MOVWF  76
0B41:  MOVF   79,W
0B42:  MOVWF  75
0B43:  MOVF   78,W
0B44:  MOVWF  74
0B45:  MOVF   77,W
0B46:  MOVWF  73
0B47:  BCF    0A.3
0B48:  CALL   192
0B49:  BSF    0A.3
0B4A:  MOVF   7A,W
0B4B:  MOVWF  4D
0B4C:  MOVF   79,W
0B4D:  MOVWF  4C
0B4E:  MOVF   78,W
0B4F:  MOVWF  4B
0B50:  MOVF   77,W
0B51:  MOVWF  4A
0B52:  BCF    0A.3
0B53:  CALL   711
0B54:  BSF    0A.3
0B55:  MOVF   79,W
0B56:  MOVWF  40
0B57:  MOVF   78,W
0B58:  MOVWF  3F
....................        
....................        
....................       fprintf(PORT1,"x = %lu, y = %lu, z = %lu, referencia= %lu\n\r",xRead,yRead,zRead,ref); 
0B59:  MOVLW  04
0B5A:  BSF    03.6
0B5B:  MOVWF  0D
0B5C:  MOVLW  00
0B5D:  MOVWF  0F
0B5E:  BCF    03.0
0B5F:  MOVLW  04
0B60:  BCF    03.6
0B61:  MOVWF  44
0B62:  BCF    0A.3
0B63:  CALL   730
0B64:  BSF    0A.3
0B65:  MOVLW  10
0B66:  MOVWF  04
0B67:  MOVF   30,W
0B68:  MOVWF  45
0B69:  MOVF   2F,W
0B6A:  MOVWF  44
0B6B:  BCF    0A.3
0B6C:  CALL   789
0B6D:  BSF    0A.3
0B6E:  MOVLW  07
0B6F:  BSF    03.6
0B70:  MOVWF  0D
0B71:  MOVLW  00
0B72:  MOVWF  0F
0B73:  BSF    03.0
0B74:  MOVLW  06
0B75:  BCF    03.6
0B76:  MOVWF  44
0B77:  BCF    0A.3
0B78:  CALL   730
0B79:  BSF    0A.3
0B7A:  MOVLW  10
0B7B:  MOVWF  04
0B7C:  MOVF   32,W
0B7D:  MOVWF  45
0B7E:  MOVF   31,W
0B7F:  MOVWF  44
0B80:  BCF    0A.3
0B81:  CALL   789
0B82:  BSF    0A.3
0B83:  MOVLW  0C
0B84:  BSF    03.6
0B85:  MOVWF  0D
0B86:  MOVLW  00
0B87:  MOVWF  0F
0B88:  BCF    03.0
0B89:  MOVLW  06
0B8A:  BCF    03.6
0B8B:  MOVWF  44
0B8C:  BCF    0A.3
0B8D:  CALL   730
0B8E:  BSF    0A.3
0B8F:  MOVLW  10
0B90:  MOVWF  04
0B91:  MOVF   34,W
0B92:  MOVWF  45
0B93:  MOVF   33,W
0B94:  MOVWF  44
0B95:  BCF    0A.3
0B96:  CALL   789
0B97:  BSF    0A.3
0B98:  MOVLW  10
0B99:  BSF    03.6
0B9A:  MOVWF  0D
0B9B:  MOVLW  00
0B9C:  MOVWF  0F
0B9D:  BSF    03.0
0B9E:  MOVLW  0E
0B9F:  BCF    03.6
0BA0:  MOVWF  44
0BA1:  BCF    0A.3
0BA2:  CALL   730
0BA3:  BSF    0A.3
0BA4:  MOVLW  10
0BA5:  MOVWF  04
0BA6:  MOVF   2E,W
0BA7:  MOVWF  45
0BA8:  MOVF   2D,W
0BA9:  MOVWF  44
0BAA:  BCF    0A.3
0BAB:  CALL   789
0BAC:  BSF    0A.3
0BAD:  MOVLW  0A
0BAE:  BTFSS  0C.4
0BAF:  GOTO   3AE
0BB0:  MOVWF  19
0BB1:  MOVLW  0D
0BB2:  BTFSS  0C.4
0BB3:  GOTO   3B2
0BB4:  MOVWF  19
....................        
....................       if(input(BOTAO)){ 
0BB5:  BSF    03.5
0BB6:  BSF    06.5
0BB7:  BCF    03.5
0BB8:  BTFSS  06.5
0BB9:  GOTO   3BF
....................          ref = x; 
0BBA:  MOVF   3C,W
0BBB:  MOVWF  2E
0BBC:  MOVF   3B,W
0BBD:  MOVWF  2D
....................       }else{ 
0BBE:  GOTO   3D9
....................          if (x > ref + 6){ 
0BBF:  MOVLW  06
0BC0:  ADDWF  2D,W
0BC1:  MOVWF  78
0BC2:  MOVF   2E,W
0BC3:  MOVWF  7A
0BC4:  BTFSC  03.0
0BC5:  INCF   7A,F
0BC6:  MOVF   7A,W
0BC7:  SUBWF  3C,W
0BC8:  BTFSS  03.0
0BC9:  GOTO   3D5
0BCA:  BTFSS  03.2
0BCB:  GOTO   3D0
0BCC:  MOVF   3B,W
0BCD:  SUBWF  78,W
0BCE:  BTFSC  03.0
0BCF:  GOTO   3D5
....................             output_high(BUZZER); 
0BD0:  BSF    03.5
0BD1:  BCF    06.4
0BD2:  BCF    03.5
0BD3:  BSF    06.4
....................          }else{ 
0BD4:  GOTO   3D9
....................             output_low(BUZZER); 
0BD5:  BSF    03.5
0BD6:  BCF    06.4
0BD7:  BCF    03.5
0BD8:  BCF    06.4
....................             } 
....................          } 
....................              
....................        
....................       delay_ms(800); 
0BD9:  MOVLW  04
0BDA:  MOVWF  44
0BDB:  MOVLW  C8
0BDC:  MOVWF  45
0BDD:  BCF    0A.3
0BDE:  GOTO   7E2
0BDF:  BSF    0A.3
0BE0:  DECFSZ 44,F
0BE1:  GOTO   3DB
0BE2:  GOTO   052
....................      } 
....................     
....................     
....................     
.................... } 
....................  
0BE3:  SLEEP

Configuration Fuses:
   Word  1: 3F32   HS NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
