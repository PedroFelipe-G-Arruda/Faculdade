CCS PCM C Compiler, Version 5.081, 13314               13-mai-19 09:41

               Filename:   C:\Users\pedro\OneDrive\Faculdade\Faculdade\2019.1\Microcontroladores\Teclado\Teclado_Motores.lst

               ROM used:   1694 words (21%)
                           Largest free fragment is 2048
               RAM used:   45 (12%) at main() level
                           63 (17%) worst case
               Stack used: 6 locations (5 in main + 1 for interrupts)
               Stack size: 8

*
0000:  MOVLW  05
0001:  MOVWF  0A
0002:  GOTO   580
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BSF    03.6
0016:  MOVF   0D,W
0017:  BCF    03.6
0018:  MOVWF  27
0019:  BSF    03.6
001A:  MOVF   0F,W
001B:  BCF    03.6
001C:  MOVWF  28
001D:  BSF    03.6
001E:  MOVF   0C,W
001F:  BCF    03.6
0020:  MOVWF  29
0021:  BSF    03.6
0022:  MOVF   0E,W
0023:  BCF    03.6
0024:  MOVWF  2A
0025:  BCF    03.7
0026:  BCF    03.5
0027:  BTFSS  0B.5
0028:  GOTO   02B
0029:  BTFSC  0B.2
002A:  GOTO   04C
002B:  MOVF   22,W
002C:  MOVWF  04
002D:  MOVF   23,W
002E:  MOVWF  77
002F:  MOVF   24,W
0030:  MOVWF  78
0031:  MOVF   25,W
0032:  MOVWF  79
0033:  MOVF   26,W
0034:  MOVWF  7A
0035:  MOVF   27,W
0036:  BSF    03.6
0037:  MOVWF  0D
0038:  BCF    03.6
0039:  MOVF   28,W
003A:  BSF    03.6
003B:  MOVWF  0F
003C:  BCF    03.6
003D:  MOVF   29,W
003E:  BSF    03.6
003F:  MOVWF  0C
0040:  BCF    03.6
0041:  MOVF   2A,W
0042:  BSF    03.6
0043:  MOVWF  0E
0044:  BCF    03.6
0045:  MOVF   20,W
0046:  MOVWF  0A
0047:  SWAPF  21,W
0048:  MOVWF  03
0049:  SWAPF  7F,F
004A:  SWAPF  7F,W
004B:  RETFIE
004C:  BCF    0A.3
004D:  BCF    0A.4
004E:  GOTO   063
.................... //#include <Teclado_Motores.h> 
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
004F:  BCF    0A.0
0050:  BCF    0A.1
0051:  BCF    0A.2
0052:  ADDWF  02,F
0053:  RETLW  31
0054:  RETLW  32
0055:  RETLW  33
0056:  RETLW  41
0057:  RETLW  34
0058:  RETLW  35
0059:  RETLW  36
005A:  RETLW  42
005B:  RETLW  37
005C:  RETLW  38
005D:  RETLW  39
005E:  RETLW  43
005F:  RETLW  2A
0060:  RETLW  30
0061:  RETLW  23
0062:  RETLW  44
*
00D3:  DATA 0C,2B
00D4:  DATA 65,36
00D5:  DATA EF,31
00D6:  DATA 69,32
00D7:  DATA 61,32
00D8:  DATA 65,10
00D9:  DATA CD,37
00DA:  DATA F4,37
00DB:  DATA 72,05
00DC:  DATA 00,00
00DD:  DATA D0,30
00DE:  DATA F3,39
00DF:  DATA EF,1E
00E0:  DATA A5,31
00E1:  DATA 20,22
00E2:  DATA C3,1E
00E3:  DATA 25,32
00E4:  DATA 00,00
*
0219:  MOVLW  8E
021A:  MOVWF  77
021B:  MOVF   49,W
021C:  MOVWF  78
021D:  MOVF   48,W
021E:  MOVWF  79
021F:  CLRF   7A
0220:  MOVF   78,F
0221:  BTFSS  03.2
0222:  GOTO   22D
0223:  MOVF   79,W
0224:  MOVWF  78
0225:  CLRF   79
0226:  MOVLW  08
0227:  SUBWF  77,F
0228:  MOVF   78,F
0229:  BTFSS  03.2
022A:  GOTO   22D
022B:  CLRF   77
022C:  GOTO   235
022D:  BCF    03.0
022E:  BTFSC  78.7
022F:  GOTO   234
0230:  RLF    79,F
0231:  RLF    78,F
0232:  DECF   77,F
0233:  GOTO   22D
0234:  BCF    78.7
0235:  BCF    0A.3
0236:  BCF    0A.4
0237:  GOTO   5FE (RETURN)
0238:  MOVF   48,W
0239:  BTFSC  03.2
023A:  GOTO   2A8
023B:  MOVWF  50
023C:  MOVF   4C,W
023D:  BTFSC  03.2
023E:  GOTO   2A8
023F:  ADDWF  50,F
0240:  BTFSC  03.0
0241:  GOTO   249
0242:  MOVLW  7F
0243:  SUBWF  50,F
0244:  BTFSS  03.0
0245:  GOTO   2A8
0246:  BTFSC  03.2
0247:  GOTO   2A8
0248:  GOTO   24D
0249:  MOVLW  81
024A:  ADDWF  50,F
024B:  BTFSC  03.0
024C:  GOTO   2A8
024D:  MOVF   50,W
024E:  MOVWF  77
024F:  CLRF   78
0250:  CLRF   79
0251:  CLRF   7A
0252:  MOVF   49,W
0253:  MOVWF  54
0254:  BSF    54.7
0255:  MOVF   4A,W
0256:  MOVWF  53
0257:  MOVF   4B,W
0258:  MOVWF  52
0259:  MOVLW  18
025A:  MOVWF  50
025B:  CLRF   51
025C:  BTFSS  52.0
025D:  GOTO   276
025E:  MOVF   4F,W
025F:  ADDWF  7A,F
0260:  BTFSS  03.0
0261:  GOTO   268
0262:  INCF   79,F
0263:  BTFSS  03.2
0264:  GOTO   268
0265:  INCF   78,F
0266:  BTFSC  03.2
0267:  BSF    51.7
0268:  MOVF   4E,W
0269:  ADDWF  79,F
026A:  BTFSS  03.0
026B:  GOTO   26F
026C:  INCF   78,F
026D:  BTFSC  03.2
026E:  BSF    51.7
026F:  MOVF   4D,W
0270:  MOVWF  4A
0271:  BSF    4A.7
0272:  MOVF   4A,W
0273:  ADDWF  78,F
0274:  BTFSC  03.0
0275:  BSF    51.7
0276:  RLF    51,F
0277:  RRF    78,F
0278:  RRF    79,F
0279:  RRF    7A,F
027A:  RRF    54,F
027B:  RRF    53,F
027C:  RRF    52,F
027D:  BCF    03.0
027E:  DECFSZ 50,F
027F:  GOTO   25B
0280:  MOVLW  01
0281:  ADDWF  77,F
0282:  BTFSC  03.0
0283:  GOTO   2A8
0284:  BTFSC  78.7
0285:  GOTO   28D
0286:  RLF    54,F
0287:  RLF    7A,F
0288:  RLF    79,F
0289:  RLF    78,F
028A:  DECF   77,F
028B:  BTFSC  03.2
028C:  GOTO   2A8
028D:  BTFSS  54.7
028E:  GOTO   29E
028F:  INCF   7A,F
0290:  BTFSS  03.2
0291:  GOTO   29E
0292:  INCF   79,F
0293:  BTFSS  03.2
0294:  GOTO   29E
0295:  INCF   78,F
0296:  BTFSS  03.2
0297:  GOTO   29E
0298:  RRF    78,F
0299:  RRF    79,F
029A:  RRF    7A,F
029B:  INCF   77,F
029C:  BTFSC  03.2
029D:  GOTO   2A8
029E:  MOVF   49,W
029F:  MOVWF  51
02A0:  MOVF   4D,W
02A1:  XORWF  51,F
02A2:  BTFSS  51.7
02A3:  GOTO   2A6
02A4:  BSF    78.7
02A5:  GOTO   2AC
02A6:  BCF    78.7
02A7:  GOTO   2AC
02A8:  CLRF   77
02A9:  CLRF   78
02AA:  CLRF   79
02AB:  CLRF   7A
02AC:  BCF    0A.3
02AD:  BCF    0A.4
02AE:  GOTO   60F (RETURN)
02AF:  MOVLW  8E
02B0:  MOVWF  77
02B1:  MOVF   48,W
02B2:  SUBWF  77,F
02B3:  MOVF   49,W
02B4:  MOVWF  79
02B5:  MOVF   4A,W
02B6:  MOVWF  78
02B7:  BSF    79.7
02B8:  MOVF   77,F
02B9:  BTFSC  03.2
02BA:  GOTO   2C6
02BB:  BCF    03.0
02BC:  MOVF   79,F
02BD:  BTFSS  03.2
02BE:  GOTO   2C2
02BF:  MOVF   78,F
02C0:  BTFSC  03.2
02C1:  GOTO   2C6
02C2:  RRF    79,F
02C3:  RRF    78,F
02C4:  DECFSZ 77,F
02C5:  GOTO   2BB
02C6:  BTFSS  49.7
02C7:  GOTO   2CD
02C8:  COMF   78,F
02C9:  COMF   79,F
02CA:  INCF   78,F
02CB:  BTFSC  03.2
02CC:  INCF   79,F
02CD:  BCF    0A.3
02CE:  BCF    0A.4
02CF:  GOTO   618 (RETURN)
*
032D:  BSF    0A.0
032E:  BSF    0A.1
032F:  BCF    0A.2
0330:  ADDWF  02,F
0331:  GOTO   308
0332:  GOTO   310
0333:  GOTO   318
0334:  GOTO   320
*
0463:  MOVF   0B,W
0464:  MOVWF  48
0465:  BCF    0B.7
0466:  BSF    03.5
0467:  BSF    03.6
0468:  BSF    0C.7
0469:  BSF    0C.0
046A:  NOP
046B:  NOP
046C:  BCF    03.5
046D:  BCF    03.6
046E:  BTFSC  48.7
046F:  BSF    0B.7
0470:  BSF    03.6
0471:  MOVF   0C,W
0472:  ANDLW  7F
0473:  BTFSC  03.2
0474:  GOTO   4B7
0475:  BCF    03.6
0476:  MOVWF  48
0477:  BSF    03.6
0478:  MOVF   0D,W
0479:  BCF    03.6
047A:  MOVWF  49
047B:  BSF    03.6
047C:  MOVF   0F,W
047D:  BCF    03.6
047E:  MOVWF  4A
047F:  MOVF   48,W
0480:  MOVWF  4E
0481:  CALL   437
0482:  MOVF   49,W
0483:  BSF    03.6
0484:  MOVWF  0D
0485:  BCF    03.6
0486:  MOVF   4A,W
0487:  BSF    03.6
0488:  MOVWF  0F
0489:  BCF    03.6
048A:  MOVF   0B,W
048B:  MOVWF  4B
048C:  BCF    0B.7
048D:  BSF    03.5
048E:  BSF    03.6
048F:  BSF    0C.7
0490:  BSF    0C.0
0491:  NOP
0492:  NOP
0493:  BCF    03.5
0494:  BCF    03.6
0495:  BTFSC  4B.7
0496:  BSF    0B.7
0497:  BSF    03.6
0498:  RLF    0C,W
0499:  RLF    0E,W
049A:  ANDLW  7F
049B:  BTFSC  03.2
049C:  GOTO   4B7
049D:  BCF    03.6
049E:  MOVWF  48
049F:  BSF    03.6
04A0:  MOVF   0D,W
04A1:  BCF    03.6
04A2:  MOVWF  49
04A3:  BSF    03.6
04A4:  MOVF   0F,W
04A5:  BCF    03.6
04A6:  MOVWF  4A
04A7:  MOVF   48,W
04A8:  MOVWF  4E
04A9:  CALL   437
04AA:  MOVF   49,W
04AB:  BSF    03.6
04AC:  MOVWF  0D
04AD:  BCF    03.6
04AE:  MOVF   4A,W
04AF:  BSF    03.6
04B0:  MOVWF  0F
04B1:  INCF   0D,F
04B2:  BTFSC  03.2
04B3:  INCF   0F,F
04B4:  BCF    03.6
04B5:  GOTO   463
04B6:  BSF    03.6
04B7:  BCF    03.6
04B8:  BCF    0A.3
04B9:  BCF    0A.4
04BA:  GOTO   680 (RETURN)
04BB:  MOVF   0B,W
04BC:  MOVWF  49
04BD:  BCF    0B.7
04BE:  BSF    03.5
04BF:  BSF    03.6
04C0:  BSF    0C.7
04C1:  BSF    0C.0
04C2:  NOP
04C3:  NOP
04C4:  BCF    03.5
04C5:  BCF    03.6
04C6:  BTFSC  49.7
04C7:  BSF    0B.7
04C8:  BTFSC  03.0
04C9:  GOTO   4F2
04CA:  BSF    03.6
04CB:  MOVF   0C,W
04CC:  ANDLW  7F
04CD:  BCF    03.6
04CE:  MOVWF  49
04CF:  BSF    03.6
04D0:  MOVF   0D,W
04D1:  BCF    03.6
04D2:  MOVWF  4A
04D3:  BSF    03.6
04D4:  MOVF   0F,W
04D5:  BCF    03.6
04D6:  MOVWF  4B
04D7:  MOVF   49,W
04D8:  MOVWF  4E
04D9:  CALL   437
04DA:  MOVF   4A,W
04DB:  BSF    03.6
04DC:  MOVWF  0D
04DD:  BCF    03.6
04DE:  MOVF   4B,W
04DF:  BSF    03.6
04E0:  MOVWF  0F
04E1:  BCF    03.6
04E2:  MOVF   0B,W
04E3:  MOVWF  4C
04E4:  BCF    0B.7
04E5:  BSF    03.5
04E6:  BSF    03.6
04E7:  BSF    0C.7
04E8:  BSF    0C.0
04E9:  NOP
04EA:  NOP
04EB:  BCF    03.5
04EC:  BCF    03.6
04ED:  BTFSC  4C.7
04EE:  BSF    0B.7
04EF:  DECFSZ 48,F
04F0:  GOTO   4F2
04F1:  GOTO   511
04F2:  BSF    03.6
04F3:  RLF    0C,W
04F4:  RLF    0E,W
04F5:  ANDLW  7F
04F6:  BCF    03.6
04F7:  MOVWF  49
04F8:  BSF    03.6
04F9:  MOVF   0D,W
04FA:  BCF    03.6
04FB:  MOVWF  4A
04FC:  BSF    03.6
04FD:  MOVF   0F,W
04FE:  BCF    03.6
04FF:  MOVWF  4B
0500:  MOVF   49,W
0501:  MOVWF  4E
0502:  CALL   437
0503:  MOVF   4A,W
0504:  BSF    03.6
0505:  MOVWF  0D
0506:  BCF    03.6
0507:  MOVF   4B,W
0508:  BSF    03.6
0509:  MOVWF  0F
050A:  INCF   0D,F
050B:  BTFSC  03.2
050C:  INCF   0F,F
050D:  BCF    03.0
050E:  BCF    03.6
050F:  DECFSZ 48,F
0510:  GOTO   4BB
0511:  RETURN
0512:  MOVF   4F,W
0513:  CLRF   78
0514:  SUBWF  4E,W
0515:  BTFSC  03.0
0516:  GOTO   51A
0517:  MOVF   4E,W
0518:  MOVWF  77
0519:  GOTO   526
051A:  CLRF   77
051B:  MOVLW  08
051C:  MOVWF  50
051D:  RLF    4E,F
051E:  RLF    77,F
051F:  MOVF   4F,W
0520:  SUBWF  77,W
0521:  BTFSC  03.0
0522:  MOVWF  77
0523:  RLF    78,F
0524:  DECFSZ 50,F
0525:  GOTO   51D
0526:  RETURN
0527:  MOVLW  20
0528:  BTFSS  49.4
0529:  MOVLW  30
052A:  MOVWF  4A
052B:  MOVF   48,W
052C:  MOVWF  77
052D:  BTFSS  48.7
052E:  GOTO   537
052F:  COMF   77,F
0530:  INCF   77,F
0531:  MOVF   77,W
0532:  MOVWF  48
0533:  MOVLW  2D
0534:  MOVWF  4A
0535:  BSF    49.7
0536:  BSF    49.0
0537:  MOVF   48,W
0538:  MOVWF  4E
0539:  MOVLW  64
053A:  MOVWF  4F
053B:  CALL   512
053C:  MOVF   77,W
053D:  MOVWF  48
053E:  MOVLW  30
053F:  ADDWF  78,W
0540:  MOVWF  4B
0541:  MOVF   48,W
0542:  MOVWF  4E
0543:  MOVLW  0A
0544:  MOVWF  4F
0545:  CALL   512
0546:  MOVLW  30
0547:  ADDWF  77,W
0548:  MOVWF  4D
0549:  MOVLW  30
054A:  ADDWF  78,W
054B:  MOVWF  4C
054C:  MOVF   4A,W
054D:  MOVWF  77
054E:  MOVLW  30
054F:  SUBWF  4B,W
0550:  BTFSC  03.2
0551:  GOTO   556
0552:  BSF    49.1
0553:  BTFSC  49.7
0554:  BSF    49.2
0555:  GOTO   56A
0556:  MOVF   4A,W
0557:  MOVWF  4B
0558:  MOVLW  20
0559:  MOVWF  4A
055A:  MOVLW  30
055B:  SUBWF  4C,W
055C:  BTFSC  03.2
055D:  GOTO   562
055E:  BSF    49.0
055F:  BTFSC  49.7
0560:  BSF    49.1
0561:  GOTO   56A
0562:  BTFSS  03.2
0563:  BSF    49.0
0564:  BTFSS  03.2
0565:  GOTO   56A
0566:  MOVF   4B,W
0567:  MOVWF  4C
0568:  MOVLW  20
0569:  MOVWF  4B
056A:  BTFSC  49.2
056B:  GOTO   571
056C:  BTFSC  49.1
056D:  GOTO   574
056E:  BTFSC  49.0
056F:  GOTO   577
0570:  GOTO   57A
0571:  MOVF   4A,W
0572:  MOVWF  4E
0573:  CALL   437
0574:  MOVF   4B,W
0575:  MOVWF  4E
0576:  CALL   437
0577:  MOVF   4C,W
0578:  MOVWF  4E
0579:  CALL   437
057A:  MOVF   4D,W
057B:  MOVWF  4E
057C:  CALL   437
057D:  BCF    0A.3
057E:  BCF    0A.4
057F:  GOTO   69C (RETURN)
....................  
.................... #list 
....................  
.................... #device ADC=10 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal=20000000) 
*
0102:  MOVLW  4F
0103:  MOVWF  04
0104:  BCF    03.7
0105:  MOVF   00,W
0106:  BTFSC  03.2
0107:  GOTO   115
0108:  MOVLW  06
0109:  MOVWF  78
010A:  CLRF   77
010B:  DECFSZ 77,F
010C:  GOTO   10B
010D:  DECFSZ 78,F
010E:  GOTO   10A
010F:  MOVLW  7B
0110:  MOVWF  77
0111:  DECFSZ 77,F
0112:  GOTO   111
0113:  DECFSZ 00,F
0114:  GOTO   108
0115:  RETURN
....................  
.................... #include <kbd4.C> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                             KBD4.C                                //// 
.................... ////                  Generic keypad scan driver                       //// 
.................... ////                                                                   //// 
.................... //// Unlike the older kbd.c driver, this driver:                       //// 
.................... ////     * KBD_USES_PULLUPS can be used to configure use with pullups  //// 
.................... ////       or no pullups.  If KBD_USES_PULLUPS is defined, than it     //// 
.................... ////       is assumed that the keypad rows have pullup resistors and   //// 
.................... ////       then this library will ground the column pins and scan      //// 
.................... ////       the row pins for any presses.  If KBD_USES_PULLUPS isnt     //// 
.................... ////       defined, then this library will put voltage signal on the   //// 
.................... ////       column pins and then row pins will be scanned for any       //// 
.................... ////       presses.                                                    //// 
.................... ////     * the KBD_COLx and KBD_ROWx pins can be individually          //// 
.................... ////       configured, the keypad doesn't have to be on one GPIO       //// 
.................... ////       port.                                                       //// 
.................... ////     * number of rows and columns can be adjusted.                 //// 
.................... ////     * debounce method based on a timer, instead of being based on //// 
.................... ////       how often kbd_getc() is called.                             //// 
.................... ////                                                                   //// 
.................... //// Tick library must be included in your project, used by this       //// 
.................... //// library for debounce timing.  To add the tick library in your     //// 
.................... //// project, just #include <tick.c>                                   //// 
.................... ////                                                                   //// 
.................... ////  kbd_init()   Must be called before any other function.           //// 
.................... ////                                                                   //// 
.................... ////  kbd_kbhit()  Scans and debounces keypad for new keys.  Returns   //// 
.................... ////     true if there is char that can be read with kbd_getc().       //// 
.................... ////     This function should be called frequently so as not to miss   //// 
.................... ////     a keypress.  kbd_getc() also calls kbd_kbhit(), so if you     //// 
.................... ////     only call kbd_getc() in your function it will still scan      //// 
.................... ////     they keypad.                                                  //// 
.................... ////                                                                   //// 
.................... ////  c = kbd_getc()  Will return a key value if pressed or 0x00 if    //// 
.................... ////                   not.  Also calls kbd_kbhit() to scan for        //// 
.................... ////                   keypresses first, so look at the documentation  //// 
.................... ////                   for kbd_kbhit() above. Any key held down will   //// 
.................... ////                   be ignored until released and pressed again.    //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __KBD4_C__ 
.................... #define __KBD4_C__ 
....................  
.................... #include <tick.c> 
.................... /* 
....................    Tick.c 
....................     
....................    Uses a PIC's timer peripheral to create a tick system that increments at 
....................    a rate of TICKS_PER_SECOND. 
....................     
....................    See Tick.h for documentation. 
.................... */ 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2015 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... ////                     http://www.ccsinfo.com                        //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __TICK_C__ 
.................... #define __TICK_C__ 
....................  
.................... #include <tick.h> 
.................... /****************************************************************************** 
....................  
....................    Tick.h 
....................     
....................    Uses a PIC's timer peripheral to create a tick system that increments at 
....................    a rate of TICKS_PER_SECOND.  On PIC12-PIC16 Timer 1 is used. On PIC18  
....................    Timer 0 is used.  On PIC24, dsPIC30, dsPIC33 and PIC32 Timer 1 is used. 
....................     
....................    Interrupt usage is optional.  If you want to use interrupts, define 
....................    TICK_USES_ISR to configure library to use interrupts.  The library 
....................    will enable the proper peripheral/timer interrupt, if using an  
....................    8-bit PICmicro (PIC16, PIC18, etc) then the user will need to enable 
....................    the global interrupt enable (enable_interrupts(GLOBAL)). 
....................   
....................    If interrupts are not used then the timer overflow is polled in TickGet(). 
....................    If you are not polling TickGet()/TickTask() often, then add a 
....................    TickGet() in your main loop to check for overflows.  On PIC12-PIC16, at 
....................    maximum oscillator speed the overflow will happen over 9 times a second; 
....................    that means TickGet()/TickTask() must be called more than 9 times a second 
....................    on these PICs or there will be some timing errors.  On a PIC24/dsPIC33 at 
....................    140MHz (70MIPS) the overflow will happen over 4 times a second. 
....................     
....................    A #use delay() must have already been used before including this file so the 
....................    library knows what clock speed is being used. 
....................     
....................    This library largely acts as a wrapper to the built-in library #use timer(). 
....................  
.................... *****************************************************************************/ 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2015 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... ////                     http://www.ccsinfo.com                        //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __TICK_H__ 
.................... #define __TICK_H__ 
....................  
.................... #include <stdint.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... ////                           stdint.h                                //// 
.................... ////                                                                   //// 
.................... //// Standard integer definitions.                                     //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDINT 
....................  
.................... #define _STDINT 
....................  
.................... //////////// exact width 
....................  
.................... typedef signed int8 int8_t; 
.................... typedef unsigned int8 uint8_t; 
.................... typedef signed int16 int16_t; 
.................... typedef unsigned int16 uint16_t; 
.................... typedef signed int32 int32_t; 
.................... typedef unsigned int32 uint32_t; 
....................  
.................... #if defined(__PCD__) 
.................... //typedef signed int24 int24_t; 
.................... //typedef unsigned int24 uint24_t; 
.................... typedef signed int64 int64_t; 
.................... typedef unsigned int64 uint64_t; 
.................... #endif 
....................  
.................... #define INT8_MAX  (127) 
.................... #define INT8_MIN  (-128) 
.................... #define UINT8_MAX (255) 
....................  
.................... #define INT16_MAX  (32767) 
.................... #define INT16_MIN  (-32768) 
.................... #define UINT16_MAX (65535) 
....................  
.................... #define INT32_MAX  (2147483647) 
.................... #define INT32_MIN  (-2147483648) 
.................... #define UINT32_MAX (4294967295) 
....................  
.................... #if defined(__PCD__) 
.................... //#define INT24_MAX  (8388607) 
.................... //#define INT24_MIN  (-8388608) 
.................... //#define UINT24_MAX (16777215) 
....................  
.................... #define INT64_MAX  (9223372036854775807) 
.................... #define INT64_MIN  (-9223372036854775808) 
.................... #define UINT64_MAX (18446744073709551615) 
.................... #endif 
....................  
.................... ///////// minimum width 
....................  
.................... typedef signed int8 int_least8_t; 
.................... typedef unsigned int8 uint_least8_t; 
.................... typedef signed int16 int_least16_t; 
.................... typedef unsigned int16 uint_least16_t; 
.................... typedef signed int32 int_least32_t; 
.................... typedef unsigned int32 uint_least32_t; 
....................  
.................... #if defined(__PCD__) 
.................... //typedef signed int24 int_least24_t; 
.................... //typedef unsigned int24 uint_least24_t; 
.................... typedef signed int64 int_least64_t; 
.................... typedef unsigned int64 uint_least64_t; 
.................... #endif 
....................  
.................... #define INT_LEAST8_MAX  (127) 
.................... #define INT_LEAST8_MIN  (-128) 
.................... #define UINT_LEAST8_MAX (255) 
....................  
.................... #define INT_LEAST16_MAX  (32767) 
.................... #define INT_LEAST16_MIN  (-32768) 
.................... #define UINT_LEAST16_MAX (65535) 
....................  
.................... #define INT_LEAST32_MAX  (2147483647) 
.................... #define INT_LEAST32_MIN  (-2147483648) 
.................... #define UINT_LEAST32_MAX (4294967295) 
....................  
.................... #if defined(__PCD__) 
.................... //#define INT_LEAST24_MAX  (8388607) 
.................... //#define INT_LEAST24_MIN  (-8388608) 
.................... //#define UINT_LEAST24_MAX (16777215) 
....................  
.................... #define INT_LEAST64_MAX  (9223372036854775807) 
.................... #define INT_LEAST64_MIN  (-9223372036854775808) 
.................... #define UINT_LEAST64_MAX (18446744073709551615) 
.................... #endif 
....................  
.................... ///////// fastest width 
....................  
.................... #if defined(__PCD__) 
.................... typedef signed int16 int_fast8_t; 
.................... typedef unsigned int16 uint_fast8_t; 
.................... #define INT_FAST8_MAX  (32767) 
.................... #define INT_FAST8_MIN  (-32768) 
.................... #define UINT_FAST8_MAX (65535) 
.................... typedef signed int16 int_fast16_t; 
.................... typedef unsigned int16 uint_fast16_t; 
.................... //typedef signed int24 int_fast24_t; 
.................... //typedef unsigned int24 uint_fast24_t; 
.................... typedef signed int64 int_fast64_t; 
.................... typedef unsigned int64 uint_fast64_t; 
.................... #else 
.................... typedef signed int8 int_fast8_t; 
.................... typedef unsigned int8 uint_fast8_t; 
.................... #define INT_FAST8_MAX  (127) 
.................... #define INT_FAST8_MIN  (-128) 
.................... #define UINT_FAST8_MAX (255) 
.................... typedef signed int16 int_fast16_t; 
.................... typedef unsigned int16 uint_fast16_t; 
.................... #endif 
....................  
.................... typedef signed int32 int_fast32_t; 
.................... typedef unsigned int32 uint_fast32_t; 
....................  
.................... #define INT_FAST16_MAX  (32767) 
.................... #define INT_FAST16_MIN  (-32768) 
.................... #define UINT_FAST16_MAX (65535) 
....................  
.................... #define INT_FAST32_MAX  (2147483647) 
.................... #define INT_FAST32_MIN  (-2147483648) 
.................... #define UINT_FAST32_MAX (4294967295) 
....................  
.................... #if defined(__PCD__) 
.................... //#define INT_FAST24_MAX  (8388607) 
.................... //#define INT_FAST24_MIN  (-8388608) 
.................... //#define UINT_FAST24_MAX (16777215) 
....................  
.................... #define INT_FAST64_MAX  (9223372036854775807) 
.................... #define INT_FAST64_MIN  (-9223372036854775808) 
.................... #define UINT_FAST64_MAX (18446744073709551615) 
.................... #endif 
....................  
.................... //////////// big enough to hold pointers (OPTIONAL) 
....................  
.................... #if defined(__PCD__) 
....................    typedef unsigned int32 uintptr_t; 
....................    typedef signed int32 intptr_t; 
.................... #else 
....................    typedef unsigned int16 uintptr_t; 
....................    typedef signed int16 intptr_t; 
.................... #endif 
....................  
.................... #define INT8_C(val) ((int8_t)val) 
.................... #define UINT8_C(val) ((uint8_t)val) 
.................... #define INT16_C(val) ((int16_t)val) 
.................... #define UINT16_C(val) ((uint16_t)val) 
.................... #define INT32_C(val) ((int32_t)val) 
.................... #define UINT32_C(val) ((uint32_t)val) 
....................  
.................... #if defined(__PCD__) 
.................... #define INT64_C(val) ((int64_t)val) 
.................... #define UINT64_C(val) ((uint64_t)val) 
.................... #endif 
....................  
.................... /// TODO: 
.................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX 
....................  
....................  
.................... /////////// greatest width (OPTIONAL) 
....................  
.................... /// TODO 
....................  
.................... /// intmax_t uintmax_t 
....................  
.................... /// INTMAXN_MIN INTMAXN_MAX UINTMAXN_MAX 
....................  
.................... /// INTMAX_C(value) UINTMAX_C(value) 
....................  
....................  
.................... #endif 
....................  
....................  
.................... // Data type returned by TickGet() 
.................... #if defined(TICK_IS_16BITS) 
.................... typedef uint16_t TICK; 
.................... #define __TICK_RESOLUTION_BITS 16 
.................... #else 
.................... typedef uint32_t TICK; 
.................... #define __TICK_RESOLUTION_BITS 32 
.................... #endif 
....................  
.................... // Initialize the Tick system, including turning on and configuring the proper 
.................... // timer peripheral on the PICmicro. 
.................... void TickInit(void); 
....................  
.................... // Get current TICK time.  TICK increments at a rate of TICKS_PER_SECOND. 
.................... TICK TickGet(void); 
....................  
.................... #define TickTask() TickGet() 
....................  
.................... // Delay (deadlock) for 'duration' ticks. 
.................... void TickDelay(TICK duration); 
....................  
.................... // Delay (deadlock) for 'duration' ticks, but restart WDT during delay. 
.................... void TickDelayWDT(TICK duration); 
....................  
.................... // convert 'ms' milliseconds to TICK. 
.................... TICK TickFromMs(unsigned int16 ms); 
....................  
.................... // Delay (deadlock) for 'duration' milliseconds. 
.................... void TickDelayMs(unsigned int16 duration); 
....................  
.................... // Delay (deadlock) for 'duration' milliseconds, but restart WDT during delay. 
.................... void TickDelayMsWDT(unsigned int16 duration); 
....................  
.................... #define TickIsExpired(start, duration) ((TickGet() - (TICK)start) >= (TICK)(duration)) 
....................  
.................... #ifndef __CCS_USE_TIMER_PERIPH 
.................... #if defined(__PCD__) || defined(__PCM__) 
....................    //PIC12-PIC16, PIC24, dsPIC30, dsPIC33 
....................    #define __CCS_USE_TIMER_PERIPH 1 
.................... #else 
....................    //PIC18 
....................    #define __CCS_USE_TIMER_PERIPH 0 
.................... #endif 
.................... #endif 
....................  
.................... #ifndef TICK_CONFIGURE_RATE 
....................    #define TICK_CONFIGURE_RATE   1ms 
.................... #endif 
....................  
.................... #if defined(TICK_USES_ISR) 
....................    #use timer(timer=__CCS_USE_TIMER_PERIPH, tick=TICK_CONFIGURE_RATE, stream=STREAM_TIMER_TICK, bits=__TICK_RESOLUTION_BITS, ISR, define=TICKS_PER_SECOND) 
.................... #else 
....................    #use timer(timer=__CCS_USE_TIMER_PERIPH, tick=TICK_CONFIGURE_RATE, stream=STREAM_TIMER_TICK, bits=__TICK_RESOLUTION_BITS, NOISR, define=TICKS_PER_SECOND) 
*
0335:  MOVF   0F,W
0336:  MOVWF  7A
0337:  MOVF   0E,W
0338:  MOVWF  77
0339:  MOVF   0F,W
033A:  SUBWF  7A,W
033B:  BTFSS  03.2
033C:  GOTO   335
033D:  MOVF   77,W
033E:  BTFSS  0C.0
033F:  GOTO   352
0340:  MOVLW  01
0341:  ADDWF  2B,F
0342:  BTFSC  03.0
0343:  INCF   2C,F
0344:  BTFSC  03.2
0345:  INCF   2D,F
0346:  BTFSC  03.2
0347:  INCF   2E,F
0348:  BCF    0C.0
0349:  MOVF   0F,W
034A:  MOVWF  7A
034B:  MOVF   0E,W
034C:  MOVWF  77
034D:  MOVF   0F,W
034E:  SUBWF  7A,W
034F:  BTFSS  03.2
0350:  GOTO   349
0351:  MOVF   77,W
0352:  MOVF   7A,W
0353:  MOVWF  77
0354:  MOVF   2B,W
0355:  MOVWF  78
0356:  MOVF   2C,W
0357:  MOVWF  79
0358:  MOVF   2D,W
0359:  MOVWF  7A
035A:  MOVF   2E,W
035B:  MOVWF  4A
035C:  RRF    4A,F
035D:  RRF    7A,F
035E:  RRF    79,F
035F:  RRF    78,F
0360:  RRF    77,F
.................... #endif 
....................     
.................... #endif   //ifndef __TICK_H__ 
....................  
....................  
.................... void TickInit(void) 
.................... { 
....................    // nothing to do, this is done by the #use timer 
.................... } 
....................  
.................... TICK TickGet(void) 
.................... { 
....................    return(get_ticks(STREAM_TIMER_TICK)); 
0361:  RETURN
.................... } 
....................  
.................... void TickDelay(TICK duration) 
.................... { 
....................    TICK t; 
....................     
....................    t = TickGet(); 
....................     
....................    while(!TickIsExpired(t, duration)) { } 
.................... } 
....................  
.................... // Delay (deadlock) for 'duration' ticks, but restart WDT during delay. 
.................... void TickDelayWDT(TICK duration) 
.................... { 
....................    TICK t; 
....................     
....................    t = TickGet(); 
....................     
....................    while(!TickIsExpired(t, duration))    
....................    { 
....................       restart_wdt(); 
....................    } 
.................... } 
....................  
.................... TICK TickFromMs(unsigned int16 ms) 
.................... { 
....................    unsigned int32 scr32; 
....................     
....................    scr32 = ms; 
....................    scr32 *= TICKS_PER_SECOND; 
....................    scr32 /= 1000; 
....................     
....................    return(scr32); 
.................... } 
....................  
.................... void TickDelayMs(unsigned int16 duration) 
.................... { 
....................    TickDelay(TickFromMs(duration)); 
.................... } 
....................  
.................... void TickDelayMsWDT(unsigned int16 duration) 
.................... { 
....................    TickDelayWDT(TickFromMs(duration)); 
.................... } 
....................  
.................... // add functions to be time.h compatible 
.................... #if defined(__TIME_H__) && !defined(__TIME_C__) 
....................  
.................... #ifndef TickDiffernce 
....................  #define TickDiffernce(a,b)   (a-b) 
.................... #endif 
....................  
.................... #ifndef NULL 
....................  #define NULL  0 
.................... #endif 
....................  
.................... #define CLOCKS_PER_SECOND     TICKS_PER_SECOND 
....................  
.................... #include <time.c> 
....................  
.................... /* Globals & Resources */ 
.................... static time_t calendar_time; //seconds since Jan 1, 1970 00:00:00 or January 1 2010 00:00:00 if TIME_T_USES_2010 was defined 
.................... TICK TimeTick; 
....................  
.................... /* Returns processor time used by program (clock ticks) */ 
.................... clock_t clock(void) 
.................... { 
....................    return(TickGet()); 
.................... } 
....................  
.................... /* Returns the current calendar time. */ 
.................... time_t time(time_t * timer) 
.................... { 
....................    if(timer != NULL) 
....................       *timer = calendar_time; 
....................        
....................    return(calendar_time); 
.................... } 
....................  
.................... /* Sets the current calendar time (in seconds)from the given time. */ 
.................... void SetTime(struct_tm * nTime) 
.................... {  
....................    calendar_time = mktime(nTime); 
.................... } 
....................  
.................... /* Sets the calendar time to this time. */ 
.................... void SetTimeSec(time_t sTime) 
.................... { 
....................    calendar_time = sTime; 
.................... } 
....................  
.................... /* Returns the current time as a time struct. */ 
.................... void GetTime(struct_tm *pRetTm) 
.................... { 
....................    struct_tm *Time; 
....................     
....................    Time = localtime(&calendar_time); 
....................     
....................    memcpy(pRetTm, Time, sizeof(struct_tm)); 
.................... } 
....................  
.................... /* Initializes */ 
.................... void TimeInit(void) 
.................... { 
....................    calendar_time = 0; 
....................    TimeTick = TickGet(); 
.................... } 
....................  
.................... /* Task function for increamenting calendar time.  
....................    - This need to be called inorder to increament time_t calandar_time variable. 
.................... */ 
.................... void TimeTask(void) 
.................... { 
....................    TICK cTick; 
....................     
....................    cTick = TickGet(); 
....................     
....................    while(TickDiffernce(cTick, TimeTick) >= (CLOCKS_PER_SECOND)) 
....................    { 
....................       calendar_time++; 
....................       TimeTick += CLOCKS_PER_SECOND; 
....................    } 
.................... } 
....................  
.................... #endif   //__TIME_H__ 
.................... #endif   //ifndef __TICK_H__ 
....................  
....................  
.................... #ifndef KBD_RISE_TIME 
.................... #define KBD_RISE_TIME() delay_us(25) 
.................... #endif 
....................  
.................... #ifndef KBD_NUM_ROWS 
.................... #define KBD_NUM_ROWS 4 
.................... #endif 
....................  
.................... #ifndef KBD_NUM_COLS 
.................... #define KBD_NUM_COLS 4 
.................... #endif 
....................  
.................... #ifndef KBD_COL1 
.................... #define KBD_COL1  PIN_D0 
.................... #endif 
....................  
.................... #if !defined(KBD_COL2) && (KBD_NUM_COLS>=2) 
.................... #define KBD_COL2  PIN_D1 
.................... #endif 
....................  
.................... #if !defined(KBD_COL3) && (KBD_NUM_COLS>=3) 
.................... #define KBD_COL3  PIN_D2 
.................... #endif 
....................  
.................... #if !defined(KBD_COL4) && (KBD_NUM_COLS>=4) 
.................... #define KBD_COL4  PIN_D3 
.................... #endif 
....................  
.................... #ifndef KBD_ROW1 
.................... #define KBD_ROW1  PIN_D4 
.................... #endif 
....................  
.................... #if !defined(KBD_ROW2) && (KBD_NUM_ROWS>=2) 
.................... #define KBD_ROW2  PIN_D5 
.................... #endif 
....................  
.................... #if !defined(KBD_ROW3) && (KBD_NUM_ROWS>=3) 
.................... #define KBD_ROW3  PIN_D6 
.................... #endif 
....................  
.................... #if !defined(KBD_ROW4) && (KBD_NUM_ROWS>=4) 
.................... #define KBD_ROW4  PIN_D7 
.................... #endif 
....................  
.................... #if !defined(KBD_USE_EXTERNAL_KEYS) 
.................... // Keypad layout: 
.................... const char KEYS[KBD_NUM_ROWS][KBD_NUM_COLS] = 
....................   {{'1','2','3','A'}, 
....................    {'4','5','6','B'}, 
....................    {'7','8','9','C'}, 
....................    {'*','0','#','D'}}; 
.................... #endif 
....................  
.................... void kbd_init()  
.................... { 
.................... #if !defined(KBD_USES_PULLUPS) 
....................    output_low(KBD_COL1); 
*
00E5:  BSF    03.5
00E6:  BCF    08.0
00E7:  BCF    03.5
00E8:  BCF    08.0
....................    #if defined(KBD_COL2) 
....................    output_low(KBD_COL2); 
00E9:  BSF    03.5
00EA:  BCF    08.1
00EB:  BCF    03.5
00EC:  BCF    08.1
....................    #endif 
....................    #if defined(KBD_COL3) 
....................    output_low(KBD_COL3); 
00ED:  BSF    03.5
00EE:  BCF    08.2
00EF:  BCF    03.5
00F0:  BCF    08.2
....................    #endif 
....................    #if defined(KBD_COL4) 
....................    output_low(KBD_COL4); 
00F1:  BSF    03.5
00F2:  BCF    08.3
00F3:  BCF    03.5
00F4:  BCF    08.3
....................    #endif 
....................  
....................    output_drive(KBD_COL1); 
00F5:  BSF    03.5
00F6:  BCF    08.0
....................    #if defined(KBD_COL2) 
....................    output_drive(KBD_COL2); 
00F7:  BCF    08.1
....................    #endif 
....................    #if defined(KBD_COL3) 
....................    output_drive(KBD_COL3); 
00F8:  BCF    08.2
....................    #endif 
....................    #if defined(KBD_COL4) 
....................    output_drive(KBD_COL4); 
00F9:  BCF    08.3
....................    #endif 
....................     
....................    output_float(KBD_ROW1); 
00FA:  BSF    08.4
....................    #if defined(KBD_ROW2) 
....................    output_float(KBD_ROW2); 
00FB:  BSF    08.5
....................    #endif 
....................    #if defined(KBD_ROW3) 
....................    output_float(KBD_ROW3); 
00FC:  BSF    08.6
....................    #endif 
....................    #if defined(KBD_ROW4) 
....................    output_float(KBD_ROW4); 
00FD:  BSF    08.7
....................    #endif 
.................... #else 
00FE:  BCF    03.5
00FF:  BCF    0A.3
0100:  BCF    0A.4
0101:  GOTO   5EB (RETURN)
....................    output_float(KBD_COL1); 
....................    #if defined(KBD_COL2) 
....................    output_float(KBD_COL2); 
....................    #endif 
....................    #if defined(KBD_COL3) 
....................    output_float(KBD_COL3); 
....................    #endif 
....................    #if defined(KBD_COL4) 
....................    output_float(KBD_COL4); 
....................    #endif 
....................     
....................    output_float(KBD_ROW1); 
....................    #if defined(KBD_ROW2) 
....................    output_float(KBD_ROW2); 
....................    #endif 
....................    #if defined(KBD_ROW3) 
....................    output_float(KBD_ROW3); 
....................    #endif 
....................    #if defined(KBD_ROW4) 
....................    output_float(KBD_ROW4); 
....................    #endif 
.................... #endif 
.................... } 
....................  
.................... #if !defined(KBD_USES_PULLUPS) 
.................... static void _kbd_col(int i) 
.................... { 
....................    output_low(KBD_COL1); 
*
02D0:  BSF    03.5
02D1:  BCF    08.0
02D2:  BCF    03.5
02D3:  BCF    08.0
....................    #if defined(KBD_COL2) 
....................    output_low(KBD_COL2); 
02D4:  BSF    03.5
02D5:  BCF    08.1
02D6:  BCF    03.5
02D7:  BCF    08.1
....................    #endif 
....................    #if defined(KBD_COL3) 
....................    output_low(KBD_COL3); 
02D8:  BSF    03.5
02D9:  BCF    08.2
02DA:  BCF    03.5
02DB:  BCF    08.2
....................    #endif 
....................    #if defined(KBD_COL4) 
....................    output_low(KBD_COL4); 
02DC:  BSF    03.5
02DD:  BCF    08.3
02DE:  BCF    03.5
02DF:  BCF    08.3
....................    #endif 
....................  
....................    switch(i) 
02E0:  MOVF   4C,W
02E1:  BTFSC  03.2
02E2:  GOTO   2ED
02E3:  XORLW  01
02E4:  BTFSC  03.2
02E5:  GOTO   2F2
02E6:  XORLW  03
02E7:  BTFSC  03.2
02E8:  GOTO   2F7
02E9:  XORLW  01
02EA:  BTFSC  03.2
02EB:  GOTO   2FC
02EC:  GOTO   301
....................    { 
....................       case 0:  output_high(KBD_COL1);  break; 
02ED:  BSF    03.5
02EE:  BCF    08.0
02EF:  BCF    03.5
02F0:  BSF    08.0
02F1:  GOTO   301
....................       #if defined(KBD_COL2) 
....................       case 1:  output_high(KBD_COL2);  break; 
02F2:  BSF    03.5
02F3:  BCF    08.1
02F4:  BCF    03.5
02F5:  BSF    08.1
02F6:  GOTO   301
....................       #endif 
....................       #if defined(KBD_COL3) 
....................       case 2:  output_high(KBD_COL3);  break; 
02F7:  BSF    03.5
02F8:  BCF    08.2
02F9:  BCF    03.5
02FA:  BSF    08.2
02FB:  GOTO   301
....................       #endif 
....................       #if defined(KBD_COL4) 
....................       case 3:  output_high(KBD_COL4);  break; 
02FC:  BSF    03.5
02FD:  BCF    08.3
02FE:  BCF    03.5
02FF:  BSF    08.3
0300:  GOTO   301
....................       #endif 
....................       default: break; 
....................    } 
0301:  RETURN
.................... } 
.................... #else 
.................... static void _kbd_col(int i) 
.................... { 
....................    output_float(KBD_COL1); 
....................    #if defined(KBD_COL2) 
....................    output_float(KBD_COL2); 
....................    #endif 
....................    #if defined(KBD_COL3) 
....................    output_float(KBD_COL3); 
....................    #endif 
....................    #if defined(KBD_COL4) 
....................    output_float(KBD_COL4); 
....................    #endif 
....................  
....................    KBD_RISE_TIME(); 
....................  
....................    switch(i) 
....................    { 
....................       case 0:  output_low(KBD_COL1);  output_drive(KBD_COL1);  break; 
....................       #if defined(KBD_COL2) 
....................       case 1:  output_low(KBD_COL2);  output_drive(KBD_COL2);  break; 
....................       #endif 
....................       #if defined(KBD_COL3) 
....................       case 2:  output_low(KBD_COL3);  output_drive(KBD_COL3);  break; 
....................       #endif 
....................       #if defined(KBD_COL4) 
....................       case 3:  output_low(KBD_COL4);  output_drive(KBD_COL4);  break; 
....................       #endif 
....................       default: break; 
....................    } 
.................... } 
.................... #endif 
....................  
.................... #if !defined(KBD_USES_PULLUPS) 
.................... static int1 _kbd_row(int i) 
.................... { 
....................    switch(i) 
0302:  MOVF   4C,W
0303:  ADDLW  FC
0304:  BTFSC  03.0
0305:  GOTO   328
0306:  ADDLW  04
0307:  GOTO   32D
....................    { 
....................       case 0:  return(input(KBD_ROW1)); 
0308:  BSF    03.5
0309:  BSF    08.4
030A:  MOVLW  00
030B:  BCF    03.5
030C:  BTFSC  08.4
030D:  MOVLW  01
030E:  MOVWF  78
030F:  GOTO   32A
....................       #if defined(KBD_ROW2) 
....................       case 1:  return(input(KBD_ROW2)); 
0310:  BSF    03.5
0311:  BSF    08.5
0312:  MOVLW  00
0313:  BCF    03.5
0314:  BTFSC  08.5
0315:  MOVLW  01
0316:  MOVWF  78
0317:  GOTO   32A
....................       #endif 
....................       #if defined(KBD_ROW3) 
....................       case 2:  return(input(KBD_ROW3)); 
0318:  BSF    03.5
0319:  BSF    08.6
031A:  MOVLW  00
031B:  BCF    03.5
031C:  BTFSC  08.6
031D:  MOVLW  01
031E:  MOVWF  78
031F:  GOTO   32A
....................       #endif 
....................       #if defined(KBD_ROW4) 
....................       case 3:  return(input(KBD_ROW4)); 
0320:  BSF    03.5
0321:  BSF    08.7
0322:  MOVLW  00
0323:  BCF    03.5
0324:  BTFSC  08.7
0325:  MOVLW  01
0326:  MOVWF  78
0327:  GOTO   32A
....................       #endif 
....................    } 
....................     
....................    return(FALSE); 
0328:  MOVLW  00
0329:  MOVWF  78
032A:  BCF    0A.3
032B:  BCF    0A.4
032C:  GOTO   377 (RETURN)
.................... } 
.................... #else 
.................... static int1 _kbd_row(int i) 
.................... { 
....................    switch(i) 
....................    { 
....................       case 0:  return(!input(KBD_ROW1)); 
....................       #if defined(KBD_ROW2) 
....................       case 1:  return(!input(KBD_ROW2)); 
....................       #endif 
....................       #if defined(KBD_ROW3) 
....................       case 2:  return(!input(KBD_ROW3)); 
....................       #endif 
....................       #if defined(KBD_ROW4) 
....................       case 3:  return(!input(KBD_ROW4)); 
....................       #endif 
....................    } 
....................     
....................    return(FALSE); 
.................... } 
.................... #endif 
....................  
.................... static char _kbd_scan(void) 
.................... { 
....................    int i, j; 
....................     
....................    for(i=0; i<KBD_NUM_COLS; i++) 
*
0362:  CLRF   4A
0363:  MOVF   4A,W
0364:  SUBLW  03
0365:  BTFSS  03.0
0366:  GOTO   38C
....................    { 
....................       _kbd_col(i); 
0367:  MOVF   4A,W
0368:  MOVWF  4C
0369:  CALL   2D0
....................        
....................       KBD_RISE_TIME(); 
036A:  MOVLW  29
036B:  MOVWF  77
036C:  DECFSZ 77,F
036D:  GOTO   36C
036E:  NOP
....................        
....................       for(j=0; j<KBD_NUM_ROWS; j++) 
036F:  CLRF   4B
0370:  MOVF   4B,W
0371:  SUBLW  03
0372:  BTFSS  03.0
0373:  GOTO   38A
....................       { 
....................          if (_kbd_row(j)) 
0374:  MOVF   4B,W
0375:  MOVWF  4C
0376:  GOTO   302
0377:  MOVF   78,F
0378:  BTFSC  03.2
0379:  GOTO   388
....................          { 
....................             _kbd_col(KBD_NUM_COLS); 
037A:  MOVLW  04
037B:  MOVWF  4C
037C:  CALL   2D0
....................             return(KEYS[j][i]); 
037D:  RLF    4B,W
037E:  MOVWF  77
037F:  RLF    77,F
0380:  MOVLW  FC
0381:  ANDWF  77,F
0382:  MOVF   77,W
0383:  ADDWF  4A,W
0384:  CALL   04F
0385:  MOVWF  78
0386:  MOVWF  78
0387:  GOTO   391
....................          } 
0388:  INCF   4B,F
0389:  GOTO   370
....................       } 
038A:  INCF   4A,F
038B:  GOTO   363
....................    } 
....................     
....................    _kbd_col(KBD_NUM_COLS); 
038C:  MOVLW  04
038D:  MOVWF  4C
038E:  CALL   2D0
....................    return(0); 
038F:  MOVLW  00
0390:  MOVWF  78
.................... } 
....................  
.................... char _g_KbdGetc = 0; 
....................  
.................... int1 kbd_kbhit(void) 
.................... { 
....................    char c; 
....................    static char debounced; 
*
05A5:  BCF    03.5
05A6:  CLRF   30
....................    static enum 
....................    { 
....................       _KBD_STATE_SCANNING = 0, 
....................       _KBD_STATE_DEBOUNCE = 1, 
....................       _KBD_STATE_WAIT = 2, 
....................       _KBD_STATE_RELEASED = 3 
....................    } state; 
05A7:  CLRF   31
....................    static TICK t; 
05A8:  CLRF   32
05A9:  CLRF   33
05AA:  CLRF   34
05AB:  CLRF   35
....................    
....................    c = _kbd_scan();    
*
0391:  MOVF   78,W
0392:  MOVWF  49
....................     
....................    if (debounced && (c != debounced)) 
0393:  MOVF   30,F
0394:  BTFSC  03.2
0395:  GOTO   3A6
0396:  MOVF   30,W
0397:  SUBWF  49,W
0398:  BTFSC  03.2
0399:  GOTO   3A6
....................    { 
....................       debounced = 0; 
039A:  CLRF   30
....................       t = TickGet(); 
039B:  CALL   335
039C:  MOVF   7A,W
039D:  MOVWF  35
039E:  MOVF   79,W
039F:  MOVWF  34
03A0:  MOVF   78,W
03A1:  MOVWF  33
03A2:  MOVF   77,W
03A3:  MOVWF  32
....................       state = _KBD_STATE_RELEASED; 
03A4:  MOVLW  03
03A5:  MOVWF  31
....................    } 
....................     
....................    switch(state) 
03A6:  MOVF   31,W
03A7:  BTFSC  03.2
03A8:  GOTO   3B2
03A9:  XORLW  01
03AA:  BTFSC  03.2
03AB:  GOTO   3C3
03AC:  XORLW  03
03AD:  BTFSC  03.2
03AE:  GOTO   3EC
03AF:  XORLW  01
03B0:  BTFSC  03.2
03B1:  GOTO   3F2
....................    { 
....................       default: 
....................       case _KBD_STATE_SCANNING: 
....................          if (c) 
03B2:  MOVF   49,F
03B3:  BTFSC  03.2
03B4:  GOTO   3C2
....................          { 
....................             t = TickGet(); 
03B5:  CALL   335
03B6:  MOVF   7A,W
03B7:  MOVWF  35
03B8:  MOVF   79,W
03B9:  MOVWF  34
03BA:  MOVF   78,W
03BB:  MOVWF  33
03BC:  MOVF   77,W
03BD:  MOVWF  32
....................             debounced = c; 
03BE:  MOVF   49,W
03BF:  MOVWF  30
....................             state = _KBD_STATE_DEBOUNCE; 
03C0:  MOVLW  01
03C1:  MOVWF  31
....................          } 
....................          break; 
03C2:  GOTO   416
....................  
....................       case _KBD_STATE_DEBOUNCE: 
....................          if (TickIsExpired(t, TICKS_PER_SECOND/13))   //76ms debounce 
03C3:  CALL   335
03C4:  MOVF   7A,W
03C5:  MOVWF  4D
03C6:  MOVF   79,W
03C7:  MOVWF  4C
03C8:  MOVF   78,W
03C9:  MOVWF  4B
03CA:  MOVF   77,W
03CB:  MOVWF  4A
03CC:  MOVF   32,W
03CD:  SUBWF  4A,F
03CE:  MOVF   33,W
03CF:  BTFSS  03.0
03D0:  INCFSZ 33,W
03D1:  SUBWF  4B,F
03D2:  MOVF   34,W
03D3:  BTFSS  03.0
03D4:  INCFSZ 34,W
03D5:  SUBWF  4C,F
03D6:  MOVF   35,W
03D7:  BTFSS  03.0
03D8:  INCFSZ 35,W
03D9:  SUBWF  4D,F
03DA:  MOVF   4D,F
03DB:  BTFSS  03.2
03DC:  GOTO   3E7
03DD:  MOVF   4C,F
03DE:  BTFSS  03.2
03DF:  GOTO   3E7
03E0:  MOVF   4B,F
03E1:  BTFSS  03.2
03E2:  GOTO   3E7
03E3:  MOVF   4A,W
03E4:  SUBLW  5C
03E5:  BTFSC  03.0
03E6:  GOTO   3EB
....................          { 
....................             _g_KbdGetc = c; 
03E7:  MOVF   49,W
03E8:  MOVWF  2F
....................             state = _KBD_STATE_WAIT; 
03E9:  MOVLW  02
03EA:  MOVWF  31
....................          } 
....................          break; 
03EB:  GOTO   416
....................  
....................       case _KBD_STATE_WAIT: 
....................          if (!debounced) 
03EC:  MOVF   30,F
03ED:  BTFSS  03.2
03EE:  GOTO   3F1
....................          { 
....................             state = _KBD_STATE_WAIT; 
03EF:  MOVLW  02
03F0:  MOVWF  31
....................          } 
....................          break; 
03F1:  GOTO   416
....................  
....................       case _KBD_STATE_RELEASED: 
....................          if (TickIsExpired(t, TICKS_PER_SECOND/13))   //76ms debounce 
03F2:  CALL   335
03F3:  MOVF   7A,W
03F4:  MOVWF  4D
03F5:  MOVF   79,W
03F6:  MOVWF  4C
03F7:  MOVF   78,W
03F8:  MOVWF  4B
03F9:  MOVF   77,W
03FA:  MOVWF  4A
03FB:  MOVF   32,W
03FC:  SUBWF  4A,F
03FD:  MOVF   33,W
03FE:  BTFSS  03.0
03FF:  INCFSZ 33,W
0400:  SUBWF  4B,F
0401:  MOVF   34,W
0402:  BTFSS  03.0
0403:  INCFSZ 34,W
0404:  SUBWF  4C,F
0405:  MOVF   35,W
0406:  BTFSS  03.0
0407:  INCFSZ 35,W
0408:  SUBWF  4D,F
0409:  MOVF   4D,F
040A:  BTFSS  03.2
040B:  GOTO   415
040C:  MOVF   4C,F
040D:  BTFSS  03.2
040E:  GOTO   415
040F:  MOVF   4B,F
0410:  BTFSS  03.2
0411:  GOTO   415
0412:  MOVF   4A,W
0413:  SUBLW  5C
0414:  BTFSS  03.0
....................          { 
....................             state = _KBD_STATE_SCANNING; 
0415:  CLRF   31
....................          } 
....................          break; 
....................    } 
....................     
....................    return(_g_KbdGetc != 0); 
0416:  MOVF   2F,F
0417:  BTFSS  03.2
0418:  GOTO   41B
0419:  MOVLW  00
041A:  GOTO   41C
041B:  MOVLW  01
041C:  MOVWF  78
.................... } 
....................  
.................... char kbd_getc(void) 
.................... { 
....................    char ret; 
....................    kbd_kbhit(); 
....................    ret = _g_KbdGetc; 
041D:  MOVF   2F,W
041E:  MOVWF  48
....................    _g_KbdGetc = 0; 
041F:  CLRF   2F
....................    return(ret); 
0420:  MOVF   48,W
0421:  MOVWF  78
0422:  BCF    0A.3
0423:  BCF    0A.4
0424:  GOTO   62A (RETURN)
.................... } 
....................  
.................... #endif   //__KBD4_C__ 
....................  
....................  
.................... #define LCD_RS_PIN         PIN_E2 
.................... #define LCD_RW_PIN         PIN_E1 
.................... #define LCD_ENABLE_PIN     PIN_E0 
.................... #define LCD_DATA4          PIN_A5 
.................... #define LCD_DATA5          PIN_A4 
.................... #define LCD_DATA6          PIN_A3 
.................... #define LCD_DATA7          PIN_A2 
....................  
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
*
017D:  BSF    05.5
....................    output_float(LCD_DATA5); 
017E:  BSF    05.4
....................    output_float(LCD_DATA6); 
017F:  BSF    05.3
....................    output_float(LCD_DATA7); 
0180:  BSF    05.2
....................   #else 
....................    lcdtris.data = 0xF; 
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
0181:  BCF    03.5
0182:  BSF    09.1
0183:  BSF    03.5
0184:  BCF    09.1
....................    delay_cycles(1); 
0185:  NOP
....................    lcd_output_enable(1); 
0186:  BCF    03.5
0187:  BSF    09.0
0188:  BSF    03.5
0189:  BCF    09.0
....................    delay_cycles(1); 
018A:  NOP
....................    high = lcd_read_nibble(); 
018B:  BCF    03.5
018C:  CALL   144
018D:  MOVF   78,W
018E:  MOVWF  56
....................        
....................    lcd_output_enable(0); 
018F:  BCF    09.0
0190:  BSF    03.5
0191:  BCF    09.0
....................    delay_cycles(1); 
0192:  NOP
....................    lcd_output_enable(1); 
0193:  BCF    03.5
0194:  BSF    09.0
0195:  BSF    03.5
0196:  BCF    09.0
....................    delay_us(1); 
0197:  GOTO   198
0198:  GOTO   199
0199:  NOP
....................    low = lcd_read_nibble(); 
019A:  BCF    03.5
019B:  CALL   144
019C:  MOVF   78,W
019D:  MOVWF  55
....................        
....................    lcd_output_enable(0); 
019E:  BCF    09.0
019F:  BSF    03.5
01A0:  BCF    09.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
01A1:  BCF    05.5
....................    output_drive(LCD_DATA5); 
01A2:  BCF    05.4
....................    output_drive(LCD_DATA6); 
01A3:  BCF    05.3
....................    output_drive(LCD_DATA7); 
01A4:  BCF    05.2
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
01A5:  BCF    03.5
01A6:  SWAPF  56,W
01A7:  MOVWF  77
01A8:  MOVLW  F0
01A9:  ANDWF  77,F
01AA:  MOVF   77,W
01AB:  IORWF  55,W
01AC:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
*
0144:  CLRF   57
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
0145:  BSF    03.5
0146:  BSF    05.5
0147:  MOVLW  00
0148:  BCF    03.5
0149:  BTFSC  05.5
014A:  MOVLW  01
014B:  IORWF  57,F
....................    n |= input(LCD_DATA5) << 1; 
014C:  BSF    03.5
014D:  BSF    05.4
014E:  MOVLW  00
014F:  BCF    03.5
0150:  BTFSC  05.4
0151:  MOVLW  01
0152:  MOVWF  77
0153:  BCF    03.0
0154:  RLF    77,F
0155:  MOVF   77,W
0156:  IORWF  57,F
....................    n |= input(LCD_DATA6) << 2; 
0157:  BSF    03.5
0158:  BSF    05.3
0159:  MOVLW  00
015A:  BCF    03.5
015B:  BTFSC  05.3
015C:  MOVLW  01
015D:  MOVWF  77
015E:  RLF    77,F
015F:  RLF    77,F
0160:  MOVLW  FC
0161:  ANDWF  77,F
0162:  MOVF   77,W
0163:  IORWF  57,F
....................    n |= input(LCD_DATA7) << 3; 
0164:  BSF    03.5
0165:  BSF    05.2
0166:  MOVLW  00
0167:  BCF    03.5
0168:  BTFSC  05.2
0169:  MOVLW  01
016A:  MOVWF  77
016B:  RLF    77,F
016C:  RLF    77,F
016D:  RLF    77,F
016E:  MOVLW  F8
016F:  ANDWF  77,F
0170:  MOVF   77,W
0171:  IORWF  57,F
....................     
....................    return(n); 
0172:  MOVF   57,W
0173:  MOVWF  78
....................   #else 
0174:  RETURN
....................    return(lcd.data); 
....................   #endif 
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
*
0116:  BTFSC  56.0
0117:  GOTO   11A
0118:  BCF    05.5
0119:  GOTO   11B
011A:  BSF    05.5
011B:  BSF    03.5
011C:  BCF    05.5
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
011D:  BCF    03.5
011E:  BTFSC  56.1
011F:  GOTO   122
0120:  BCF    05.4
0121:  GOTO   123
0122:  BSF    05.4
0123:  BSF    03.5
0124:  BCF    05.4
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
0125:  BCF    03.5
0126:  BTFSC  56.2
0127:  GOTO   12A
0128:  BCF    05.3
0129:  GOTO   12B
012A:  BSF    05.3
012B:  BSF    03.5
012C:  BCF    05.3
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
012D:  BCF    03.5
012E:  BTFSC  56.3
012F:  GOTO   132
0130:  BCF    05.2
0131:  GOTO   133
0132:  BSF    05.2
0133:  BSF    03.5
0134:  BCF    05.2
....................   #else       
....................    lcdlat.data = n; 
....................   #endif 
....................        
....................    delay_cycles(1); 
0135:  NOP
....................    lcd_output_enable(1); 
0136:  BCF    03.5
0137:  BSF    09.0
0138:  BSF    03.5
0139:  BCF    09.0
....................    delay_us(2); 
013A:  MOVLW  03
013B:  MOVWF  77
013C:  DECFSZ 77,F
013D:  GOTO   13C
....................    lcd_output_enable(0); 
013E:  BCF    03.5
013F:  BCF    09.0
0140:  BSF    03.5
0141:  BCF    09.0
0142:  BCF    03.5
0143:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
0175:  BSF    03.5
0176:  BCF    09.0
....................    lcd_rs_tris(); 
0177:  BCF    09.2
....................    lcd_rw_tris(); 
0178:  BCF    09.1
....................   #endif 
....................  
....................    lcd_output_rs(0); 
0179:  BCF    03.5
017A:  BCF    09.2
017B:  BSF    03.5
017C:  BCF    09.2
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
01AD:  MOVF   78,W
01AE:  MOVWF  55
01AF:  BTFSS  55.7
01B0:  GOTO   1B3
01B1:  BSF    03.5
01B2:  GOTO   17D
....................    lcd_output_rs(address); 
01B3:  MOVF   53,F
01B4:  BTFSS  03.2
01B5:  GOTO   1B8
01B6:  BCF    09.2
01B7:  GOTO   1B9
01B8:  BSF    09.2
01B9:  BSF    03.5
01BA:  BCF    09.2
....................    delay_cycles(1); 
01BB:  NOP
....................    lcd_output_rw(0); 
01BC:  BCF    03.5
01BD:  BCF    09.1
01BE:  BSF    03.5
01BF:  BCF    09.1
....................    delay_cycles(1); 
01C0:  NOP
....................    lcd_output_enable(0); 
01C1:  BCF    03.5
01C2:  BCF    09.0
01C3:  BSF    03.5
01C4:  BCF    09.0
....................    lcd_send_nibble(n >> 4); 
01C5:  BCF    03.5
01C6:  SWAPF  54,W
01C7:  MOVWF  55
01C8:  MOVLW  0F
01C9:  ANDWF  55,F
01CA:  MOVF   55,W
01CB:  MOVWF  56
01CC:  CALL   116
....................    lcd_send_nibble(n & 0xf); 
01CD:  MOVF   54,W
01CE:  ANDLW  0F
01CF:  MOVWF  55
01D0:  MOVWF  56
01D1:  CALL   116
01D2:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
01D3:  MOVLW  28
01D4:  MOVWF  49
01D5:  MOVLW  0C
01D6:  MOVWF  4A
01D7:  MOVLW  01
01D8:  MOVWF  4B
01D9:  MOVLW  06
01DA:  MOVWF  4C
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
01DB:  BCF    09.0
01DC:  BSF    03.5
01DD:  BCF    09.0
....................    lcd_output_rs(0); 
01DE:  BCF    03.5
01DF:  BCF    09.2
01E0:  BSF    03.5
01E1:  BCF    09.2
....................    lcd_output_rw(0); 
01E2:  BCF    03.5
01E3:  BCF    09.1
01E4:  BSF    03.5
01E5:  BCF    09.1
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
01E6:  BCF    05.5
....................    output_drive(LCD_DATA5); 
01E7:  BCF    05.4
....................    output_drive(LCD_DATA6); 
01E8:  BCF    05.3
....................    output_drive(LCD_DATA7); 
01E9:  BCF    05.2
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................    lcd_enable_tris(); 
01EA:  BCF    09.0
....................    lcd_rs_tris(); 
01EB:  BCF    09.2
....................    lcd_rw_tris(); 
01EC:  BCF    09.1
....................  #endif 
....................      
....................    delay_ms(15); 
01ED:  MOVLW  0F
01EE:  BCF    03.5
01EF:  MOVWF  4F
01F0:  CALL   102
....................    for(i=1;i<=3;++i) 
01F1:  MOVLW  01
01F2:  MOVWF  48
01F3:  MOVF   48,W
01F4:  SUBLW  03
01F5:  BTFSS  03.0
01F6:  GOTO   1FF
....................    { 
....................        lcd_send_nibble(3); 
01F7:  MOVLW  03
01F8:  MOVWF  56
01F9:  CALL   116
....................        delay_ms(5); 
01FA:  MOVLW  05
01FB:  MOVWF  4F
01FC:  CALL   102
01FD:  INCF   48,F
01FE:  GOTO   1F3
....................    } 
....................     
....................    lcd_send_nibble(2); 
01FF:  MOVLW  02
0200:  MOVWF  56
0201:  CALL   116
....................    delay_ms(5); 
0202:  MOVLW  05
0203:  MOVWF  4F
0204:  CALL   102
....................    for(i=0;i<=3;++i) 
0205:  CLRF   48
0206:  MOVF   48,W
0207:  SUBLW  03
0208:  BTFSS  03.0
0209:  GOTO   216
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
020A:  MOVLW  49
020B:  ADDWF  48,W
020C:  MOVWF  04
020D:  BCF    03.7
020E:  MOVF   00,W
020F:  MOVWF  4D
0210:  CLRF   53
0211:  MOVF   4D,W
0212:  MOVWF  54
0213:  CALL   175
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
0214:  INCF   48,F
0215:  GOTO   206
0216:  BCF    0A.3
0217:  BCF    0A.4
0218:  GOTO   5EC (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
*
0425:  DECFSZ 50,W
0426:  GOTO   428
0427:  GOTO   42B
....................       address=LCD_LINE_TWO; 
0428:  MOVLW  40
0429:  MOVWF  51
042A:  GOTO   42C
....................    else 
....................       address=0; 
042B:  CLRF   51
....................       
....................    address+=x-1; 
042C:  MOVLW  01
042D:  SUBWF  4F,W
042E:  ADDWF  51,F
....................    lcd_send_byte(0,0x80|address); 
042F:  MOVF   51,W
0430:  IORLW  80
0431:  MOVWF  52
0432:  CLRF   53
0433:  MOVF   52,W
0434:  MOVWF  54
0435:  CALL   175
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
0436:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
0437:  MOVF   4E,W
0438:  XORLW  07
0439:  BTFSC  03.2
043A:  GOTO   445
043B:  XORLW  0B
043C:  BTFSC  03.2
043D:  GOTO   44A
043E:  XORLW  06
043F:  BTFSC  03.2
0440:  GOTO   452
0441:  XORLW  02
0442:  BTFSC  03.2
0443:  GOTO   458
0444:  GOTO   45D
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
0445:  MOVLW  01
0446:  MOVWF  4F
0447:  MOVWF  50
0448:  CALL   425
0449:  GOTO   462
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
044A:  CLRF   53
044B:  MOVLW  01
044C:  MOVWF  54
044D:  CALL   175
....................                      delay_ms(2); 
044E:  MOVLW  02
044F:  MOVWF  4F
0450:  CALL   102
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
0451:  GOTO   462
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
0452:  MOVLW  01
0453:  MOVWF  4F
0454:  MOVLW  02
0455:  MOVWF  50
0456:  CALL   425
0457:  GOTO   462
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
0458:  CLRF   53
0459:  MOVLW  10
045A:  MOVWF  54
045B:  CALL   175
045C:  GOTO   462
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
045D:  MOVLW  01
045E:  MOVWF  53
045F:  MOVF   4E,W
0460:  MOVWF  54
0461:  CALL   175
....................      #endif 
....................    } 
0462:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
....................  
.................... //Motor de passo - D0|D1|D2|D3 
.................... //Motor DC - CCP1|CCP2 
....................  
.................... //Motor de passo 
.................... short sentPasso = 0; //sentido moto de passo 
.................... int time = 0, cont = 0, passo[4] = {0b00000001, 0b0000010, 0b0000100, 0b00001000}; // i = Bobina, passo = bobinas para dar passo  
*
05AC:  MOVLW  01
05AD:  MOVWF  39
05AE:  MOVLW  02
05AF:  MOVWF  3A
05B0:  MOVLW  04
05B1:  MOVWF  3B
05B2:  MOVLW  08
05B3:  MOVWF  3C
.................... signed int i = 0;   // time = Contador de tempo para velocidade moto de passo , cont = contador para o controle de velocidade 
....................  
.................... //Motor DC 
.................... int16 speed_DC = 0; //velocidade motor DC 
.................... int porc = 0;  
.................... short sent = 0; 
.................... char c = '0', var ='0', newchar; 
.................... int newint; 
....................  
.................... #INT_RTCC 
.................... void  RTCC_isr(void)  
.................... { 
....................    if(time > 0){ 
*
0063:  MOVF   37,F
0064:  BTFSC  03.2
0065:  GOTO   096
....................       cont++; 
0066:  INCF   38,F
....................       if (sentPasso == 1){ 
0067:  BTFSS  36.0
0068:  GOTO   081
....................        if (i > 3) i = 0;  
0069:  BTFSC  3D.7
006A:  GOTO   06F
006B:  MOVF   3D,W
006C:  SUBLW  03
006D:  BTFSS  03.0
006E:  CLRF   3D
....................          if(cont >= time){ 
006F:  MOVF   37,W
0070:  SUBWF  38,W
0071:  BTFSS  03.0
0072:  GOTO   080
....................             output_b(passo[i]); 
0073:  MOVLW  39
0074:  ADDWF  3D,W
0075:  MOVWF  04
0076:  BCF    03.7
0077:  MOVF   00,W
0078:  MOVWF  59
0079:  BSF    03.5
007A:  CLRF   06
007B:  BCF    03.5
007C:  MOVF   59,W
007D:  MOVWF  06
....................             i++; 
007E:  INCF   3D,F
....................             cont = 0; 
007F:  CLRF   38
....................          } 
....................       }else{ 
0080:  GOTO   096
....................          if (i < 0) i = 3; 
0081:  BTFSS  3D.7
0082:  GOTO   085
0083:  MOVLW  03
0084:  MOVWF  3D
....................          if(cont >= time){ 
0085:  MOVF   37,W
0086:  SUBWF  38,W
0087:  BTFSS  03.0
0088:  GOTO   096
....................             output_b(passo[i]); 
0089:  MOVLW  39
008A:  ADDWF  3D,W
008B:  MOVWF  04
008C:  BCF    03.7
008D:  MOVF   00,W
008E:  MOVWF  59
008F:  BSF    03.5
0090:  CLRF   06
0091:  BCF    03.5
0092:  MOVF   59,W
0093:  MOVWF  06
....................             i--;     
0094:  DECF   3D,F
....................             cont = 0; 
0095:  CLRF   38
....................          } 
....................       } 
....................    } 
....................    if(sent){ 
0096:  BTFSS  36.1
0097:  GOTO   0B4
....................          set_pwm2_duty((int16)0); 
0098:  CLRF   1B
0099:  MOVF   1D,W
009A:  ANDLW  CF
009B:  MOVWF  1D
....................          delay_us(50); 
009C:  MOVLW  53
009D:  MOVWF  77
009E:  DECFSZ 77,F
009F:  GOTO   09E
....................          set_pwm1_duty((int16)speed_DC); 
00A0:  MOVF   3F,W
00A1:  MOVWF  79
00A2:  MOVF   3E,W
00A3:  MOVWF  78
00A4:  RRF    79,F
00A5:  RRF    78,F
00A6:  RRF    79,F
00A7:  RRF    78,F
00A8:  RRF    79,F
00A9:  MOVF   78,W
00AA:  MOVWF  15
00AB:  RRF    79,F
00AC:  RRF    79,W
00AD:  ANDLW  30
00AE:  MOVWF  77
00AF:  MOVF   17,W
00B0:  ANDLW  CF
00B1:  IORWF  77,W
00B2:  MOVWF  17
....................           
....................       }else{ 
00B3:  GOTO   0CF
....................          set_pwm1_duty((int16)0); 
00B4:  CLRF   15
00B5:  MOVF   17,W
00B6:  ANDLW  CF
00B7:  MOVWF  17
....................          delay_us(50); 
00B8:  MOVLW  53
00B9:  MOVWF  77
00BA:  DECFSZ 77,F
00BB:  GOTO   0BA
....................          set_pwm2_duty((int16)speed_DC); 
00BC:  MOVF   3F,W
00BD:  MOVWF  79
00BE:  MOVF   3E,W
00BF:  MOVWF  78
00C0:  RRF    79,F
00C1:  RRF    78,F
00C2:  RRF    79,F
00C3:  RRF    78,F
00C4:  RRF    79,F
00C5:  MOVF   78,W
00C6:  MOVWF  1B
00C7:  RRF    79,F
00C8:  RRF    79,W
00C9:  ANDLW  30
00CA:  MOVWF  77
00CB:  MOVF   1D,W
00CC:  ANDLW  CF
00CD:  IORWF  77,W
00CE:  MOVWF  1D
....................       } 
00CF:  BCF    0B.2
00D0:  BCF    0A.3
00D1:  BCF    0A.4
00D2:  GOTO   02B
.................... } 
....................  
....................  
.................... void main() 
*
0580:  MOVF   03,W
0581:  ANDLW  1F
0582:  MOVWF  03
0583:  CLRF   2E
0584:  CLRF   2D
0585:  CLRF   2C
0586:  CLRF   2B
0587:  MOVLW  B5
0588:  MOVWF  10
0589:  CLRF   0E
058A:  CLRF   0F
058B:  CLRF   0E
058C:  BCF    0C.0
058D:  CLRF   2F
058E:  BCF    36.0
058F:  CLRF   37
0590:  CLRF   38
0591:  CLRF   3D
0592:  CLRF   3F
0593:  CLRF   3E
0594:  CLRF   40
0595:  BCF    36.1
0596:  MOVLW  30
0597:  MOVWF  41
0598:  MOVWF  42
0599:  MOVLW  FF
059A:  MOVWF  45
059B:  CLRF   47
059C:  CLRF   46
059D:  BSF    03.5
059E:  BSF    1F.0
059F:  BSF    1F.1
05A0:  BSF    1F.2
05A1:  BCF    1F.3
05A2:  MOVLW  07
05A3:  MOVWF  1C
05A4:  BCF    03.7
.................... { 
....................    setup_adc_ports(AN0); 
*
05B4:  BSF    03.5
05B5:  BCF    1F.0
05B6:  BSF    1F.1
05B7:  BSF    1F.2
05B8:  BSF    1F.3
....................    setup_adc(ADC_CLOCK_INTERNAL); 
05B9:  BCF    1F.6
05BA:  BCF    03.5
05BB:  BSF    1F.6
05BC:  BSF    1F.7
05BD:  BSF    03.5
05BE:  BSF    1F.7
05BF:  BCF    03.5
05C0:  BSF    1F.0
....................     
....................    setup_timer_0(RTCC_INTERNAL|RTCC_DIV_32|RTCC_8_BIT);      //1,6 ms overflow 
05C1:  BSF    03.5
05C2:  MOVF   01,W
05C3:  ANDLW  C0
05C4:  IORLW  04
05C5:  MOVWF  01
....................    setup_timer_2(T2_DIV_BY_16,255,1);      //819 us overflow, 819 us interrupt 
05C6:  MOVLW  00
05C7:  MOVWF  78
05C8:  IORLW  06
05C9:  BCF    03.5
05CA:  MOVWF  12
05CB:  MOVLW  FF
05CC:  BSF    03.5
05CD:  MOVWF  12
....................     
....................    enable_interrupts(INT_RTCC); 
05CE:  BCF    03.5
05CF:  BSF    0B.5
....................    enable_interrupts(GLOBAL); 
05D0:  MOVLW  C0
05D1:  IORWF  0B,F
....................  
....................    setup_ccp1(CCP_PWM); 
05D2:  BCF    45.2
05D3:  MOVF   45,W
05D4:  BSF    03.5
05D5:  MOVWF  07
05D6:  BCF    03.5
05D7:  BCF    07.2
05D8:  MOVLW  0C
05D9:  MOVWF  17
....................    setup_ccp2(CCP_PWM); 
05DA:  BCF    45.1
05DB:  MOVF   45,W
05DC:  BSF    03.5
05DD:  MOVWF  07
05DE:  BCF    03.5
05DF:  BCF    07.1
05E0:  MOVLW  0C
05E1:  MOVWF  1D
....................    set_pwm1_duty((int16)0); 
05E2:  CLRF   15
05E3:  MOVF   17,W
05E4:  ANDLW  CF
05E5:  MOVWF  17
....................    set_pwm2_duty((int16)0); 
05E6:  CLRF   1B
05E7:  MOVF   1D,W
05E8:  ANDLW  CF
05E9:  MOVWF  1D
....................     
....................    kbd_init(); 
05EA:  GOTO   0E5
....................  
....................    lcd_init(); 
05EB:  GOTO   1D3
....................     
....................     
....................    while(true) 
....................    { 
....................       speed_DC = read_adc(); 
05EC:  BSF    1F.2
05ED:  BTFSC  1F.2
05EE:  GOTO   5ED
05EF:  BSF    03.5
05F0:  MOVF   1E,W
05F1:  BCF    03.5
05F2:  MOVWF  3E
05F3:  MOVF   1E,W
05F4:  MOVWF  3F
....................       delay_us(50); 
05F5:  MOVLW  53
05F6:  MOVWF  77
05F7:  DECFSZ 77,F
05F8:  GOTO   5F7
....................       porc = (int)(speed_DC*0.09775171); 
05F9:  MOVF   3F,W
05FA:  MOVWF  49
05FB:  MOVF   3E,W
05FC:  MOVWF  48
05FD:  GOTO   219
05FE:  MOVF   7A,W
05FF:  MOVWF  4B
0600:  MOVF   79,W
0601:  MOVWF  4A
0602:  MOVF   78,W
0603:  MOVWF  49
0604:  MOVF   77,W
0605:  MOVWF  48
0606:  MOVLW  0C
0607:  MOVWF  4F
0608:  MOVLW  32
0609:  MOVWF  4E
060A:  MOVLW  48
060B:  MOVWF  4D
060C:  MOVLW  7B
060D:  MOVWF  4C
060E:  GOTO   238
060F:  MOVF   7A,W
0610:  MOVWF  4B
0611:  MOVF   79,W
0612:  MOVWF  4A
0613:  MOVF   78,W
0614:  MOVWF  49
0615:  MOVF   77,W
0616:  MOVWF  48
0617:  GOTO   2AF
0618:  MOVF   78,W
0619:  MOVWF  40
....................       if (input(PIN_A1)) 
061A:  BSF    03.5
061B:  BSF    05.1
061C:  BCF    03.5
061D:  BTFSS  05.1
061E:  GOTO   629
....................       { 
....................          while(input(PIN_A1)){;} 
061F:  BSF    03.5
0620:  BSF    05.1
0621:  BCF    03.5
0622:  BTFSC  05.1
0623:  GOTO   61F
....................          if(sent) 
0624:  BTFSS  36.1
0625:  GOTO   628
....................          { 
....................             sent = 0; 
0626:  BCF    36.1
....................          }else{ 
0627:  GOTO   629
....................             sent = 1; 
0628:  BSF    36.1
....................          } 
....................       } 
....................       c = kbd_getc(); 
0629:  GOTO   362
062A:  MOVF   78,W
062B:  MOVWF  41
....................       delay_ms(1); 
062C:  MOVLW  01
062D:  MOVWF  4F
062E:  CALL   102
....................       if(c!=0) 
062F:  MOVF   41,F
0630:  BTFSC  03.2
0631:  GOTO   66D
....................       {   
....................          switch(c){ 
0632:  MOVF   41,W
0633:  XORLW  31
0634:  BTFSC  03.2
0635:  GOTO   64C
0636:  XORLW  03
0637:  BTFSC  03.2
0638:  GOTO   651
0639:  XORLW  01
063A:  BTFSC  03.2
063B:  GOTO   656
063C:  XORLW  07
063D:  BTFSC  03.2
063E:  GOTO   65B
063F:  XORLW  01
0640:  BTFSC  03.2
0641:  GOTO   660
0642:  XORLW  05
0643:  BTFSC  03.2
0644:  GOTO   665
0645:  XORLW  1A
0646:  BTFSC  03.2
0647:  GOTO   669
0648:  XORLW  09
0649:  BTFSC  03.2
064A:  GOTO   66B
064B:  GOTO   66D
....................             case '1': time = 60; var = c; break; 
064C:  MOVLW  3C
064D:  MOVWF  37
064E:  MOVF   41,W
064F:  MOVWF  42
0650:  GOTO   66D
....................             case '2': time = 45; var = c; break; 
0651:  MOVLW  2D
0652:  MOVWF  37
0653:  MOVF   41,W
0654:  MOVWF  42
0655:  GOTO   66D
....................             case '3': time = 30; var = c; break; 
0656:  MOVLW  1E
0657:  MOVWF  37
0658:  MOVF   41,W
0659:  MOVWF  42
065A:  GOTO   66D
....................             case '4': time = 15; var = c; break; 
065B:  MOVLW  0F
065C:  MOVWF  37
065D:  MOVF   41,W
065E:  MOVWF  42
065F:  GOTO   66D
....................             case '5': time =  5; var = c; break; 
0660:  MOVLW  05
0661:  MOVWF  37
0662:  MOVF   41,W
0663:  MOVWF  42
0664:  GOTO   66D
....................             case '0': time =  0; var = c; break; 
0665:  CLRF   37
0666:  MOVF   41,W
0667:  MOVWF  42
0668:  GOTO   66D
....................             case '*': sentPasso = 0; break; 
0669:  BCF    36.0
066A:  GOTO   66D
....................             case '#': sentPasso = 1; break; 
066B:  BSF    36.0
066C:  GOTO   66D
....................             default: break; 
....................          } 
....................       } 
....................       if(var != newchar || porc != newint) 
066D:  MOVF   43,W
066E:  SUBWF  42,W
066F:  BTFSS  03.2
0670:  GOTO   675
0671:  MOVF   44,W
0672:  SUBWF  40,W
0673:  BTFSC  03.2
0674:  GOTO   69C
....................       { 
....................          newchar = var; 
0675:  MOVF   42,W
0676:  MOVWF  43
....................          newint = porc; 
0677:  MOVF   40,W
0678:  MOVWF  44
....................          printf(lcd_putc, "\fVelocidade Motor\n"); 
0679:  MOVLW  D3
067A:  BSF    03.6
067B:  MOVWF  0D
067C:  MOVLW  00
067D:  MOVWF  0F
067E:  BCF    03.6
067F:  GOTO   463
....................          printf(lcd_putc, "Passo=%c DC=%d",newchar,newint);    
0680:  MOVLW  DD
0681:  BSF    03.6
0682:  MOVWF  0D
0683:  MOVLW  00
0684:  MOVWF  0F
0685:  BCF    03.0
0686:  MOVLW  06
0687:  BCF    03.6
0688:  MOVWF  48
0689:  CALL   4BB
068A:  MOVF   43,W
068B:  MOVWF  4E
068C:  CALL   437
068D:  MOVLW  E1
068E:  BSF    03.6
068F:  MOVWF  0D
0690:  MOVLW  00
0691:  MOVWF  0F
0692:  BCF    03.0
0693:  MOVLW  04
0694:  BCF    03.6
0695:  MOVWF  48
0696:  CALL   4BB
0697:  MOVF   44,W
0698:  MOVWF  48
0699:  MOVLW  18
069A:  MOVWF  49
069B:  GOTO   527
....................       } 
069C:  GOTO   5EC
....................    } 
.................... } 
069D:  SLEEP

Configuration Fuses:
   Word  1: 3F32   HS NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
