CCS PCM C Compiler, Version 5.081, 13314               15-mar-19 10:54

               Filename:   C:\Users\pedro\OneDrive\Faculdade\Faculdade\2019.1\Microcontroladores\Testes\Blink.lst

               ROM used:   77 words (1%)
                           Largest free fragment is 2048
               RAM used:   7 (2%) at main() level
                           8 (2%) worst case
               Stack used: 0 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   018
0003:  NOP
.................... //#include <Blink.h> 
....................  
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
....................  
.................... #list 
....................  
.................... #device ADC=10 
.................... #use delay(crystal=20000000) 
0004:  MOVLW  22
0005:  MOVWF  04
0006:  BCF    03.7
0007:  MOVF   00,W
0008:  BTFSC  03.2
0009:  GOTO   017
000A:  MOVLW  06
000B:  MOVWF  78
000C:  CLRF   77
000D:  DECFSZ 77,F
000E:  GOTO   00D
000F:  DECFSZ 78,F
0010:  GOTO   00C
0011:  MOVLW  7B
0012:  MOVWF  77
0013:  DECFSZ 77,F
0014:  GOTO   013
0015:  DECFSZ 00,F
0016:  GOTO   00A
0017:  RETURN
.................... //#use FIXED_IO( A_outputs=PIN_A0 ) 
....................  
....................  
.................... void main() 
0018:  MOVF   03,W
0019:  ANDLW  1F
001A:  MOVWF  03
001B:  MOVLW  FF
001C:  MOVWF  20
001D:  BSF    03.5
001E:  BSF    1F.0
001F:  BSF    1F.1
0020:  BSF    1F.2
0021:  BCF    1F.3
0022:  MOVLW  07
0023:  MOVWF  1C
0024:  BCF    03.7
.................... { 
....................  
....................    while(TRUE) 
....................    { 
....................    output_A(0b11111111); 
0025:  CLRF   05
0026:  MOVLW  FF
0027:  BCF    03.5
0028:  MOVWF  05
....................    output_C(0b11111111); 
0029:  MOVLW  00
002A:  MOVWF  20
002B:  BSF    03.5
002C:  CLRF   07
002D:  MOVLW  FF
002E:  BCF    03.5
002F:  MOVWF  07
....................    output_B(0b11111111); 
0030:  BSF    03.5
0031:  CLRF   06
0032:  BCF    03.5
0033:  MOVWF  06
....................    output_high(PIN_A0); 
0034:  BSF    03.5
0035:  BCF    05.0
0036:  BCF    03.5
0037:  BSF    05.0
....................    delay_ms(500); 
0038:  MOVLW  02
0039:  MOVWF  21
003A:  MOVLW  FA
003B:  MOVWF  22
003C:  CALL   004
003D:  DECFSZ 21,F
003E:  GOTO   03A
....................    output_low(PIN_A0); 
003F:  BSF    03.5
0040:  BCF    05.0
0041:  BCF    03.5
0042:  BCF    05.0
....................    delay_ms(500); 
0043:  MOVLW  02
0044:  MOVWF  21
0045:  MOVLW  FA
0046:  MOVWF  22
0047:  CALL   004
0048:  DECFSZ 21,F
0049:  GOTO   045
004A:  BSF    03.5
004B:  GOTO   025
....................  
....................       //TODO: User Code 
....................    } 
....................  
.................... } 
004C:  SLEEP

Configuration Fuses:
   Word  1: 3F72   HS NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
